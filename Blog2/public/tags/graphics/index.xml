<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graphics on The R Blog</title>
    <link>https://blog.r-project.org/tags/graphics/</link>
    <description>Recent content in graphics on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jun 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.r-project.org/tags/graphics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vectorised Patterns in R Graphics</title>
      <link>https://blog.r-project.org/2022/06/09/vectorised-patterns-in-r-graphics/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/06/09/vectorised-patterns-in-r-graphics/</guid>
      <description>Support for pattern fills was added to the R graphics engine in R version 4.1.0, with an R interface via the ‘grid’ package.
library(grid) For example, the following code defines a linear gradient that varies horizontally from red to white and a tiling pattern that is based on a repeating red circle.
gradcol &amp;lt;- c(palette()[2], &amp;quot;white&amp;quot;) grad &amp;lt;- linearGradient(gradcol, y1=.5, y2=.5) patcol &amp;lt;- 2 pat &amp;lt;- pattern(circleGrob(r=unit(2, &amp;quot;mm&amp;quot;), gp=gpar(col=patcol, fill=patcol)), width=unit(5, &amp;quot;mm&amp;quot;), height=unit(5, &amp;quot;mm&amp;quot;), extend=&amp;quot;repeat&amp;quot;) The next code calls grid.</description>
    </item>
    
    <item>
      <title>Updating Graphics Devices for R 4.2.0</title>
      <link>https://blog.r-project.org/2021/12/14/updating-graphics-devices-for-r-4.2.0/</link>
      <pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/12/14/updating-graphics-devices-for-r-4.2.0/</guid>
      <description>A number of new graphics features have been added to the R graphics engine in the development version of R (to become version 4.2.0):
groups, compositing operators, affine transformations, stroking and filling paths, and luminance masks. This has consequences for R packages that provide graphics devices, like the ‘ragg’ package.
For users of R packages that provide graphics devices, those packages will need to be reinstalled when updating to R 4.</description>
    </item>
    
    <item>
      <title>Groups and Paths and Masks in R Graphics</title>
      <link>https://blog.r-project.org/2021/12/06/groups-and-paths-and-masks-in-r-graphics/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/12/06/groups-and-paths-and-masks-in-r-graphics/</guid>
      <description>UPDATE: (2023-05-18) The behaviour of compositing operators was modified in R version 4.3.0 (affecting the “clear” and “source” operators). The examples in this post have been updated so that they produce the same output (just using a different operator).
 Support for gradient fills, pattern fills, clipping paths and masks was added to the R graphics engine in R version 4.1.0.
The development version of R (likely to become R version 4.</description>
    </item>
    
    <item>
      <title>New Features in the R Graphics Engine</title>
      <link>https://blog.r-project.org/2020/07/15/new-features-in-the-r-graphics-engine/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2020/07/15/new-features-in-the-r-graphics-engine/</guid>
      <description>Support for gradient fills, pattern fills, clipping paths and masks has been added to the R graphics engine (in the development version of R, which will probably become R version 4.1.0).
An R-level interface for these new features has been added to the ‘grid’ graphics package.
library(grid) For example, the following code fills a circle with a linear gradient.
grid.circle(gp=gpar(col=NA, fill=linearGradient())) The next code fills a rectangle with a radial gradient.</description>
    </item>
    
    <item>
      <title>Improvements to Clipping in the R Graphics Engine</title>
      <link>https://blog.r-project.org/2020/06/08/improvements-to-clipping-in-the-r-graphics-engine/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2020/06/08/improvements-to-clipping-in-the-r-graphics-engine/</guid>
      <description>UPDATE (2020-11-18): canClip = NA_LOGICAL has been replaced by deviceClip = TRUE
The R graphics engine performs some clipping of output regardless of whether the graphics device it is sending output to can perform clipping itself. For example, output that is sent to the postscript() device, which can do its own clipping, is still clipped by the graphics engine to the edges of the device.
This is useful for devices that cannot clip, e.</description>
    </item>
    
  </channel>
</rss>