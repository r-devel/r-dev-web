<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>encodings on The R Blog</title>
    <link>https://blog.r-project.org/tags/encodings/</link>
    <description>Recent content in encodings on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Nov 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.r-project.org/tags/encodings/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Issues While Switching R to UTF-8 and UCRT on Windows</title>
      <link>https://blog.r-project.org/2022/11/07/issues-while-switching-r-to-utf-8-and-ucrt-on-windows/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/11/07/issues-while-switching-r-to-utf-8-and-ucrt-on-windows/</guid>
      <description>From version 4.2.0 released in April 2022, R on Windows uses UTF-8 as the native encoding via UCRT as the new C Windows runtime. The transition for R and its packages has been a non-trivial effort which took several years. This post gives a summary some technical obstacles found on the way, focusing on aspects that may be interesting to other projects.
R specifics R is implemented in C and Fortran (and R).</description>
    </item>
    
    <item>
      <title>Improvements in handling bytes encoding</title>
      <link>https://blog.r-project.org/2022/10/10/improvements-in-handling-bytes-encoding/</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/10/10/improvements-in-handling-bytes-encoding/</guid>
      <description>In R, a string can be declared to be in bytes encoding. According to ?Encoding, it must be a non-ASCII string which should be manipulated as bytes and never converted to a character encoding (e.g. Latin 1, UTF-8). This text summarizes recent improvements in how R handles bytes encoded strings and provides some of thoughts about what they should and shouldn’t be used for today.
Character vector, string and encoding Particularly for readers not familiar with R, it may be useful to highlight how strings are supported in the language.</description>
    </item>
    
    <item>
      <title>Speedups in operations with regular expressions</title>
      <link>https://blog.r-project.org/2022/07/12/speedups-in-operations-with-regular-expressions/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/07/12/speedups-in-operations-with-regular-expressions/</guid>
      <description>Regular expression operations in R, such as grep or gsub, sometimes have significant performance overheads due to encoding conversions.
Some R code tries to mitigate this by ignoring input encodings and pretending it is fine to work on individual bytes (via useBytes=TRUE). This removes such overheads, but produces correct results only in special cases, e.g. for simple regular expressions in UTF-8. With the current implementation of gsub and strsplit in R, this can also silently introduce invalid strings, which may cause invalid results or errors in further processing.</description>
    </item>
    
    <item>
      <title>Why to avoid \x in regular expressions</title>
      <link>https://blog.r-project.org/2022/06/27/why-to-avoid-%5Cx-in-regular-expressions/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/06/27/why-to-avoid-%5Cx-in-regular-expressions/</guid>
      <description>Using \x in string literals is almost always a bad idea, but using it in regular expressions is particularly dangerous.
Consider this “don’t do” example in R 4.2.1 or earlier:
text &amp;lt;- &amp;quot;Hello\u00a0R&amp;quot; gsub(&amp;quot;\xa0&amp;quot;, &amp;quot;&amp;quot;, text) a0 is the code point of the Unicode “NO-BREAK SPACE” and the example runs in UTF-8 locale. The intention is to remove the space; a slightly more complicated variant has been discussed on the R-devel mailing list about half a year ago.</description>
    </item>
    
    <item>
      <title>Upcoming Changes in R 4.2.1 on Windows</title>
      <link>https://blog.r-project.org/2022/06/16/upcoming-changes-in-r-4.2.1-on-windows/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/06/16/upcoming-changes-in-r-4.2.1-on-windows/</guid>
      <description>R 4.2.1 is scheduled to be released next week with a number of Windows-specific fixes. All Windows R users currently using R 4.2.0 should upgrade to R 4.2.1. This text has more details on some of the fixes.
R 4.2.0 on Windows came with a significant improvement. It uses UTF-8 as the native encoding and for that it switched to the Universal C Runtime (UCRT). This in turn required creating a new R toolchain for Windows and re-building R, R packages and all (statically linked) dependencies with it (Rtools42, more details on the transition).</description>
    </item>
    
    <item>
      <title>Upcoming Changes in R 4.2 on Windows</title>
      <link>https://blog.r-project.org/2021/12/07/upcoming-changes-in-r-4.2-on-windows/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/12/07/upcoming-changes-in-r-4.2-on-windows/</guid>
      <description>R 4.2 for Windows will support UTF-8 as native encoding, which will be a major improvement in encoding support, allowing Windows R users to work with international text and data.
This new feature will require at least Windows 10 (version 1903) on desktop systems, Windows Server 2022 on long-term support server systems or Windows Server 1903 from the semi-annual channel. Older Windows systems will be able to run R, but with the same limitations in the encoding support as in R 4.</description>
    </item>
    
    <item>
      <title>Improved Multi-byte Support in RTerm</title>
      <link>https://blog.r-project.org/2021/04/17/improved-multi-byte-support-in-rterm/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/04/17/improved-multi-byte-support-in-rterm/</guid>
      <description>Support for multi-byte characters and hence non-European languages in RTerm, the console-based front-end to R on Windows, has been improved. It is now possible to edit text including multi-byte and multi-width characters supported by the current locale, so that e.g. Japanese R users can edit a Japanese text. To appear in R 4.1.
This is a by-product of fixing RTerm to support all Unicode characters when running in UTF-8, which is already possible in experimental UCRT builds of R-devel.</description>
    </item>
    
    <item>
      <title>Windows/UTF-8 Toolchain and CRAN Package Checks</title>
      <link>https://blog.r-project.org/2021/03/12/windows/utf-8-toolchain-and-cran-package-checks/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/03/12/windows/utf-8-toolchain-and-cran-package-checks/</guid>
      <description>A new, experimental, build of R for Windows is available, its main aim being to support the UTF-8 encoding and especially non-European languages. Check results for CRAN packages are now available on their CRAN results pages. Please help by reviewing these for your package(s) and if a Windows user by trying the new build, particularly if you use a language written in a non-Latin script.
The new build can be downloaded from [2] and instructions are at [1].</description>
    </item>
    
    <item>
      <title>Windows/UTF-8 Build of R and CRAN Packages</title>
      <link>https://blog.r-project.org/2020/07/30/windows/utf-8-build-of-r-and-cran-packages/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2020/07/30/windows/utf-8-build-of-r-and-cran-packages/</guid>
      <description>R-devel-win.exe is an experimental installer of R, set up to download experimental binary builds of CRAN packages. It sets UTF-8 as the current default encoding on Windows (Windows 10 November 2019 release or newer). 92% of CRAN packages are supported. Intended as a demonstration of this option to support Unicode characters in R on Windows, not for production use.
To play with this version of R, start cmd.exe, run chcp 65001 (to set UTF-8 code page), go to Properties/Font/Font and select NSimFun (a font with glyphs needed for this example), go to C:\Program Files\R\R-devel\bin (default installation directory of the demo), run R.</description>
    </item>
    
    <item>
      <title>UTF-8 Support on Windows</title>
      <link>https://blog.r-project.org/2020/05/02/utf-8-support-on-windows/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2020/05/02/utf-8-support-on-windows/</guid>
      <description>R internally allows strings to be represented in the current native encoding, in UTF-8 and in Latin 1. When interacting with the operating system or external libraries, all these representations have to be converted to native encoding. On Linux and macOS today this is not a problem, because the native encoding is UTF-8, so all Unicode characters are supported. On Windows, the native encoding cannot be UTF-8 nor any other that could represent all Unicode characters.</description>
    </item>
    
  </channel>
</rss>