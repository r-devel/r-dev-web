<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on The R Blog</title>
    <link>https://blog.r-project.org/tags/c/</link>
    <description>Recent content in C on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Sep 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.r-project.org/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GFortran Issues with LAPACK II</title>
      <link>https://blog.r-project.org/2019/09/25/gfortran-issues-with-lapack-ii/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/09/25/gfortran-issues-with-lapack-ii/</guid>
      <description>This is an update on my previous post from May.&#xA;A number of things changed since: GFortran started adopting a fix that by default prevents optimizations which break code calling BLAS/LAPACK functions from C without hidden length arguments. R has been updated to internally add these hidden length arguments (and also in other cases where LTO type mismatch was detected). R has exported macros for use in packages so that they can follow suit when calling BLAS/LAPACK and CRAN has been working with maintainers of the affected packages.</description>
    </item>
    <item>
      <title>GFortran Issues with LAPACK</title>
      <link>https://blog.r-project.org/2019/05/15/gfortran-issues-with-lapack/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/05/15/gfortran-issues-with-lapack/</guid>
      <description>Recent version of the GNU Fortran compiler (7, 8, 9) include optimizations that break interoperability between C and Fortran code with BLAS/LAPACK. The compiled code of BLAS/LAPACK corrupts stack, often resulting in crashes. This impacts R, R packages directly calling into BLAS/LAPACK, and all other applications of BLAS/LAPACK. The work-around is to compile BLAS/LAPACK with -fno-optimize-sibling-calls. This option is now used in R-Devel and R-Patched, so that the reference BLAS and LAPACK included in R are compiled with that option.</description>
    </item>
    <item>
      <title>Common PROTECT Errors</title>
      <link>https://blog.r-project.org/2019/04/18/common-protect-errors/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/04/18/common-protect-errors/</guid>
      <description>This post presents the most common PROTECT bugs present in packages, based on manual inspection of ~100 remaining CRAN packages with reports from rchk.&#xA;Background Any C/C++ code interacting with R, both inside R itself and in packages, needs to inform the garbage collector about which objects on the R heap are reachable from local variables. Pointers to such objects are kept on the pointer protection stack or the precious list or multi-set, but the most common is the pointer protection stack with PROTECT/UNPROTECT macros.</description>
    </item>
  </channel>
</rss>
