<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on The R Blog</title>
    <link>https://blog.r-project.org/tags/testing/</link>
    <description>Recent content in testing on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Apr 2025 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.r-project.org/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sensitivity to C math library and mingw-w64 v12</title>
      <link>https://blog.r-project.org/2025/04/24/sensitivity-to-c-math-library-and-mingw-w64-v12/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2025/04/24/sensitivity-to-c-math-library-and-mingw-w64-v12/</guid>
      <description>C math library functions, such as exp or sin, are heavily used by R and packages. The C standard doesn’t require these functions to be “precise”. Instead, there is room for performance optimizations causing a reasonable amount of inaccuracy. The results differ between platforms and may change even on a single platform. This happened with mingw-w64 v12, the SDK/runtime used by GCC and LLVM on Windows, which reduced accuracy of many math functions (for performance and maintenance reasons).</description>
    </item>
    
    <item>
      <title>Alternative toolchains on Windows</title>
      <link>https://blog.r-project.org/2025/01/28/alternative-toolchains-on-windows/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2025/01/28/alternative-toolchains-on-windows/</guid>
      <description>R and R packages on Windows, if they include native code, are built using compiler toolchain and libraries from Rtools. There is always a specific version of Rtools for a given version of R. Rtools44 is used for R 4.4.x, and hence R 4.4.x and packages for that version of R are always built with GCC 13.3 for x86_64 systems and with LLVM 17 for aarch64 systems. This is the case at least since Rtools42 (R 4.</description>
    </item>
    
    <item>
      <title>R on 64-bit ARM Windows</title>
      <link>https://blog.r-project.org/2024/04/23/r-on-64-bit-arm-windows/</link>
      <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2024/04/23/r-on-64-bit-arm-windows/</guid>
      <description>R 4.4.0, to be released tomorrow, comes with experimental native support for 64-bit ARM Windows machines (aarch64, arm64). Rtools44 with native support for the platform has been released at the beginning of March.
The effort to add Windows/aarch64 support to R has been announced in August, 2023.
Installation R for Windows/aarch64 is distributed separately from the primary distribution for x86_64 (64-bit Intel machines). There is a special installer of R for Windows/aarch64.</description>
    </item>
    
    <item>
      <title>Will R Work on 64-bit ARM Windows?</title>
      <link>https://blog.r-project.org/2023/08/23/will-r-work-on-64-bit-arm-windows/</link>
      <pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2023/08/23/will-r-work-on-64-bit-arm-windows/</guid>
      <description>At WWDC 2023 earlier this year, Apple announced it completed transition from Intel to 64-bit ARM processors (Apple Silicon): no new machines with Intel processors will be offered. This was three years after the transition has been announced at WWDC 2020. The work on R support for the platform started the same year and was part of the next R release, R 4.1. See this blog post for details on initial experiments with R on the platform.</description>
    </item>
    
    <item>
      <title>R Can Use Your Help: Testing R Before Release</title>
      <link>https://blog.r-project.org/2021/04/28/r-can-use-your-help-testing-r-before-release/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/04/28/r-can-use-your-help-testing-r-before-release/</guid>
      <description>If you use R you may have wondered if there are ways you can contribute to making R better. This is another post on how you might help (Reviewing Bug Reports was the first).
This post is about helping with testing of pre-release versions of R.
Maintaining and improving R unavoidably comes with introducing regressions, that is breaking things which worked before. This also happens when external software changes its behavior (OS, compilers, libraries).</description>
    </item>
    
    <item>
      <title>Will R Work on Apple Silicon?</title>
      <link>https://blog.r-project.org/2020/11/02/will-r-work-on-apple-silicon/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2020/11/02/will-r-work-on-apple-silicon/</guid>
      <description>At WWDC 2020 earlier this year, Apple announced a transition from Intel to ARM-based processors in their laptops. This blog is about the prospects of when R will work on that platform, based on experimentation on a developer machine running A12Z, one of the “Apple silicon” processors.
The new platform will include Rosetta 2, a dynamic translation framework which runs binaries built for 64-bit Intel Macs using just-in-time, dynamic translation of binary code.</description>
    </item>
    
  </channel>
</rss>