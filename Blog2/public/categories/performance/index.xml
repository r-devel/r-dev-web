<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on The R Blog</title>
    <link>https://blog.r-project.org/categories/performance/</link>
    <description>Recent content in Performance on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Jul 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.r-project.org/categories/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Speedups in operations with regular expressions</title>
      <link>https://blog.r-project.org/2022/07/12/speedups-in-operations-with-regular-expressions/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/07/12/speedups-in-operations-with-regular-expressions/</guid>
      <description>Regular expression operations in R, such as grep or gsub, sometimes have significant performance overheads due to encoding conversions.
Some R code tries to mitigate this by ignoring input encodings and pretending it is fine to work on individual bytes (via useBytes=TRUE). This removes such overheads, but produces correct results only in special cases, e.g. for simple regular expressions in UTF-8. With the current implementation of gsub and strsplit in R, this can also silently introduce invalid strings, which may cause invalid results or errors in further processing.</description>
    </item>
    
    <item>
      <title>Parser Speedups</title>
      <link>https://blog.r-project.org/2019/01/07/parser-speedups/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2019/01/07/parser-speedups/</guid>
      <description>It wasn’t my primary goal to improve parser performance nor to measure it. I’ve been working on optimizations to reduce the runtime overhead of including source reference into packages (this is not done by default due to space and execution time overheads). I’ve added an option to exclude parse data from source references and enabled it by default for packages, as parse data account for most of the runtime overhead of source references while they are rarely needed.</description>
    </item>
    
  </channel>
</rss>