<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on The R Blog</title>
    <link>https://blog.r-project.org/categories/windows/</link>
    <description>Recent content in Windows on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 May 2025 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.r-project.org/categories/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sensitivity to C math library and mingw-w64 v12 - part 2</title>
      <link>https://blog.r-project.org/2025/05/21/sensitivity-to-c-math-library-and-mingw-w64-v12-part-2/</link>
      <pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2025/05/21/sensitivity-to-c-math-library-and-mingw-w64-v12-part-2/</guid>
      <description>C math library functions, such as exp or sin, are not guaranteed to be “precise”. The results might be slightly different on different platforms. A recent change in mingw-w64 v12, which is a core dependency of compilers we use on Windows (both GCC and LLVM), resulted in failures in about 20 CRAN packages. Rtools45 uses mingw-w64 v11, the same version as Rtools44, to allow time for resolving the issues. The change in mingw-w64 v12 switched about 90 math functions from internal implementations to UCRT, the Windows C runtime provided by Microsoft and shipped with the OS.</description>
    </item>
    
    <item>
      <title>Sensitivity to C math library and mingw-w64 v12</title>
      <link>https://blog.r-project.org/2025/04/24/sensitivity-to-c-math-library-and-mingw-w64-v12/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2025/04/24/sensitivity-to-c-math-library-and-mingw-w64-v12/</guid>
      <description>C math library functions, such as exp or sin, are heavily used by R and packages. The C standard doesn’t require these functions to be “precise”. Instead, there is room for performance optimizations causing a reasonable amount of inaccuracy. The results differ between platforms and may change even on a single platform. This happened with mingw-w64 v12, the SDK/runtime used by GCC and LLVM on Windows, which reduced accuracy of many math functions (for performance and maintenance reasons).</description>
    </item>
    
    <item>
      <title>Alternative toolchains on Windows</title>
      <link>https://blog.r-project.org/2025/01/28/alternative-toolchains-on-windows/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2025/01/28/alternative-toolchains-on-windows/</guid>
      <description>R and R packages on Windows, if they include native code, are built using compiler toolchain and libraries from Rtools. There is always a specific version of Rtools for a given version of R. Rtools44 is used for R 4.4.x, and hence R 4.4.x and packages for that version of R are always built with GCC 13.3 for x86_64 systems and with LLVM 17 for aarch64 systems. This is the case at least since Rtools42 (R 4.</description>
    </item>
    
    <item>
      <title>Long input lines</title>
      <link>https://blog.r-project.org/2024/08/30/long-input-lines/</link>
      <pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2024/08/30/long-input-lines/</guid>
      <description>When using R interactively via a console, one edits a line of input, confirms it by pressing ENTER, then R parses the line, evaluates it, prints the output and lets the user enter another line. This is also known as REPL (Read-Eval-Print-Loop).
The maximum length of the input line is sometimes limited. It is essentially impossible that one would run into a limit when typing the commands, but there was a report from a user who pasted generated content to the console and have ran into a limit of 4096 bytes.</description>
    </item>
    
    <item>
      <title>R on 64-bit ARM Windows</title>
      <link>https://blog.r-project.org/2024/04/23/r-on-64-bit-arm-windows/</link>
      <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2024/04/23/r-on-64-bit-arm-windows/</guid>
      <description>R 4.4.0, to be released tomorrow, comes with experimental native support for 64-bit ARM Windows machines (aarch64, arm64). Rtools44 with native support for the platform has been released at the beginning of March.
The effort to add Windows/aarch64 support to R has been announced in August, 2023.
Installation R for Windows/aarch64 is distributed separately from the primary distribution for x86_64 (64-bit Intel machines). There is a special installer of R for Windows/aarch64.</description>
    </item>
    
    <item>
      <title>Will R Work on 64-bit ARM Windows?</title>
      <link>https://blog.r-project.org/2023/08/23/will-r-work-on-64-bit-arm-windows/</link>
      <pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2023/08/23/will-r-work-on-64-bit-arm-windows/</guid>
      <description>At WWDC 2023 earlier this year, Apple announced it completed transition from Intel to 64-bit ARM processors (Apple Silicon): no new machines with Intel processors will be offered. This was three years after the transition has been announced at WWDC 2020. The work on R support for the platform started the same year and was part of the next R release, R 4.1. See this blog post for details on initial experiments with R on the platform.</description>
    </item>
    
    <item>
      <title>(Not) interrupting background tasks with Ctrl&#43;C</title>
      <link>https://blog.r-project.org/2023/05/23/not-interrupting-background-tasks-with-ctrl-c/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2023/05/23/not-interrupting-background-tasks-with-ctrl-c/</guid>
      <description>When using R interactively from the command line, one can interrupt the current computionation using Ctrl+C key combination and enter a new command. This works both on Unix terminal and on Windows console in Rterm. Such computation may be implemented in R or C and may be executing an external command while waiting for the result e.g. via system(,wait=TRUE).
However, in R 4.3 and earlier, Ctrl+C interrupts also background tasks, e.</description>
    </item>
    
    <item>
      <title>Path length limit on Windows</title>
      <link>https://blog.r-project.org/2023/03/07/path-length-limit-on-windows/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2023/03/07/path-length-limit-on-windows/</guid>
      <description>When testing development versions of Rtools for Windows, I’ve ran into strange failures of several CRAN packages where R could not find, read from or write to some files. The files should have been in temporary directories which get automatically deleted, so it took some effort to find out that actually they existed and were accessible. That didn’t make any sense at first, but eventually I got to this output:</description>
    </item>
    
    <item>
      <title>Issues While Switching R to UTF-8 and UCRT on Windows</title>
      <link>https://blog.r-project.org/2022/11/07/issues-while-switching-r-to-utf-8-and-ucrt-on-windows/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/11/07/issues-while-switching-r-to-utf-8-and-ucrt-on-windows/</guid>
      <description>From version 4.2.0 released in April 2022, R on Windows uses UTF-8 as the native encoding via UCRT as the new C Windows runtime. The transition for R and its packages has been a non-trivial effort which took several years. This post gives a summary some technical obstacles found on the way, focusing on aspects that may be interesting to other projects.
R specifics R is implemented in C and Fortran (and R).</description>
    </item>
    
    <item>
      <title>Sporadic Rterm Crashes with Completion</title>
      <link>https://blog.r-project.org/2022/11/01/sporadic-rterm-crashes-with-completion/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/11/01/sporadic-rterm-crashes-with-completion/</guid>
      <description>This post is a story of a bug in Rterm, the console R front-end on Windows, which has been bugging me for several years, but only two weeks ago it showed up unwarily so that I could trace it down and fix.
The terminal sometimes crashed during completion, so after I pressed the tab key, but it was very rare, there seemed to be no way to reproduce the problem, and it was only happening with the mintty terminal (from Msys2, running bash), never with cmd.</description>
    </item>
    
    <item>
      <title>Upcoming Changes in R 4.2.1 on Windows</title>
      <link>https://blog.r-project.org/2022/06/16/upcoming-changes-in-r-4.2.1-on-windows/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/06/16/upcoming-changes-in-r-4.2.1-on-windows/</guid>
      <description>R 4.2.1 is scheduled to be released next week with a number of Windows-specific fixes. All Windows R users currently using R 4.2.0 should upgrade to R 4.2.1. This text has more details on some of the fixes.
R 4.2.0 on Windows came with a significant improvement. It uses UTF-8 as the native encoding and for that it switched to the Universal C Runtime (UCRT). This in turn required creating a new R toolchain for Windows and re-building R, R packages and all (statically linked) dependencies with it (Rtools42, more details on the transition).</description>
    </item>
    
    <item>
      <title>Upcoming Changes in R 4.2 on Windows</title>
      <link>https://blog.r-project.org/2021/12/07/upcoming-changes-in-r-4.2-on-windows/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/12/07/upcoming-changes-in-r-4.2-on-windows/</guid>
      <description>R 4.2 for Windows will support UTF-8 as native encoding, which will be a major improvement in encoding support, allowing Windows R users to work with international text and data.
This new feature will require at least Windows 10 (version 1903) on desktop systems, Windows Server 2022 on long-term support server systems or Windows Server 1903 from the semi-annual channel. Older Windows systems will be able to run R, but with the same limitations in the encoding support as in R 4.</description>
    </item>
    
    <item>
      <title>Improved Multi-byte Support in RTerm</title>
      <link>https://blog.r-project.org/2021/04/17/improved-multi-byte-support-in-rterm/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/04/17/improved-multi-byte-support-in-rterm/</guid>
      <description>Support for multi-byte characters and hence non-European languages in RTerm, the console-based front-end to R on Windows, has been improved. It is now possible to edit text including multi-byte and multi-width characters supported by the current locale, so that e.g. Japanese R users can edit a Japanese text. To appear in R 4.1.
This is a by-product of fixing RTerm to support all Unicode characters when running in UTF-8, which is already possible in experimental UCRT builds of R-devel.</description>
    </item>
    
    <item>
      <title>Virtual Windows machine for checking R packages</title>
      <link>https://blog.r-project.org/2021/03/18/virtual-windows-machine-for-checking-r-packages/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/03/18/virtual-windows-machine-for-checking-r-packages/</guid>
      <description>Microsoft provides a free Windows 10 virtual machine for testing. Package maintainers working on Linux and MacOS can use it to test their packages on Windows. See instructions on how to set up the machine automatically for checking R packages.
The set up provides SSH access with bash, so that users can perform most of the tasks from their preferred terminal emulator. Command line tools needed to build R and many R packages from source are pre-installed.</description>
    </item>
    
    <item>
      <title>Windows/UTF-8 Toolchain and CRAN Package Checks</title>
      <link>https://blog.r-project.org/2021/03/12/windows/utf-8-toolchain-and-cran-package-checks/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/03/12/windows/utf-8-toolchain-and-cran-package-checks/</guid>
      <description>A new, experimental, build of R for Windows is available, its main aim being to support the UTF-8 encoding and especially non-European languages. Check results for CRAN packages are now available on their CRAN results pages. Please help by reviewing these for your package(s) and if a Windows user by trying the new build, particularly if you use a language written in a non-Latin script.
The new build can be downloaded from [2] and instructions are at [1].</description>
    </item>
    
    <item>
      <title>Windows/UTF-8 Build of R and CRAN Packages</title>
      <link>https://blog.r-project.org/2020/07/30/windows/utf-8-build-of-r-and-cran-packages/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2020/07/30/windows/utf-8-build-of-r-and-cran-packages/</guid>
      <description>R-devel-win.exe is an experimental installer of R, set up to download experimental binary builds of CRAN packages. It sets UTF-8 as the current default encoding on Windows (Windows 10 November 2019 release or newer). 92% of CRAN packages are supported. Intended as a demonstration of this option to support Unicode characters in R on Windows, not for production use.
To play with this version of R, start cmd.exe, run chcp 65001 (to set UTF-8 code page), go to Properties/Font/Font and select NSimFun (a font with glyphs needed for this example), go to C:\Program Files\R\R-devel\bin (default installation directory of the demo), run R.</description>
    </item>
    
    <item>
      <title>UTF-8 Support on Windows</title>
      <link>https://blog.r-project.org/2020/05/02/utf-8-support-on-windows/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2020/05/02/utf-8-support-on-windows/</guid>
      <description>R internally allows strings to be represented in the current native encoding, in UTF-8 and in Latin 1. When interacting with the operating system or external libraries, all these representations have to be converted to native encoding. On Linux and macOS today this is not a problem, because the native encoding is UTF-8, so all Unicode characters are supported. On Windows, the native encoding cannot be UTF-8 nor any other that could represent all Unicode characters.</description>
    </item>
    
  </channel>
</rss>