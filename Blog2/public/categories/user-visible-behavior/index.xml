<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>User-visible Behavior on The R Blog</title>
    <link>https://blog.r-project.org/categories/user-visible-behavior/</link>
    <description>Recent content in User-visible Behavior on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.r-project.org/categories/user-visible-behavior/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R on 64-bit ARM Windows</title>
      <link>https://blog.r-project.org/2024/04/23/r-on-64-bit-arm-windows/</link>
      <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2024/04/23/r-on-64-bit-arm-windows/</guid>
      <description>R 4.4.0, to be released tomorrow, comes with experimental native support for 64-bit ARM Windows machines (aarch64, arm64). Rtools44 with native support for the platform has been released at the beginning of March.&#xA;The effort to add Windows/aarch64 support to R has been announced in August, 2023.&#xA;Installation R for Windows/aarch64 is distributed separately from the primary distribution for x86_64 (64-bit Intel machines). There is a special installer of R for Windows/aarch64.</description>
    </item>
    <item>
      <title>Will R Work on 64-bit ARM Windows?</title>
      <link>https://blog.r-project.org/2023/08/23/will-r-work-on-64-bit-arm-windows/</link>
      <pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2023/08/23/will-r-work-on-64-bit-arm-windows/</guid>
      <description>At WWDC 2023 earlier this year, Apple announced it completed transition from Intel to 64-bit ARM processors (Apple Silicon): no new machines with Intel processors will be offered. This was three years after the transition has been announced at WWDC 2020. The work on R support for the platform started the same year and was part of the next R release, R 4.1. See this blog post for details on initial experiments with R on the platform.</description>
    </item>
    <item>
      <title>(Not) interrupting background tasks with Ctrl&#43;C</title>
      <link>https://blog.r-project.org/2023/05/23/not-interrupting-background-tasks-with-ctrl-c/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2023/05/23/not-interrupting-background-tasks-with-ctrl-c/</guid>
      <description>When using R interactively from the command line, one can interrupt the current computionation using Ctrl+C key combination and enter a new command. This works both on Unix terminal and on Windows console in Rterm. Such computation may be implemented in R or C and may be executing an external command while waiting for the result e.g. via system(,wait=TRUE).&#xA;However, in R 4.3 and earlier, Ctrl+C interrupts also background tasks, e.</description>
    </item>
    <item>
      <title>Path length limit on Windows</title>
      <link>https://blog.r-project.org/2023/03/07/path-length-limit-on-windows/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2023/03/07/path-length-limit-on-windows/</guid>
      <description>When testing development versions of Rtools for Windows, I’ve ran into strange failures of several CRAN packages where R could not find, read from or write to some files. The files should have been in temporary directories which get automatically deleted, so it took some effort to find out that actually they existed and were accessible. That didn’t make any sense at first, but eventually I got to this output:</description>
    </item>
    <item>
      <title>Improvements in handling bytes encoding</title>
      <link>https://blog.r-project.org/2022/10/10/improvements-in-handling-bytes-encoding/</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2022/10/10/improvements-in-handling-bytes-encoding/</guid>
      <description>In R, a string can be declared to be in bytes encoding. According to ?Encoding, it must be a non-ASCII string which should be manipulated as bytes and never converted to a character encoding (e.g. Latin 1, UTF-8). This text summarizes recent improvements in how R handles bytes encoded strings and provides some of thoughts about what they should and shouldn’t be used for today.&#xA;Character vector, string and encoding Particularly for readers not familiar with R, it may be useful to highlight how strings are supported in the language.</description>
    </item>
    <item>
      <title>Speedups in operations with regular expressions</title>
      <link>https://blog.r-project.org/2022/07/12/speedups-in-operations-with-regular-expressions/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2022/07/12/speedups-in-operations-with-regular-expressions/</guid>
      <description>Regular expression operations in R, such as grep or gsub, sometimes have significant performance overheads due to encoding conversions.&#xA;Some R code tries to mitigate this by ignoring input encodings and pretending it is fine to work on individual bytes (via useBytes=TRUE). This removes such overheads, but produces correct results only in special cases, e.g. for simple regular expressions in UTF-8. With the current implementation of gsub and strsplit in R, this can also silently introduce invalid strings, which may cause invalid results or errors in further processing.</description>
    </item>
    <item>
      <title>Why to avoid \x in regular expressions</title>
      <link>https://blog.r-project.org/2022/06/27/why-to-avoid-%5Cx-in-regular-expressions/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2022/06/27/why-to-avoid-%5Cx-in-regular-expressions/</guid>
      <description>Using \x in string literals is almost always a bad idea, but using it in regular expressions is particularly dangerous.&#xA;Consider this “don’t do” example in R 4.2.1 or earlier:&#xA;text &amp;lt;- &amp;quot;Hello\u00a0R&amp;quot; gsub(&amp;quot;\xa0&amp;quot;, &amp;quot;&amp;quot;, text) a0 is the code point of the Unicode “NO-BREAK SPACE” and the example runs in UTF-8 locale. The intention is to remove the space; a slightly more complicated variant has been discussed on the R-devel mailing list about half a year ago.</description>
    </item>
    <item>
      <title>Upcoming Changes in R 4.2.1 on Windows</title>
      <link>https://blog.r-project.org/2022/06/16/upcoming-changes-in-r-4.2.1-on-windows/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2022/06/16/upcoming-changes-in-r-4.2.1-on-windows/</guid>
      <description>R 4.2.1 is scheduled to be released next week with a number of Windows-specific fixes. All Windows R users currently using R 4.2.0 should upgrade to R 4.2.1. This text has more details on some of the fixes.&#xA;R 4.2.0 on Windows came with a significant improvement. It uses UTF-8 as the native encoding and for that it switched to the Universal C Runtime (UCRT). This in turn required creating a new R toolchain for Windows and re-building R, R packages and all (statically linked) dependencies with it (Rtools42, more details on the transition).</description>
    </item>
    <item>
      <title>Enhancements to HTML Documentation</title>
      <link>https://blog.r-project.org/2022/04/08/enhancements-to-html-documentation/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2022/04/08/enhancements-to-html-documentation/</guid>
      <description>The upcoming release of R (version 4.2.0) features several enhancements to the HTML help system.&#xA;The most noticeable features are that LaTeX-like mathematical equations in help pages are now typeset using either KaTeX or MathJax, and usage and example code are highlighted using Prism. Additionally, the output of examples and demos can now be shown within the browser if the knitr package is installed. This is especially useful if the examples produce graphical output.</description>
    </item>
    <item>
      <title>Upcoming Changes in R 4.2 on Windows</title>
      <link>https://blog.r-project.org/2021/12/07/upcoming-changes-in-r-4.2-on-windows/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2021/12/07/upcoming-changes-in-r-4.2-on-windows/</guid>
      <description>R 4.2 for Windows will support UTF-8 as native encoding, which will be a major improvement in encoding support, allowing Windows R users to work with international text and data.&#xA;This new feature will require at least Windows 10 (version 1903) on desktop systems, Windows Server 2022 on long-term support server systems or Windows Server 1903 from the semi-annual channel. Older Windows systems will be able to run R, but with the same limitations in the encoding support as in R 4.</description>
    </item>
    <item>
      <title>Improved Multi-byte Support in RTerm</title>
      <link>https://blog.r-project.org/2021/04/17/improved-multi-byte-support-in-rterm/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2021/04/17/improved-multi-byte-support-in-rterm/</guid>
      <description>Support for multi-byte characters and hence non-European languages in RTerm, the console-based front-end to R on Windows, has been improved. It is now possible to edit text including multi-byte and multi-width characters supported by the current locale, so that e.g. Japanese R users can edit a Japanese text. To appear in R 4.1.&#xA;This is a by-product of fixing RTerm to support all Unicode characters when running in UTF-8, which is already possible in experimental UCRT builds of R-devel.</description>
    </item>
    <item>
      <title>Windows/UTF-8 Toolchain and CRAN Package Checks</title>
      <link>https://blog.r-project.org/2021/03/12/windows/utf-8-toolchain-and-cran-package-checks/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2021/03/12/windows/utf-8-toolchain-and-cran-package-checks/</guid>
      <description>A new, experimental, build of R for Windows is available, its main aim being to support the UTF-8 encoding and especially non-European languages. Check results for CRAN packages are now available on their CRAN results pages. Please help by reviewing these for your package(s) and if a Windows user by trying the new build, particularly if you use a language written in a non-Latin script.&#xA;The new build can be downloaded from [2] and instructions are at [1].</description>
    </item>
    <item>
      <title>Will R Work on Apple Silicon?</title>
      <link>https://blog.r-project.org/2020/11/02/will-r-work-on-apple-silicon/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/11/02/will-r-work-on-apple-silicon/</guid>
      <description>At WWDC 2020 earlier this year, Apple announced a transition from Intel to ARM-based processors in their laptops. This blog is about the prospects of when R will work on that platform, based on experimentation on a developer machine running A12Z, one of the “Apple silicon” processors.&#xA;The new platform will include Rosetta 2, a dynamic translation framework which runs binaries built for 64-bit Intel Macs using just-in-time, dynamic translation of binary code.</description>
    </item>
    <item>
      <title>Windows/UTF-8 Build of R and CRAN Packages</title>
      <link>https://blog.r-project.org/2020/07/30/windows/utf-8-build-of-r-and-cran-packages/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/07/30/windows/utf-8-build-of-r-and-cran-packages/</guid>
      <description>R-devel-win.exe is an experimental installer of R, set up to download experimental binary builds of CRAN packages. It sets UTF-8 as the current default encoding on Windows (Windows 10 November 2019 release or newer). 92% of CRAN packages are supported. Intended as a demonstration of this option to support Unicode characters in R on Windows, not for production use.&#xA;To play with this version of R, start cmd.exe, run chcp 65001 (to set UTF-8 code page), go to Properties/Font/Font and select NSimFun (a font with glyphs needed for this example), go to C:\Program Files\R\R-devel\bin (default installation directory of the demo), run R.</description>
    </item>
    <item>
      <title>UTF-8 Support on Windows</title>
      <link>https://blog.r-project.org/2020/05/02/utf-8-support-on-windows/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/05/02/utf-8-support-on-windows/</guid>
      <description>R internally allows strings to be represented in the current native encoding, in UTF-8 and in Latin 1. When interacting with the operating system or external libraries, all these representations have to be converted to native encoding. On Linux and macOS today this is not a problem, because the native encoding is UTF-8, so all Unicode characters are supported. On Windows, the native encoding cannot be UTF-8 nor any other that could represent all Unicode characters.</description>
    </item>
    <item>
      <title>Socket Connections Update</title>
      <link>https://blog.r-project.org/2020/03/17/socket-connections-update/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/03/17/socket-connections-update/</guid>
      <description>Starting up a PSOCK cluster is not fast. In R 3.6 on just a few years old laptop with 8 logical cores, running Windows, it takes about 1.7s to start a cluster with 8 nodes:&#xA;library(parallel); system.time(cl &amp;lt;- makePSOCKcluster(8)) A good design is to start a cluster only once during an R session and then pass it to computations that can take advantage of it. This is needed so that the end user always has full control over how many cores are used in total.</description>
    </item>
    <item>
      <title>stringsAsFactors</title>
      <link>https://blog.r-project.org/2020/02/16/stringsasfactors/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/02/16/stringsasfactors/</guid>
      <description>Since its inception, R has, at least by default, converted (character) strings to factors when creating data frames directly with data.frame() or as the result of using read.table() variants to read in tabular data. Quite likely, this will soon change.&#xA;In R 0.62 (released 1998), the original internal data frame code was replaced by the interpreted Statlib code contributed by John Chambers, to the effect that data.frame() would always convert strings to factors (unless protected by I()), whereas read.</description>
    </item>
    <item>
      <title>A New palette() for R</title>
      <link>https://blog.r-project.org/2019/11/21/a-new-palette-for-r/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/11/21/a-new-palette-for-r/</guid>
      <description>UPDATE 2019-12-03: Following feedback, the new default palette has been tweaked so that the new “magenta” is a little redder and darker and the new “yellow” is a little lighter and brighter. The former is to improve the discriminability between “blue” and “magenta” for deuteranopes and the latter is to improve the discriminability between “green” and “yellow” for protanopes. We would like to thank those who provided feedback and suggestions on the new palette, in particular Antonio Camargo, Brenton Wiernik, Ken Knoblauch, and Jakub Nowosad.</description>
    </item>
    <item>
      <title>When you think `class(.) == *`, think again!</title>
      <link>https://blog.r-project.org/2019/11/09/when-you-think-class.-think-again/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/11/09/when-you-think-class.-think-again/</guid>
      <description>Historical relict: R matrix is not an array In a recent discussion on the R-devel mailing list, in a thread started on July 8, head.matrix can return 1000s of columns – limit to n or add new argument? Michael Chirico and then Gabe Becker where proposing to generalize the head() and tail() utility functions, and Gabe noted that current (pre R-4.x.y) head() would not treat array specially. I’ve replied, noting that R currently typically needs both a matrix and an array method:</description>
    </item>
    <item>
      <title>S3 Method Lookup</title>
      <link>https://blog.r-project.org/2019/08/19/s3-method-lookup/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/08/19/s3-method-lookup/</guid>
      <description>At the core of the S3 object system as introduced in the White Book lies the idea that (S3) methods are ordinary functions that follow the GEN.CLS naming convention (with GEN.default as a final fallback). In the initial R implementation of this object system, these methods were searched for in the environment (and all enclosing environments) from which the generic was called.&#xA;With the advent of namespaces (see Tierney (2003), “Name space management for R”, R News, 3(1):2-6) a mechanism for registering S3 methods via S3method() directives in the NAMESPACE file of a package was added.</description>
    </item>
    <item>
      <title>Common PROTECT Errors</title>
      <link>https://blog.r-project.org/2019/04/18/common-protect-errors/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/04/18/common-protect-errors/</guid>
      <description>This post presents the most common PROTECT bugs present in packages, based on manual inspection of ~100 remaining CRAN packages with reports from rchk.&#xA;Background Any C/C++ code interacting with R, both inside R itself and in packages, needs to inform the garbage collector about which objects on the R heap are reachable from local variables. Pointers to such objects are kept on the pointer protection stack or the precious list or multi-set, but the most common is the pointer protection stack with PROTECT/UNPROTECT macros.</description>
    </item>
    <item>
      <title>HCL-Based Color Palettes in grDevices</title>
      <link>https://blog.r-project.org/2019/04/01/hcl-based-color-palettes-in-grdevices/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/04/01/hcl-based-color-palettes-in-grdevices/</guid>
      <description>Starting with R 3.6.0 a new hcl.colors() function is available in grDevices, providing a wide range of HCL-based color palettes with much better perceptual properties than existing RGB/HSV-based palettes like rainbow(). An accompanying new hcl.pals() function lists available palette names for hcl.colors(). It is a basic and lean implementation of the pre-specified palettes in the colorspace package, closely approximating palettes from many other packages like ColorBrewer, CARTO, viridis, scico, etc.</description>
    </item>
    <item>
      <title>Managing Search Path Conflicts</title>
      <link>https://blog.r-project.org/2019/03/19/managing-search-path-conflicts/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/03/19/managing-search-path-conflicts/</guid>
      <description>Starting with R 3.6.0 the library() and require() functions allow more control over handling search path conflicts when packages are attached. The policy is controlled by the new conflicts.policy option. This post provides some background and details on this new feature.&#xA;Background When loading a package and attaching it to the search path, conflicts can occur between objects defined in the new package and ones already provided by other packages on the search path.</description>
    </item>
    <item>
      <title>Unprotecting by Value</title>
      <link>https://blog.r-project.org/2018/12/10/unprotecting-by-value/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2018/12/10/unprotecting-by-value/</guid>
      <description>In short, UNPROTECT_PTR is dangerous and should not be used. This text describes why and describes how to replace it, including mset-based functions that have been introduced as a substitute for situations when unprotection by value is really needed. This could be of interest to anyone who writes native code to interface with the R heap, and definitely to all who use UNPROTECT_PTR in their code.&#xA;Background R provides several functions to protect pointers to R objects held by local C variables (typed SEXP) from the garbage collector.</description>
    </item>
    <item>
      <title>Conditions of Length Greater Than One</title>
      <link>https://blog.r-project.org/2018/10/12/conditions-of-length-greater-than-one/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2018/10/12/conditions-of-length-greater-than-one/</guid>
      <description>Historically R language allows conditions in if and while statements to be vectors (of length greater than one). The first element is used but the remaining elements are ignored, since November 2002 also with a warning (added by Brian Ripley). Following an intuition that such situations would typically arise from a programming error, an option has been added in March 2017 to optionally allow signalling a runtime error, instead (the patch was by Martin Maechler, pinged by a suggestion of Henrik Bengtsson on the R-devel mailing list).</description>
    </item>
    <item>
      <title>Maximum Number of DLLs</title>
      <link>https://blog.r-project.org/2018/03/23/maximum-number-of-dlls/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2018/03/23/maximum-number-of-dlls/</guid>
      <description>Some packages contain native code, which is linked to R dynamically in the form of dynamically loaded libraries (DLLs). Recently, R users started loading increasing numbers of packages; “workflow documents” are one source of this pattern. This has eventually lead to hitting the DLL limit in R, which materializes as runtime error “maximal number of DLLs reached”.&#xA;Limit on the number of open files The DLL limit in R is good for one important reason.</description>
    </item>
  </channel>
</rss>
