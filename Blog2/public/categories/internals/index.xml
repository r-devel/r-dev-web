<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Internals on The R Blog</title>
    <link>https://blog.r-project.org/categories/internals/</link>
    <description>Recent content in Internals on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.r-project.org/categories/internals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Statement on CVE-2024-27322</title>
      <link>https://blog.r-project.org/2024/05/10/statement-on-cve-2024-27322/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2024/05/10/statement-on-cve-2024-27322/</guid>
      <description>This is a brief statement on behalf or the R Core Team on the serialization bug recently reported by the cybersecurity form HiddenLayer. The bug has been reported as a vulnerability with id CVE-2024-27322.&#xA;R is a full-featured language that includes functions to interface with both the host operating system and the Internet. As with any such language, there are many ways to write code with malicious intent. Users should ensure that they only use R code and data from trusted sources and that the privileges of the account running R are appropriately limited.</description>
    </item>
    <item>
      <title>(Not) interrupting background tasks with Ctrl&#43;C</title>
      <link>https://blog.r-project.org/2023/05/23/not-interrupting-background-tasks-with-ctrl-c/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2023/05/23/not-interrupting-background-tasks-with-ctrl-c/</guid>
      <description>When using R interactively from the command line, one can interrupt the current computionation using Ctrl+C key combination and enter a new command. This works both on Unix terminal and on Windows console in Rterm. Such computation may be implemented in R or C and may be executing an external command while waiting for the result e.g. via system(,wait=TRUE).&#xA;However, in R 4.3 and earlier, Ctrl+C interrupts also background tasks, e.</description>
    </item>
    <item>
      <title>Path length limit on Windows</title>
      <link>https://blog.r-project.org/2023/03/07/path-length-limit-on-windows/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2023/03/07/path-length-limit-on-windows/</guid>
      <description>When testing development versions of Rtools for Windows, I’ve ran into strange failures of several CRAN packages where R could not find, read from or write to some files. The files should have been in temporary directories which get automatically deleted, so it took some effort to find out that actually they existed and were accessible. That didn’t make any sense at first, but eventually I got to this output:</description>
    </item>
    <item>
      <title>Issues While Switching R to UTF-8 and UCRT on Windows</title>
      <link>https://blog.r-project.org/2022/11/07/issues-while-switching-r-to-utf-8-and-ucrt-on-windows/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2022/11/07/issues-while-switching-r-to-utf-8-and-ucrt-on-windows/</guid>
      <description>From version 4.2.0 released in April 2022, R on Windows uses UTF-8 as the native encoding via UCRT as the new C Windows runtime. The transition for R and its packages has been a non-trivial effort which took several years. This post gives a summary some technical obstacles found on the way, focusing on aspects that may be interesting to other projects.&#xA;R specifics R is implemented in C and Fortran (and R).</description>
    </item>
    <item>
      <title>Sporadic Rterm Crashes with Completion</title>
      <link>https://blog.r-project.org/2022/11/01/sporadic-rterm-crashes-with-completion/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2022/11/01/sporadic-rterm-crashes-with-completion/</guid>
      <description>This post is a story of a bug in Rterm, the console R front-end on Windows, which has been bugging me for several years, but only two weeks ago it showed up unwarily so that I could trace it down and fix.&#xA;The terminal sometimes crashed during completion, so after I pressed the tab key, but it was very rare, there seemed to be no way to reproduce the problem, and it was only happening with the mintty terminal (from Msys2, running bash), never with cmd.</description>
    </item>
    <item>
      <title>Vectorised Patterns in R Graphics</title>
      <link>https://blog.r-project.org/2022/06/09/vectorised-patterns-in-r-graphics/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2022/06/09/vectorised-patterns-in-r-graphics/</guid>
      <description>Support for pattern fills was added to the R graphics engine in R version 4.1.0, with an R interface via the ‘grid’ package.&#xA;library(grid) For example, the following code defines a linear gradient that varies horizontally from red to white and a tiling pattern that is based on a repeating red circle.&#xA;gradcol &amp;lt;- c(palette()[2], &amp;quot;white&amp;quot;) grad &amp;lt;- linearGradient(gradcol, y1=.5, y2=.5) patcol &amp;lt;- 2 pat &amp;lt;- pattern(circleGrob(r=unit(2, &amp;quot;mm&amp;quot;), gp=gpar(col=patcol, fill=patcol)), width=unit(5, &amp;quot;mm&amp;quot;), height=unit(5, &amp;quot;mm&amp;quot;), extend=&amp;quot;repeat&amp;quot;) The next code calls grid.</description>
    </item>
    <item>
      <title>Enhancements to HTML Documentation</title>
      <link>https://blog.r-project.org/2022/04/08/enhancements-to-html-documentation/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2022/04/08/enhancements-to-html-documentation/</guid>
      <description>The upcoming release of R (version 4.2.0) features several enhancements to the HTML help system.&#xA;The most noticeable features are that LaTeX-like mathematical equations in help pages are now typeset using either KaTeX or MathJax, and usage and example code are highlighted using Prism. Additionally, the output of examples and demos can now be shown within the browser if the knitr package is installed. This is especially useful if the examples produce graphical output.</description>
    </item>
    <item>
      <title>Updating Graphics Devices for R 4.2.0</title>
      <link>https://blog.r-project.org/2021/12/14/updating-graphics-devices-for-r-4.2.0/</link>
      <pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2021/12/14/updating-graphics-devices-for-r-4.2.0/</guid>
      <description>A number of new graphics features have been added to the R graphics engine in the development version of R (to become version 4.2.0):&#xA;groups, compositing operators, affine transformations, stroking and filling paths, and luminance masks. This has consequences for R packages that provide graphics devices, like the ‘ragg’ package.&#xA;For users of R packages that provide graphics devices, those packages will need to be reinstalled when updating to R 4.</description>
    </item>
    <item>
      <title>Groups and Paths and Masks in R Graphics</title>
      <link>https://blog.r-project.org/2021/12/06/groups-and-paths-and-masks-in-r-graphics/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2021/12/06/groups-and-paths-and-masks-in-r-graphics/</guid>
      <description>UPDATE: (2023-05-18) The behaviour of compositing operators was modified in R version 4.3.0 (affecting the “clear” and “source” operators). The examples in this post have been updated so that they produce the same output (just using a different operator).&#xA;Support for gradient fills, pattern fills, clipping paths and masks was added to the R graphics engine in R version 4.1.0.&#xA;The development version of R (likely to become R version 4.</description>
    </item>
    <item>
      <title>Improved Multi-byte Support in RTerm</title>
      <link>https://blog.r-project.org/2021/04/17/improved-multi-byte-support-in-rterm/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2021/04/17/improved-multi-byte-support-in-rterm/</guid>
      <description>Support for multi-byte characters and hence non-European languages in RTerm, the console-based front-end to R on Windows, has been improved. It is now possible to edit text including multi-byte and multi-width characters supported by the current locale, so that e.g. Japanese R users can edit a Japanese text. To appear in R 4.1.&#xA;This is a by-product of fixing RTerm to support all Unicode characters when running in UTF-8, which is already possible in experimental UCRT builds of R-devel.</description>
    </item>
    <item>
      <title>New Features in the R Graphics Engine</title>
      <link>https://blog.r-project.org/2020/07/15/new-features-in-the-r-graphics-engine/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/07/15/new-features-in-the-r-graphics-engine/</guid>
      <description>Support for gradient fills, pattern fills, clipping paths and masks has been added to the R graphics engine (in the development version of R, which will probably become R version 4.1.0).&#xA;An R-level interface for these new features has been added to the ‘grid’ graphics package.&#xA;library(grid) For example, the following code fills a circle with a linear gradient.&#xA;grid.circle(gp=gpar(col=NA, fill=linearGradient())) The next code fills a rectangle with a radial gradient.</description>
    </item>
    <item>
      <title>Improvements to Clipping in the R Graphics Engine</title>
      <link>https://blog.r-project.org/2020/06/08/improvements-to-clipping-in-the-r-graphics-engine/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/06/08/improvements-to-clipping-in-the-r-graphics-engine/</guid>
      <description>UPDATE (2020-11-18): canClip = NA_LOGICAL has been replaced by deviceClip = TRUE&#xA;The R graphics engine performs some clipping of output regardless of whether the graphics device it is sending output to can perform clipping itself. For example, output that is sent to the postscript() device, which can do its own clipping, is still clipped by the graphics engine to the edges of the device.&#xA;This is useful for devices that cannot clip, e.</description>
    </item>
    <item>
      <title>Changes to Symbol Fonts for Cairo Graphics Devices</title>
      <link>https://blog.r-project.org/2020/04/17/changes-to-symbol-fonts-for-cairo-graphics-devices/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/04/17/changes-to-symbol-fonts-for-cairo-graphics-devices/</guid>
      <description>The symbol font When drawing text in R graphics, we can specify the font “family” to use, e.g., a generic family like &#34;sans&#34; or a specific family like &#34;Helvetica&#34;, and we can specify the font “face” to use, e.g., plain, bold, or italic. R graphics provides four standard font faces, plain, bold, italic, bold-italic, and one special font face that R calls “symbol”. The following code and output demonstrate the different font faces.</description>
    </item>
    <item>
      <title>Changes to &#39;grid&#39; units</title>
      <link>https://blog.r-project.org/2020/04/13/changes-to-grid-units/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/04/13/changes-to-grid-units/</guid>
      <description>One of the main downsides to the ‘grid’ graphics package is that it is slow. And that makes some important packages that depend on ‘grid’, like ‘ggplot2’, slow. For example, the scatterplots shown below are roughly equivalent, but one is drawn using ‘graphics’ and the other using ‘ggplot2’.&#xA;The ‘ggplot2’ version takes more than 4 times as long to draw.&#xA;(The benchmarks in this post were produced using the ‘bench’ package within a Docker container based on rocker/r-devel, but with R-devel (r77995) built with --enable-memory-profiling and a bunch of R packages installed; the Docker images, pmur002/grid-new-units-r-3.</description>
    </item>
    <item>
      <title>Socket Connections Update</title>
      <link>https://blog.r-project.org/2020/03/17/socket-connections-update/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/03/17/socket-connections-update/</guid>
      <description>Starting up a PSOCK cluster is not fast. In R 3.6 on just a few years old laptop with 8 logical cores, running Windows, it takes about 1.7s to start a cluster with 8 nodes:&#xA;library(parallel); system.time(cl &amp;lt;- makePSOCKcluster(8)) A good design is to start a cluster only once during an R session and then pass it to computations that can take advantage of it. This is needed so that the end user always has full control over how many cores are used in total.</description>
    </item>
    <item>
      <title>stringsAsFactors</title>
      <link>https://blog.r-project.org/2020/02/16/stringsasfactors/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2020/02/16/stringsasfactors/</guid>
      <description>Since its inception, R has, at least by default, converted (character) strings to factors when creating data frames directly with data.frame() or as the result of using read.table() variants to read in tabular data. Quite likely, this will soon change.&#xA;In R 0.62 (released 1998), the original internal data frame code was replaced by the interpreted Statlib code contributed by John Chambers, to the effect that data.frame() would always convert strings to factors (unless protected by I()), whereas read.</description>
    </item>
    <item>
      <title>S3 Method Lookup</title>
      <link>https://blog.r-project.org/2019/08/19/s3-method-lookup/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/08/19/s3-method-lookup/</guid>
      <description>At the core of the S3 object system as introduced in the White Book lies the idea that (S3) methods are ordinary functions that follow the GEN.CLS naming convention (with GEN.default as a final fallback). In the initial R implementation of this object system, these methods were searched for in the environment (and all enclosing environments) from which the generic was called.&#xA;With the advent of namespaces (see Tierney (2003), “Name space management for R”, R News, 3(1):2-6) a mechanism for registering S3 methods via S3method() directives in the NAMESPACE file of a package was added.</description>
    </item>
    <item>
      <title>Common PROTECT Errors</title>
      <link>https://blog.r-project.org/2019/04/18/common-protect-errors/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/04/18/common-protect-errors/</guid>
      <description>This post presents the most common PROTECT bugs present in packages, based on manual inspection of ~100 remaining CRAN packages with reports from rchk.&#xA;Background Any C/C++ code interacting with R, both inside R itself and in packages, needs to inform the garbage collector about which objects on the R heap are reachable from local variables. Pointers to such objects are kept on the pointer protection stack or the precious list or multi-set, but the most common is the pointer protection stack with PROTECT/UNPROTECT macros.</description>
    </item>
    <item>
      <title>Use of C&#43;&#43; in Packages</title>
      <link>https://blog.r-project.org/2019/03/28/use-of-c-in-packages/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/03/28/use-of-c-in-packages/</guid>
      <description>About 20% packages from CRAN and BIOC repositories include some native code and more than a half of those include some code in C++. This number is rather high given that the R API and runtime have been designed for C (or Fortran) and cannot be used reliably from C++, without extensive effort and restrictions. To avoid nasty bugs in such code, one needs to know R internals well, and when following the restrictions, one cannot use much from C++ anyway.</description>
    </item>
    <item>
      <title>Parser Speedups</title>
      <link>https://blog.r-project.org/2019/01/07/parser-speedups/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2019/01/07/parser-speedups/</guid>
      <description>It wasn’t my primary goal to improve parser performance nor to measure it. I’ve been working on optimizations to reduce the runtime overhead of including source reference into packages (this is not done by default due to space and execution time overheads). I’ve added an option to exclude parse data from source references and enabled it by default for packages, as parse data account for most of the runtime overhead of source references while they are rarely needed.</description>
    </item>
    <item>
      <title>Unprotecting by Value</title>
      <link>https://blog.r-project.org/2018/12/10/unprotecting-by-value/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2018/12/10/unprotecting-by-value/</guid>
      <description>In short, UNPROTECT_PTR is dangerous and should not be used. This text describes why and describes how to replace it, including mset-based functions that have been introduced as a substitute for situations when unprotection by value is really needed. This could be of interest to anyone who writes native code to interface with the R heap, and definitely to all who use UNPROTECT_PTR in their code.&#xA;Background R provides several functions to protect pointers to R objects held by local C variables (typed SEXP) from the garbage collector.</description>
    </item>
    <item>
      <title>Conditions of Length Greater Than One</title>
      <link>https://blog.r-project.org/2018/10/12/conditions-of-length-greater-than-one/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2018/10/12/conditions-of-length-greater-than-one/</guid>
      <description>Historically R language allows conditions in if and while statements to be vectors (of length greater than one). The first element is used but the remaining elements are ignored, since November 2002 also with a warning (added by Brian Ripley). Following an intuition that such situations would typically arise from a programming error, an option has been added in March 2017 to optionally allow signalling a runtime error, instead (the patch was by Martin Maechler, pinged by a suggestion of Henrik Bengtsson on the R-devel mailing list).</description>
    </item>
    <item>
      <title>Maximum Number of DLLs</title>
      <link>https://blog.r-project.org/2018/03/23/maximum-number-of-dlls/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.r-project.org/2018/03/23/maximum-number-of-dlls/</guid>
      <description>Some packages contain native code, which is linked to R dynamically in the form of dynamically loaded libraries (DLLs). Recently, R users started loading increasing numbers of packages; “workflow documents” are one source of this pattern. This has eventually lead to hitting the DLL limit in R, which materializes as runtime error “maximal number of DLLs reached”.&#xA;Limit on the number of open files The DLL limit in R is good for one important reason.</description>
    </item>
  </channel>
</rss>
