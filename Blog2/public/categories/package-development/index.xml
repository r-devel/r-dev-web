<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Package development on The R Blog</title>
    <link>https://blog.r-project.org/categories/package-development/</link>
    <description>Recent content in Package development on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Apr 2025 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.r-project.org/categories/package-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sensitivity to C math library and mingw-w64 v12</title>
      <link>https://blog.r-project.org/2025/04/24/sensitivity-to-c-math-library-and-mingw-w64-v12/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2025/04/24/sensitivity-to-c-math-library-and-mingw-w64-v12/</guid>
      <description>C math library functions, such as exp or sin, are heavily used by R and packages. The C standard doesn’t require these functions to be “precise”. Instead, there is room for performance optimizations causing a reasonable amount of inaccuracy. The results differ between platforms and may change even on a single platform. This happened with mingw-w64 v12, the SDK/runtime used by GCC and LLVM on Windows, which reduced accuracy of many math functions (for performance and maintenance reasons).</description>
    </item>
    
    <item>
      <title>Alternative toolchains on Windows</title>
      <link>https://blog.r-project.org/2025/01/28/alternative-toolchains-on-windows/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2025/01/28/alternative-toolchains-on-windows/</guid>
      <description>R and R packages on Windows, if they include native code, are built using compiler toolchain and libraries from Rtools. There is always a specific version of Rtools for a given version of R. Rtools44 is used for R 4.4.x, and hence R 4.4.x and packages for that version of R are always built with GCC 13.3 for x86_64 systems and with LLVM 17 for aarch64 systems. This is the case at least since Rtools42 (R 4.</description>
    </item>
    
    <item>
      <title>Generalizing Support for Functional OOP in R</title>
      <link>https://blog.r-project.org/2024/05/17/generalizing-support-for-functional-oop-in-r/</link>
      <pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2024/05/17/generalizing-support-for-functional-oop-in-r/</guid>
      <description>Generalizing Support for Functional OOP in R R has built-in support for two functional Object Oriented Programming (OOP) systems: S3 and S4, corresponding to the third and fourth version of the S language, respectively. The two systems are largely compatible; however, they are two fundamentally distinct systems, two systems for a user to understand, two systems for a developer to contend with when making their package interoperate with another, two systems for R core to maintain.</description>
    </item>
    
    <item>
      <title>Why to avoid \x in regular expressions</title>
      <link>https://blog.r-project.org/2022/06/27/why-to-avoid-%5Cx-in-regular-expressions/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2022/06/27/why-to-avoid-%5Cx-in-regular-expressions/</guid>
      <description>Using \x in string literals is almost always a bad idea, but using it in regular expressions is particularly dangerous.
Consider this “don’t do” example in R 4.2.1 or earlier:
text &amp;lt;- &amp;quot;Hello\u00a0R&amp;quot; gsub(&amp;quot;\xa0&amp;quot;, &amp;quot;&amp;quot;, text) a0 is the code point of the Unicode “NO-BREAK SPACE” and the example runs in UTF-8 locale. The intention is to remove the space; a slightly more complicated variant has been discussed on the R-devel mailing list about half a year ago.</description>
    </item>
    
    <item>
      <title>Virtual Windows machine for checking R packages</title>
      <link>https://blog.r-project.org/2021/03/18/virtual-windows-machine-for-checking-r-packages/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2021/03/18/virtual-windows-machine-for-checking-r-packages/</guid>
      <description>Microsoft provides a free Windows 10 virtual machine for testing. Package maintainers working on Linux and MacOS can use it to test their packages on Windows. See instructions on how to set up the machine automatically for checking R packages.
The set up provides SSH access with bash, so that users can perform most of the tasks from their preferred terminal emulator. Command line tools needed to build R and many R packages from source are pre-installed.</description>
    </item>
    
    <item>
      <title>GFortran Issues with LAPACK II</title>
      <link>https://blog.r-project.org/2019/09/25/gfortran-issues-with-lapack-ii/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2019/09/25/gfortran-issues-with-lapack-ii/</guid>
      <description>This is an update on my previous post from May.
A number of things changed since: GFortran started adopting a fix that by default prevents optimizations which break code calling BLAS/LAPACK functions from C without hidden length arguments. R has been updated to internally add these hidden length arguments (and also in other cases where LTO type mismatch was detected). R has exported macros for use in packages so that they can follow suit when calling BLAS/LAPACK and CRAN has been working with maintainers of the affected packages.</description>
    </item>
    
    <item>
      <title>GFortran Issues with LAPACK</title>
      <link>https://blog.r-project.org/2019/05/15/gfortran-issues-with-lapack/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2019/05/15/gfortran-issues-with-lapack/</guid>
      <description>Recent version of the GNU Fortran compiler (7, 8, 9) include optimizations that break interoperability between C and Fortran code with BLAS/LAPACK. The compiled code of BLAS/LAPACK corrupts stack, often resulting in crashes. This impacts R, R packages directly calling into BLAS/LAPACK, and all other applications of BLAS/LAPACK. The work-around is to compile BLAS/LAPACK with -fno-optimize-sibling-calls. This option is now used in R-Devel and R-Patched, so that the reference BLAS and LAPACK included in R are compiled with that option.</description>
    </item>
    
    <item>
      <title>Use of C&#43;&#43; in Packages</title>
      <link>https://blog.r-project.org/2019/03/28/use-of-c-in-packages/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.r-project.org/2019/03/28/use-of-c-in-packages/</guid>
      <description>About 20% packages from CRAN and BIOC repositories include some native code and more than a half of those include some code in C++. This number is rather high given that the R API and runtime have been designed for C (or Fortran) and cannot be used reliably from C++, without extensive effort and restrictions. To avoid nasty bugs in such code, one needs to know R internals well, and when following the restrictions, one cannot use much from C++ anyway.</description>
    </item>
    
  </channel>
</rss>