Binary files orig/CNEr/src/ucsc/.hash.h.swp and patched/CNEr/src/ucsc/.hash.h.swp differ
diff -Nru orig/CNEr/src/ucsc/common.c patched/CNEr/src/ucsc/common.c
--- orig/CNEr/src/ucsc/common.c	2024-10-24 02:43:14.000000000 +0200
+++ patched/CNEr/src/ucsc/common.c	2025-03-06 18:56:09.959884100 +0100
@@ -341,7 +341,7 @@
     }
 }
 
-void slUniqify(void *pList, int (*compare )(const void *elem1,  const void *elem2), void (*free)())
+void slUniqify(void *pList, int (*compare )(const void *elem1,  const void *elem2), void (*free)(void *))
 /* Return sorted list with duplicates removed.
  * Compare should be same type of function as slSort's compare (taking
  * pointers to pointers to elements.  Free should take a simple
@@ -371,7 +371,7 @@
 slSort(pList,compare);
 }
 
-void slSortMergeUniq(void *pA, void *b, CmpFunction *compare, void (*free)())
+void slSortMergeUniq(void *pA, void *b, CmpFunction *compare, void (*free)(void *))
 // Merges and sorts a pair of singly linked lists leaving only unique
 // items via slUniqufy.  duplicate itens are defined by the compare routine
 // returning 0. If free is provided, items dropped from list can disposed of.
diff -Nru orig/CNEr/src/ucsc/common.h patched/CNEr/src/ucsc/common.h
--- orig/CNEr/src/ucsc/common.h	2024-10-24 02:43:14.000000000 +0200
+++ patched/CNEr/src/ucsc/common.h	2025-03-06 18:54:50.281846900 +0100
@@ -423,7 +423,7 @@
  * The arguments to the compare function in real, non-void, life
  * are pointers to pointers. */
 
-void slUniqify(void *pList, CmpFunction *compare, void (*free)());
+void slUniqify(void *pList, CmpFunction *compare, void (*free)(void *));
 /* Return sorted list with duplicates removed.
  * Compare should be same type of function as slSort's compare (taking
  * pointers to pointers to elements.  Free should take a simple
@@ -432,7 +432,7 @@
 void slSortMerge(void *pA, void *b, CmpFunction *compare);
 // Merges and sorts a pair of singly linked lists using slSort.
 
-void slSortMergeUniq(void *pA, void *b, CmpFunction *compare, void (*free)());
+void slSortMergeUniq(void *pA, void *b, CmpFunction *compare, void (*free)(void *));
 // Merges and sorts a pair of singly linked lists leaving only unique
 // items via slUniqufy.  duplicate itens are defined by the compare routine
 // returning 0. If free is provided, items dropped from list can disposed of.
diff -Nru orig/CNEr/src/ucsc/hash.c patched/CNEr/src/ucsc/hash.c
--- orig/CNEr/src/ucsc/hash.c	2024-10-24 02:43:14.000000000 +0200
+++ patched/CNEr/src/ucsc/hash.c	2025-03-06 18:58:30.266556700 +0100
@@ -611,7 +611,7 @@
     }
 }
 
-void hashFreeWithVals(struct hash **pHash, void (freeFunc)())
+void hashFreeWithVals(struct hash **pHash, void (freeFunc)(void *))
 /* Free up hash table and all values associated with it. freeFunc is a
  * function to free an entry, should take a pointer to a pointer to an
  * entry. */
diff -Nru orig/CNEr/src/ucsc/hash.h patched/CNEr/src/ucsc/hash.h
--- orig/CNEr/src/ucsc/hash.h	2024-10-24 02:43:14.000000000 +0200
+++ patched/CNEr/src/ucsc/hash.h	2025-03-06 18:58:42.812768600 +0100
@@ -244,7 +244,7 @@
 /* Free up hash table and all values associated with it.
  * (Just calls freeMem on each hel->val) */
 
-void hashFreeWithVals(struct hash **pHash, void (freeFunc)());
+void hashFreeWithVals(struct hash **pHash, void (freeFunc)(void *));
 /* Free up hash table and all values associated with it. freeFunc is a
  * function to free an entry, should take a pointer to a pointer to an
  * entry. */
