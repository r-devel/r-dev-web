diff -Nru orig/aws/src/awslp.f patched/aws/src/awslp.f
--- orig/aws/src/awslp.f	2023-03-22 18:15:52.000000000 +0100
+++ patched/aws/src/awslp.f	2024-02-01 18:29:59.216485200 +0100
@@ -25,6 +25,7 @@
 C
 C   temporary arrays set for maximum degree 2
 C
+      use omp_lib
       implicit none
       external kldistp,lkern
       double precision kldistp,lkern
@@ -38,8 +39,6 @@
      1       hakt2,thij(3),thi(3),zz(5),lwj,yj,hs2,hs,z,cc,spf,
      2       hhommax,hhommin,az1,hfixmax,hnfix,ssij,spmax,
      3       hhomimin,hhomimax
-!$    integer omp_get_thread_num
-!$    external omp_get_thread_num
 C   arrays with variable length are organized as
 C   theta(n,dp1)
 C   bi(n,dp2)
@@ -277,6 +276,7 @@
 C
 C   temporary arrays set for maximum degree 2
 C
+      use omp_lib
       implicit none
       external kldistp,lkern
       double precision kldistp,lkern
@@ -290,9 +290,6 @@
      1       hakt2,thij(3),thi(3),zz(5),lwj,yj,hs2,hs,z,cc,spf,hhomi,
      2       hhommax,az1,hfixmax,hnfix
 
-!$    integer omp_get_thread_num
-!$    external omp_get_thread_num
-
 C   arrays with variable length are organized as
 C   theta(n,dp1)
 C   bi(n,dp2)
@@ -490,6 +487,7 @@
 C
 C   temporary arrays set for maximum degree 2
 C
+      use omp_lib
       implicit none
       external kldistp,lkern
       double precision kldistp,lkern
@@ -503,8 +501,6 @@
       double precision bii(15),sij,swj(15),swj2(15),swj0(15),swjy(6),
      1       z1,z2,wj,hakt2,thij(6),thi(6),zz(15),lwj,hs2,hs,z,cc,
      2       wjy,spf,hhomi,hhommax,az1,hfixmax,hnfix
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
 C   arrays with variable length are organized as
 C   theta(n1,n2,dp1)
 C   bi(n1,n2,dp2)
@@ -766,6 +762,7 @@
 C
 C   temporary arrays set for maximum degree 2
 C
+      use omp_lib
       implicit none
       external kldistp,lkern
       double precision kldistp,lkern
@@ -779,8 +776,6 @@
       double precision bii(15),sij,swj(15),swj2(15),swj0(15),swjy(6),
      1       z1,z2,wj,hakt2,thij(6),thi(6),zz(15),lwj,hs2,hs,z,cc,
      2       wjy,spf,hhomi,hhommax,az1,hfixmax,hnfix
-!$    integer omp_get_thread_num
-!$    external omp_get_thread_num
 C   arrays with variable length are organized as
 C   theta(n1,n2,dp1)
 C   bi(n1,n2,dp2)
diff -Nru orig/aws/src/caws.f patched/aws/src/caws.f
--- orig/aws/src/caws.f	2023-03-22 18:15:52.000000000 +0100
+++ patched/aws/src/caws.f	2024-02-01 18:31:45.601088000 +0100
@@ -784,6 +784,7 @@
 C   thnew    \sum  Wi Y / bi     (output)
 C   wght     scaling factor for second and third dimension (larger values shrink)
 C
+      use omp_lib
       implicit none
 
       integer nv,n1,n2,n3,ncores,pos(*)
@@ -797,8 +798,6 @@
      1        w1,w2,spmb,swj2
       external lkern
       double precision lkern
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       thrednr = 1
 C just to prevent a compiler warning
       hakt2=hakt*hakt
@@ -946,6 +945,7 @@
 C   thnew    \sum  Wi Y / bi     (output)
 C   wght     scaling factor for second and third dimension (larger values shrink)
 C
+      use omp_lib
       implicit none
 
       integer nv,n1,n2,n3,ncores,nvd,pos(*)
@@ -960,8 +960,6 @@
       double precision thi(nv,*),invcovi(nvd,*)
       external lkern, KLdistsi
       double precision lkern, KLdistsi
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       thrednr = 1
 C just to prevent a compiler warning
       hakt2=hakt*hakt
diff -Nru orig/aws/src/estimateComplexSigma.f patched/aws/src/estimateComplexSigma.f
--- orig/aws/src/estimateComplexSigma.f	2023-03-22 18:15:52.000000000 +0100
+++ patched/aws/src/estimateComplexSigma.f	2024-02-01 18:33:56.324209500 +0100
@@ -19,6 +19,7 @@
 C
 C   wght     scaling factor for second and third dimension (larger values shrink)
 C
+      use omp_lib
       implicit none
 
       integer nv,n1,n2,n3,ncores
@@ -33,8 +34,6 @@
      1       w1,w2,spmb,spf
       external lkern,KLdist2
       double precision lkern,KLdist2
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       thrednr = 1
 C just to prevent a compiler warning
       hakt2=hakt*hakt
diff -Nru orig/aws/src/pcaws.f patched/aws/src/pcaws.f
--- orig/aws/src/pcaws.f	2023-03-22 18:15:52.000000000 +0100
+++ patched/aws/src/pcaws.f	2024-02-01 18:33:15.480810100 +0100
@@ -230,6 +230,7 @@
 C   thnew    \sum  Wi Y / bi     (output)
 C   wght     scaling factor for second and third dimension (larger values shrink)
 C
+      use omp_lib
       implicit none
 
       integer nv,n1,n2,n3,ncores,pos(*)
@@ -244,8 +245,6 @@
       integer ip1,ip2,ip3,nph1,nph2,nph3,ipind,jp1,jp2,jp3,jpind
       external lkern
       double precision lkern
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       thrednr = 1
 C just to prevent a compiler warning
       hakt2=hakt*hakt
@@ -420,6 +419,7 @@
 C   thnew    \sum  Wi Y / bi     (output)
 C   wght     scaling factor for second and third dimension (larger values shrink)
 C
+      use omp_lib
       implicit none
 
       integer nv,n1,n2,n3,ncores,nvd,pos(*)
@@ -435,8 +435,6 @@
       integer ip1,ip2,ip3,nph1,nph2,nph3,ipind,jp1,jp2,jp3,jpind
       external lkern, KLdistsi
       double precision lkern, KLdistsi
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       thrednr = 1
 C just to prevent a compiler warning
       hakt2=hakt*hakt
@@ -611,6 +609,7 @@
 C   thnew    \sum  Wi Y / bi     (output)
 C   wght     scaling factor for second and third dimension (larger values shrink)
 C
+      use omp_lib
       implicit none
 
       integer nv,n1,n2,n3,ncores,nvd,nd,pos(*)
@@ -626,8 +625,6 @@
       integer ip1,ip2,ip3,nph1,nph2,nph3,ipind,jp1,jp2,jp3,jpind
       external lkern, KLdistsr
       double precision lkern, KLdistsr
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       thrednr = 1
 C just to prevent a compiler warning
       hakt2=hakt*hakt
diff -Nru orig/aws/src/smooth3d.f patched/aws/src/smooth3d.f
--- orig/aws/src/smooth3d.f	2023-03-22 18:15:52.000000000 +0100
+++ patched/aws/src/smooth3d.f	2024-02-01 18:34:52.245873400 +0100
@@ -347,6 +347,7 @@
 C   wght     rations of voxel dimensions
 C   resi     auxilary array
 C
+      use omp_lib
       implicit none
       integer n1,n2,n3,n4,kern,skern,wlse,pos(*)
       logical aws
@@ -355,8 +356,6 @@
       integer ih1,ih2,ih3,i1,i2,i3,j1,j2,j3,jw1,jw2,jw3,clw1,clw2,clw3,
      1  dlw1,dlw2,dlw3,k,n,thrednr,iind,jind,rthrednr,dlw12,jindp,iindp
       double precision bii,swj,swjy,thi,wj,hakt2,spf,si2i,sresisq,resik
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       hakt2=hakt*hakt
       spf=spmax/(spmax-spmin)
       aws=lambda.lt.1d40
@@ -483,6 +482,7 @@
 C   wght     rations of voxel dimensions
 C   swjy     auxilary array
 C
+      use omp_lib
       implicit none
       integer dv,n1,n2,n3,kern,skern,ncores,wlse,pos(*)
       logical aws
@@ -493,8 +493,6 @@
      1        clw1,clw2,clw3,dlw1,dlw2,dlw3,k,n,thrednr,iind,jind,
      2        iindp,jindp
       double precision bii,swj,wj,hakt2,spf,si2i,thi
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       hakt2=hakt*hakt
       spf=spmax/(spmax-spmin)
       aws=lambda.lt.1d40
diff -Nru orig/aws/src/smse3.f patched/aws/src/smse3.f
--- orig/aws/src/smse3.f	2023-03-22 18:15:52.000000000 +0100
+++ patched/aws/src/smse3.f	2024-02-01 18:36:22.241156400 +0100
@@ -462,6 +462,7 @@
 c   model=0  Chi^2-based KL-distance, y ~ Chi, th on same scale, smooth y
 c   model=1  Chi^2-based KL-distance, y ~ Chi^2, th on same scale, smooth y
 c   model=2  Gauss-based KL-distance, y ~ Chi, th on same scale, smooth y^2
+      use omp_lib
       implicit none
       integer n1,n2,n3,ngrad,n,ind(5,n),ncoils,model,ncores
       integer pos(*),nv
@@ -472,8 +473,6 @@
       integer iind,i,i1,i2,i3,i4,j1,j2,j3,j4,thrednr,
      1       jind,iindp,jindp,n12
       double precision z,thi,nii,thj,ldfi,ldfj,yj
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       double precision kldisnc1
       external kldisnc1
       df=2.d0*ncoils
@@ -638,6 +637,7 @@
 C   ind(.,i)[1:5] are j1-i1,j2-i2,j3-i3, i4 and j4 respectively
 C
 c   model=2  Gauss-based KL-distance, y ~ Chi, th on same scale, smooth y^2
+      use omp_lib
       implicit none
       integer ns,n1,n2,n3,ngrad,n,ind(5,n),ncores
       integer pos(*),nv
@@ -647,8 +647,6 @@
       integer iind,jind,i,i1,i2,i3,i4,j1,j2,j3,j4,thrednr,k,n12,
      1        iindp,jindp
       double precision sz,z,nii,si(ns,ncores),thi(ns,ncores)
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       double precision kldisnc1
       external kldisnc1
       nii=1.d0
@@ -805,6 +803,7 @@
 C   location weights in w(i) for si images
 C   ind(.,i)[1:5] are j1-i1,j2-i2,j3-i3, i4 and j4 respectively
 C
+      use omp_lib
       implicit none
       integer nv,ns,n1,n2,n3,ngrad,n,n0,ind(5,n),ind0(3,n0),pos(*)
       double precision y(*),y0(nv),th(ns,*),ni(ns,*),th0(ns,nv),
@@ -819,8 +818,6 @@
       integer iind,i,i1,i2,i3,i4,j1,j2,j3,j4,thrednr,k,jind,iind4,
      1        jind4,n12,iindp,jindp
       double precision sz,z,sw0,swy0
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       thrednr = 1
       n12 = n1*n2
 C$OMP PARALLEL DEFAULT(NONE)
diff -Nru orig/aws/src/varest.f patched/aws/src/varest.f
--- orig/aws/src/varest.f	2023-03-22 18:15:52.000000000 +0100
+++ patched/aws/src/varest.f	2024-02-01 18:40:43.435883100 +0100
@@ -67,6 +67,7 @@
 C   results in yout
 C   size of work needs to be 2*nind
 C
+      use omp_lib
       implicit none
       integer n1,n2,n3,nind,ind(3,nind),ncores
       integer mask(n1,n2,n3)
@@ -74,8 +75,6 @@
       integer i1,i2,i3,j1,j2,j3,j,k,thrednr
       double precision fmedian
       external fmedian
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       thrednr = 1
 C$OMP PARALLEL DEFAULT(SHARED)
 C$OMP& PRIVATE(i1,i2,i3,j1,j2,j3,j,k,thrednr)
@@ -138,6 +137,7 @@
 C   ind(.,i)[1:3] are j1-i1,j2-i2 and j3-i3 respectively
 C   wad, sad - array for weights>0 and corresponding observed s
 C
+      use omp_lib
       implicit none
       integer n1,n2,n3,nw,ind(3,nw),nthreds,iL,nfb
       integer mask(n1,n2,n3)
@@ -148,8 +148,6 @@
       integer i1,i2,i3,j1,j2,j3,i,j,jj,n,maxit,thrednr
       double precision z,sw,sws,sws2,sj,thi,wj,kval,fnsi,sgi,tol,low,up,
      1       fmin,sgi2,vz,thi2,thj2,fnsj,thj,nii
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       n = n1*n2*n3
       thrednr = 1
       tol=1d-5
@@ -271,6 +269,7 @@
 C   ind(.,i)[1:3] are j1-i1,j2-i2 and j3-i3 respectively
 C   wad, sad - array for weights>0 and corresponding observed s
 C
+      use omp_lib
       implicit none
       integer n1,n2,n3,nw,ind(3,nw)
       integer mask(n1,n2,n3)
@@ -278,8 +277,6 @@
      1 th(n1,n2,n3),sigman(n1*n2*n3),lambda,w(nw),sigma(n1,n2,n3),minni
       integer i1,i2,i3,j1,j2,j3,i,j,n,thrednr
       double precision z,sw,sws,sws2,sj,thi,wj,kval,sgi
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       n = n1*n2*n3
       thrednr = 1
 C  precompute values of lgamma(corrected df/2) in each voxel
@@ -439,6 +436,7 @@
 C   location weights in w(i)
 C   ind(.,i)[1:5] are j1-i1,j2-i2,j3-i3, i4 and j4 respectively
 C
+      use omp_lib
       implicit none
       integer n1,n2,n3,nw,ind(3,nw),nthreds
       integer mask(n1,n2,n3)
@@ -447,8 +445,6 @@
      2       sigma,wad(nw,nthreds)
       integer i1,i2,i3,j1,j2,j3,i,j,n,thrednr
       double precision z,sw,sw2,swy,swy2,yj,thi,wj,kval,cw,fnsi
-!$      integer omp_get_thread_num
-!$      external omp_get_thread_num
       n = n1*n2*n3
       thrednr = 1
 C  precompute values of lgamma(corrected df/2) in each voxel
