diff -Nru llvm-project-19.1.7.src-orig/clang/lib/Driver/Driver.cpp llvm-project-19.1.7.src-patched/clang/lib/Driver/Driver.cpp
--- llvm-project-19.1.7.src-orig/clang/lib/Driver/Driver.cpp	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/clang/lib/Driver/Driver.cpp	2025-02-26 19:20:54.537464055 -0500
@@ -2003,7 +2003,7 @@
 
 void Driver::PrintVersion(const Compilation &C, raw_ostream &OS) const {
   if (IsFlangMode()) {
-    OS << getClangToolFullVersion("flang-new") << '\n';
+    OS << getClangToolFullVersion("flang") << '\n';
   } else {
     // FIXME: The following handlers should use a callback mechanism, we don't
     // know what the client would like to do.
diff -Nru llvm-project-19.1.7.src-orig/clang/lib/Driver/ToolChains/Flang.cpp llvm-project-19.1.7.src-patched/clang/lib/Driver/ToolChains/Flang.cpp
--- llvm-project-19.1.7.src-orig/clang/lib/Driver/ToolChains/Flang.cpp	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/clang/lib/Driver/ToolChains/Flang.cpp	2025-02-26 19:20:39.093538513 -0500
@@ -884,12 +884,12 @@
 
   // TODO: Replace flang-new with flang once the new driver replaces the
   // throwaway driver
-  const char *Exec = Args.MakeArgString(D.GetProgramPath("flang-new", TC));
+  const char *Exec = Args.MakeArgString(D.GetProgramPath("flang", TC));
   C.addCommand(std::make_unique<Command>(JA, *this,
                                          ResponseFileSupport::AtFileUTF8(),
                                          Exec, CmdArgs, Inputs, Output));
 }
 
-Flang::Flang(const ToolChain &TC) : Tool("flang-new", "flang frontend", TC) {}
+Flang::Flang(const ToolChain &TC) : Tool("flang", "flang frontend", TC) {}
 
 Flang::~Flang() {}
diff -Nru llvm-project-19.1.7.src-orig/flang/CMakeLists.txt llvm-project-19.1.7.src-patched/flang/CMakeLists.txt
--- llvm-project-19.1.7.src-orig/flang/CMakeLists.txt	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/CMakeLists.txt	2025-02-26 18:56:52.317427672 -0500
@@ -152,7 +152,9 @@
   # LLVM_INCLUDE_DIRS when merging in the monorepo (Warning from flang headers
   # should not be suppressed).
   include_directories(SYSTEM ${LLVM_INCLUDE_DIRS})
-  add_definitions(${LLVM_DEFINITIONS})
+  # https://gitlab.kitware.com/cmake/cmake/-/issues/22162
+  separate_arguments(LLVM_DEFINITIONS_LIST NATIVE_COMMAND ${LLVM_DEFINITIONS})
+  add_definitions(${LLVM_DEFINITIONS_LIST})
 
   # LLVM's cmake configuration files currently sneak in a c++11 flag.
   # We look for it here and remove it from Flang's compile flags to
diff -Nru llvm-project-19.1.7.src-orig/flang/include/flang/Optimizer/Builder/Runtime/RTBuilder.h llvm-project-19.1.7.src-patched/flang/include/flang/Optimizer/Builder/Runtime/RTBuilder.h
--- llvm-project-19.1.7.src-orig/flang/include/flang/Optimizer/Builder/Runtime/RTBuilder.h	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/include/flang/Optimizer/Builder/Runtime/RTBuilder.h	2025-02-26 18:56:52.317427672 -0500
@@ -29,7 +29,7 @@
 #include <cstdint>
 #include <functional>
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 // On Windows* OS GetCurrentProcessId returns DWORD aka uint32_t
 typedef std::uint32_t pid_t;
 #endif
diff -Nru llvm-project-19.1.7.src-orig/flang/include/flang/Runtime/command.h llvm-project-19.1.7.src-patched/flang/include/flang/Runtime/command.h
--- llvm-project-19.1.7.src-orig/flang/include/flang/Runtime/command.h	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/include/flang/Runtime/command.h	2025-02-26 18:56:52.318427665 -0500
@@ -12,7 +12,7 @@
 #include "flang/Runtime/entry-names.h"
 #include <cstdint>
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 // On Windows* OS GetCurrentProcessId returns DWORD aka uint32_t
 typedef std::uint32_t pid_t;
 #else
diff -Nru llvm-project-19.1.7.src-orig/flang/lib/Frontend/CompilerInvocation.cpp llvm-project-19.1.7.src-patched/flang/lib/Frontend/CompilerInvocation.cpp
--- llvm-project-19.1.7.src-orig/flang/lib/Frontend/CompilerInvocation.cpp	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/lib/Frontend/CompilerInvocation.cpp	2025-02-26 18:56:52.318427665 -0500
@@ -65,8 +65,8 @@
 static bool parseShowColorsArgs(const llvm::opt::ArgList &args,
                                 bool defaultColor = true) {
   // Color diagnostics default to auto ("on" if terminal supports) in the
-  // compiler driver `flang-new` but default to off in the frontend driver
-  // `flang-new -fc1`, needing an explicit OPT_fdiagnostics_color.
+  // compiler driver `flang` but default to off in the frontend driver
+  // `flang -fc1`, needing an explicit OPT_fdiagnostics_color.
   // Support both clang's -f[no-]color-diagnostics and gcc's
   // -f[no-]diagnostics-colors[=never|always|auto].
   enum {
@@ -880,7 +880,7 @@
     }
   }
 
-  // Default to off for `flang-new -fc1`.
+  // Default to off for `flang -fc1`.
   res.getFrontendOpts().showColors =
       parseShowColorsArgs(args, /*defaultDiagColor=*/false);
 
diff -Nru llvm-project-19.1.7.src-orig/flang/lib/Frontend/FrontendActions.cpp llvm-project-19.1.7.src-patched/flang/lib/Frontend/FrontendActions.cpp
--- llvm-project-19.1.7.src-orig/flang/lib/Frontend/FrontendActions.cpp	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/lib/Frontend/FrontendActions.cpp	2025-02-26 18:56:52.319427658 -0500
@@ -230,7 +230,7 @@
     llvm::SMDiagnostic err;
     llvmModule = llvm::parseIRFile(getCurrentInput().getFile(), err, *llvmCtx);
     if (!llvmModule || llvm::verifyModule(*llvmModule, &llvm::errs())) {
-      err.print("flang-new", llvm::errs());
+      err.print("flang", llvm::errs());
       unsigned diagID = ci.getDiagnostics().getCustomDiagID(
           clang::DiagnosticsEngine::Error, "Could not parse IR");
       ci.getDiagnostics().Report(diagID);
diff -Nru llvm-project-19.1.7.src-orig/flang/lib/FrontendTool/ExecuteCompilerInvocation.cpp llvm-project-19.1.7.src-patched/flang/lib/FrontendTool/ExecuteCompilerInvocation.cpp
--- llvm-project-19.1.7.src-orig/flang/lib/FrontendTool/ExecuteCompilerInvocation.cpp	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/lib/FrontendTool/ExecuteCompilerInvocation.cpp	2025-02-26 18:56:52.319427658 -0500
@@ -154,8 +154,7 @@
   // Honor -help.
   if (flang->getFrontendOpts().showHelp) {
     clang::driver::getDriverOptTable().printHelp(
-        llvm::outs(), "flang-new -fc1 [options] file...",
-        "LLVM 'Flang' Compiler",
+        llvm::outs(), "flang -fc1 [options] file...", "LLVM 'Flang' Compiler",
         /*ShowHidden=*/false, /*ShowAllAliases=*/false,
         llvm::opt::Visibility(clang::driver::options::FC1Option));
     return true;
diff -Nru llvm-project-19.1.7.src-orig/flang/module/iso_c_binding.f90 llvm-project-19.1.7.src-patched/flang/module/iso_c_binding.f90
--- llvm-project-19.1.7.src-orig/flang/module/iso_c_binding.f90	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/module/iso_c_binding.f90	2025-02-26 18:56:52.318427665 -0500
@@ -80,7 +80,7 @@
 #if __x86_64__
     c_long_double = 10
 #else
-    c_long_double = 16
+    c_long_double = 8
 #endif
 
   integer, parameter, public :: &
diff -Nru llvm-project-19.1.7.src-orig/flang/runtime/CMakeLists.txt llvm-project-19.1.7.src-patched/flang/runtime/CMakeLists.txt
--- llvm-project-19.1.7.src-orig/flang/runtime/CMakeLists.txt	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/runtime/CMakeLists.txt	2025-02-26 18:56:52.320427651 -0500
@@ -98,6 +98,11 @@
 append(${NO_LTO_FLAGS} CMAKE_C_FLAGS)
 append(${NO_LTO_FLAGS} CMAKE_CXX_FLAGS)
 
+if (MINGW)
+  append("-municode" CMAKE_C_FLAGS)
+  append("-municode" CMAKE_CXX_FLAGS)
+endif()
+
 # Disable libstdc++/libc++ assertions, even in an LLVM_ENABLE_ASSERTIONS build,
 # to avoid an unwanted dependency on libstdc++/libc++.so.
 add_definitions(-U_GLIBCXX_ASSERTIONS)
@@ -303,7 +308,7 @@
 #
 # TODO: This is a workaround and should be updated when runtime build procedure
 # is changed to a regular runtime build.  See discussion in PR #95388.
-if (TARGET flang-new AND TARGET module_files)
-  add_dependencies(FortranRuntime flang-new module_files)
+if (TARGET flang AND TARGET module_files)
+  add_dependencies(FortranRuntime flang module_files)
 endif()
 
diff -Nru llvm-project-19.1.7.src-orig/flang/runtime/command.cpp llvm-project-19.1.7.src-patched/flang/runtime/command.cpp
--- llvm-project-19.1.7.src-orig/flang/runtime/command.cpp	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/runtime/command.cpp	2025-02-26 18:56:52.318427665 -0500
@@ -15,7 +15,7 @@
 #include <cstdlib>
 #include <limits>
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 #include "flang/Common/windows-include.h"
 #include <direct.h>
 #define getcwd _getcwd
diff -Nru llvm-project-19.1.7.src-orig/flang/runtime/random.cpp llvm-project-19.1.7.src-patched/flang/runtime/random.cpp
--- llvm-project-19.1.7.src-orig/flang/runtime/random.cpp	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/runtime/random.cpp	2025-02-26 18:56:52.320427651 -0500
@@ -39,7 +39,7 @@
     if (repeatable) {
       generator.seed(0);
     } else {
-#ifdef CLOCK_REALTIME
+#if defined(CLOCK_REALTIME) && !defined(__MINGW32__)
       timespec ts;
       clock_gettime(CLOCK_REALTIME, &ts);
       generator.seed(ts.tv_sec & ts.tv_nsec);
diff -Nru llvm-project-19.1.7.src-orig/flang/tools/f18/CMakeLists.txt llvm-project-19.1.7.src-patched/flang/tools/f18/CMakeLists.txt
--- llvm-project-19.1.7.src-orig/flang/tools/f18/CMakeLists.txt	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/tools/f18/CMakeLists.txt	2025-02-26 18:56:52.319427658 -0500
@@ -36,7 +36,7 @@
 set(module_objects "")
 
 # Create module files directly from the top-level module source directory.
-# If CMAKE_CROSSCOMPILING, then the newly built flang-new executable was
+# If CMAKE_CROSSCOMPILING, then the newly built flang executable was
 # cross compiled, and thus can't be executed on the build system and thus
 # can't be used for generating module files.
 if (NOT CMAKE_CROSSCOMPILING)
@@ -92,9 +92,9 @@
     # TODO: We may need to flag this with conditional, in case Flang is built w/o OpenMP support
     add_custom_command(OUTPUT ${base}.mod ${object_output}
       COMMAND ${CMAKE_COMMAND} -E make_directory ${FLANG_INTRINSIC_MODULES_DIR}
-      COMMAND flang-new ${opts} -cpp ${compile_with} -module-dir ${FLANG_INTRINSIC_MODULES_DIR}
+      COMMAND flang ${opts} -cpp ${compile_with} -module-dir ${FLANG_INTRINSIC_MODULES_DIR}
         ${FLANG_SOURCE_DIR}/module/${filename}.f90
-      DEPENDS flang-new ${FLANG_SOURCE_DIR}/module/${filename}.f90 ${FLANG_SOURCE_DIR}/module/__fortran_builtins.f90 ${depends}
+      DEPENDS flang ${FLANG_SOURCE_DIR}/module/${filename}.f90 ${FLANG_SOURCE_DIR}/module/__fortran_builtins.f90 ${depends}
     )
     list(APPEND MODULE_FILES ${base}.mod)
     install(FILES ${base}.mod DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/flang")
@@ -119,9 +119,9 @@
     set(base ${FLANG_INTRINSIC_MODULES_DIR}/omp_lib)
     add_custom_command(OUTPUT ${base}.mod ${base}_kinds.mod
       COMMAND ${CMAKE_COMMAND} -E make_directory ${FLANG_INTRINSIC_MODULES_DIR}
-      COMMAND flang-new -cpp -fsyntax-only ${opts} -module-dir ${FLANG_INTRINSIC_MODULES_DIR}
+      COMMAND flang -cpp -fsyntax-only ${opts} -module-dir ${FLANG_INTRINSIC_MODULES_DIR}
         ${CMAKE_BINARY_DIR}/projects/openmp/runtime/src/omp_lib.F90
-      DEPENDS flang-new ${FLANG_INTRINSIC_MODULES_DIR}/iso_c_binding.mod ${CMAKE_BINARY_DIR}/projects/openmp/runtime/src/omp_lib.F90 ${depends}
+      DEPENDS flang ${FLANG_INTRINSIC_MODULES_DIR}/iso_c_binding.mod ${CMAKE_BINARY_DIR}/projects/openmp/runtime/src/omp_lib.F90 ${depends}
     )
     add_custom_command(OUTPUT ${base}.f18.mod
       DEPENDS ${base}.mod
diff -Nru llvm-project-19.1.7.src-orig/flang/tools/flang-driver/CMakeLists.txt llvm-project-19.1.7.src-patched/flang/tools/flang-driver/CMakeLists.txt
--- llvm-project-19.1.7.src-orig/flang/tools/flang-driver/CMakeLists.txt	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/tools/flang-driver/CMakeLists.txt	2025-02-26 18:56:52.320427651 -0500
@@ -11,18 +11,18 @@
   TargetParser
 )
 
-add_flang_tool(flang-new
+add_flang_tool(flang
   driver.cpp
   fc1_main.cpp
 )
 
-target_link_libraries(flang-new
+target_link_libraries(flang
   PRIVATE
   flangFrontend
   flangFrontendTool
 )
 
-clang_target_link_libraries(flang-new
+clang_target_link_libraries(flang
   PRIVATE
   clangDriver
   clangBasic
@@ -30,9 +30,9 @@
 
 option(FLANG_PLUGIN_SUPPORT "Build Flang with plugin support." ON)
 
-# Enable support for plugins, which need access to symbols from flang-new
+# Enable support for plugins, which need access to symbols from flang
 if(FLANG_PLUGIN_SUPPORT)
-  export_executable_symbols_for_plugins(flang-new)
+  export_executable_symbols_for_plugins(flang)
 endif()
 
-install(TARGETS flang-new DESTINATION "${CMAKE_INSTALL_BINDIR}")
+install(TARGETS flang DESTINATION "${CMAKE_INSTALL_BINDIR}")
diff -Nru llvm-project-19.1.7.src-orig/flang/tools/flang-driver/driver.cpp llvm-project-19.1.7.src-patched/flang/tools/flang-driver/driver.cpp
--- llvm-project-19.1.7.src-orig/flang/tools/flang-driver/driver.cpp	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/flang/tools/flang-driver/driver.cpp	2025-02-26 18:56:52.320427651 -0500
@@ -88,14 +88,15 @@
   llvm::InitLLVM x(argc, argv);
   llvm::SmallVector<const char *, 256> args(argv, argv + argc);
 
-  clang::driver::ParsedClangName targetandMode("flang", "--driver-mode=flang");
+  clang::driver::ParsedClangName targetandMode =
+      clang::driver::ToolChain::getTargetAndModeFromProgramName(argv[0]);
   std::string driverPath = getExecutablePath(args[0]);
 
   llvm::BumpPtrAllocator a;
   llvm::StringSaver saver(a);
   ExpandResponseFiles(saver, args);
 
-  // Check if flang-new is in the frontend mode
+  // Check if flang is in the frontend mode
   auto firstArg = std::find_if(args.begin() + 1, args.end(),
                                [](const char *a) { return a != nullptr; });
   if (firstArg != args.end()) {
@@ -104,7 +105,7 @@
                    << "Valid tools include '-fc1'.\n";
       return 1;
     }
-    // Call flang-new frontend
+    // Call flang frontend
     if (llvm::StringRef(args[1]).starts_with("-fc1")) {
       return executeFC1Tool(args);
     }
diff -Nru llvm-project-19.1.7.src-orig/llvm/runtimes/CMakeLists.txt llvm-project-19.1.7.src-patched/llvm/runtimes/CMakeLists.txt
--- llvm-project-19.1.7.src-orig/llvm/runtimes/CMakeLists.txt	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/llvm/runtimes/CMakeLists.txt	2025-02-26 19:19:40.510811701 -0500
@@ -497,15 +497,15 @@
 
   if("openmp" IN_LIST LLVM_ENABLE_RUNTIMES)
     if (${LLVM_TOOL_FLANG_BUILD})
-      message(STATUS "Configuring build of omp_lib.mod and omp_lib_kinds.mod via flang-new")
-      set(LIBOMP_FORTRAN_MODULES_COMPILER "${CMAKE_BINARY_DIR}/bin/flang-new")
+      message(STATUS "Configuring build of omp_lib.mod and omp_lib_kinds.mod via flang")
+      set(LIBOMP_FORTRAN_MODULES_COMPILER "${CMAKE_BINARY_DIR}/bin/flang")
       set(LIBOMP_MODULES_INSTALL_PATH "${CMAKE_INSTALL_INCLUDEDIR}/flang")
       # TODO: This is a workaround until flang becomes a first-class project
       # in llvm/CMakeList.txt.  Until then, this line ensures that flang-new is
       # built before "openmp" is built as a runtime project.  Besides "flang-new"
       # to build the compiler, we also need to add "module_files" to make sure
       # that all .mod files are also properly build.
-      list(APPEND extra_deps "flang-new" "module_files")
+      list(APPEND extra_deps "flang" "module_files")
     endif()
     foreach(dep opt llvm-link llvm-extract clang clang-offload-packager)
       if(TARGET ${dep})
diff -Nru llvm-project-19.1.7.src-orig/offload/CMakeLists.txt llvm-project-19.1.7.src-patched/offload/CMakeLists.txt
--- llvm-project-19.1.7.src-orig/offload/CMakeLists.txt	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/offload/CMakeLists.txt	2025-02-26 19:21:27.194303485 -0500
@@ -89,9 +89,9 @@
 
   # Check for flang
   if (NOT MSVC)
-    set(OPENMP_TEST_Fortran_COMPILER ${LLVM_RUNTIME_OUTPUT_INTDIR}/flang-new)
+    set(OPENMP_TEST_Fortran_COMPILER ${LLVM_RUNTIME_OUTPUT_INTDIR}/flang)
   else()
-    set(OPENMP_TEST_Fortran_COMPILER ${LLVM_RUNTIME_OUTPUT_INTDIR}/flang-new.exe)
+    set(OPENMP_TEST_Fortran_COMPILER ${LLVM_RUNTIME_OUTPUT_INTDIR}/flang.exe)
   endif()
 
   # Set fortran test compiler if flang is found
diff -Nru llvm-project-19.1.7.src-orig/openmp/CMakeLists.txt llvm-project-19.1.7.src-patched/openmp/CMakeLists.txt
--- llvm-project-19.1.7.src-orig/openmp/CMakeLists.txt	2025-01-14 04:41:02.000000000 -0500
+++ llvm-project-19.1.7.src-patched/openmp/CMakeLists.txt	2025-02-26 19:20:04.154703260 -0500
@@ -69,9 +69,9 @@
 
   # Check for flang
   if (NOT MSVC)
-    set(OPENMP_TEST_Fortran_COMPILER ${LLVM_RUNTIME_OUTPUT_INTDIR}/flang-new)
+    set(OPENMP_TEST_Fortran_COMPILER ${LLVM_RUNTIME_OUTPUT_INTDIR}/flang)
   else()
-    set(OPENMP_TEST_Fortran_COMPILER ${LLVM_RUNTIME_OUTPUT_INTDIR}/flang-new.exe)
+    set(OPENMP_TEST_Fortran_COMPILER ${LLVM_RUNTIME_OUTPUT_INTDIR}/flang.exe)
   endif()
 
   # Set fortran test compiler if flang is found
