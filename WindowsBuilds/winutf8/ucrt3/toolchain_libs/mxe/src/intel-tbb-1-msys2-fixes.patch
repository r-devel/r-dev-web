--- a/include/oneapi/tbb/profiling.h
+++ b/include/oneapi/tbb/profiling.h
@@ -132,7 +132,7 @@
         r1::call_itt_notify((int)t, ptr);
     }
 
-#if (_WIN32||_WIN64) && !__MINGW32__
+#if (_WIN32||_WIN64)
     inline void itt_set_sync_name(void* obj, const wchar_t* name) {
         r1::itt_set_sync_name(obj, name);
     }
--- oneTBB-2022.2.0/cmake/compilers/Clang.cmake.orig	2025-08-05 05:51:05.216478500 +0200
+++ oneTBB-2022.2.0/cmake/compilers/Clang.cmake	2025-08-05 05:52:06.571710300 +0200
@@ -70,7 +70,7 @@
 endif()
 
 # -z switch is not supported on MacOS
-if (NOT APPLE)
+if (NOT APPLE AND NOT MINGW)
     set(TBB_LIB_LINK_FLAGS ${TBB_LIB_LINK_FLAGS} -Wl,-z,relro,-z,now,-z,noexecstack)
 endif()
 
--- oneTBB-2022.2.0/cmake/compilers/Clang.cmake.orig	2025-08-05 06:50:02.426524500 +0200
+++ oneTBB-2022.2.0/cmake/compilers/Clang.cmake	2025-08-05 06:50:13.563552300 +0200
@@ -65,7 +65,7 @@
 # Clang flags to prevent compiler from optimizing out security checks
 set(TBB_COMMON_COMPILE_FLAGS ${TBB_COMMON_COMPILE_FLAGS} -Wformat -Wformat-security -Werror=format-security -fPIC $<$<NOT:$<BOOL:${EMSCRIPTEN}>>:-fstack-protector-strong>)
 
-if (NOT APPLE AND NOT ANDROID_PLATFORM AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
+if (NOT APPLE AND NOT ANDROID_PLATFORM AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64|ARM64")
     set(TBB_LIB_COMPILE_FLAGS ${TBB_LIB_COMPILE_FLAGS} -fstack-clash-protection $<$<NOT:$<BOOL:${EMSCRIPTEN}>>:-fcf-protection=full>)
 endif()
 
--- oneTBB-2022.2.0/cmake/compilers/GNU.cmake.orig	2025-06-30 15:31:02.000000000 +0200
+++ oneTBB-2022.2.0/cmake/compilers/GNU.cmake	2025-08-05 05:54:45.959102300 +0200
@@ -35,7 +35,10 @@
     set(TBB_MMD_FLAG -MMD)
 endif()
 
-
+if(MINGW)
+  set(_tbb_gnu_asm_major_version "2")
+  set(_tbb_gnu_asm_minor_version "43")
+else()
 # Binutils < 2.31.1 do not support the tpause instruction. When compiling with
 # a modern version of GCC (supporting it) but relying on an outdated assembler,
 # will result in an error reporting "no such instruction: tpause".
@@ -62,6 +65,7 @@
     unset(ASSEMBLER_VERSION_LINE_ERR)
     unset(ASSEMBLER_VERSION_LINE)
     message(TRACE "Extracted GNU assembler version: major=${_tbb_gnu_asm_major_version} minor=${_tbb_gnu_asm_minor_version}")
+endif()
 
     math(EXPR _tbb_gnu_asm_version_number  "${_tbb_gnu_asm_major_version} * 1000 + ${_tbb_gnu_asm_minor_version}")
     set(TBB_COMMON_COMPILE_FLAGS ${TBB_COMMON_COMPILE_FLAGS} "-D__TBB_GNU_ASM_VERSION=${_tbb_gnu_asm_version_number}")
