diff -Nru hdf5-1.12.1-orig/bin/make_lib_settings hdf5-1.12.1-patched/bin/make_lib_settings
--- hdf5-1.12.1-orig/bin/make_lib_settings	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/bin/make_lib_settings	2024-08-07 03:59:53.546297107 -0400
@@ -0,0 +1,45 @@
+#!/usr/bin/perl -w
+require 5.003;
+
+print "/* Generated automatically by H5make_libsettings -- do not edit */
+
+
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Copyright by The HDF Group.                                               *
+ * Copyright by the Board of Trustees of the University of Illinois.         *
+ * All rights reserved.                                                      *
+ *                                                                           *
+ * This file is part of HDF5.  The full HDF5 copyright notice, including     *
+ * terms governing use, modification, and redistribution, is contained in    *
+ * the files COPYING and Copyright.html.  COPYING can be found at the root   *
+ * of the source code distribution tree; Copyright.html can be found at the  *
+ * root level of an installed copy of the electronic HDF5 document set and   *
+ * is linked from the top-level documents page.  It can also be found at     *
+ * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
+ * access to either file, you may request a copy from help\@hdfgroup.org.     *
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ * Created:		Dec 26, 2012
+ *			
+ *
+ * Purpose:		This machine-generated source code contains
+ *			information about the library build configuration
+ *
+ * Modifications:
+ *
+ *	DO NOT MAKE MODIFICATIONS TO THIS FILE!
+ *	It was generated by code in `H5make_libsettings.c'.
+ *
+ *-------------------------------------------------------------------------
+ */
+
+char H5libhdf5_settings[]=
+";
+
+while (<>) {
+  chop;
+  print "\t\"$_\\n\"\n";
+}
+
+print ";\n"
diff -Nru hdf5-1.12.1-orig/config/cmake/ConfigureChecks.cmake hdf5-1.12.1-patched/config/cmake/ConfigureChecks.cmake
--- hdf5-1.12.1-orig/config/cmake/ConfigureChecks.cmake	2021-07-01 17:26:38.000000000 -0400
+++ hdf5-1.12.1-patched/config/cmake/ConfigureChecks.cmake	2024-08-07 03:59:53.546297107 -0400
@@ -305,33 +305,7 @@
     endif ()
 endmacro ()
 
-set (PROG_SRC
-    "
-#include <float.h>\n\
-#include <stdio.h>\n\
-#define CHECK_FLOAT128 _SIZEOF___FLOAT128\n\
-#if CHECK_FLOAT128!=0\n\
-#if _HAVE_QUADMATH_H!=0\n\
-#include <quadmath.h>\n\
-#endif\n\
-#ifdef FLT128_DIG\n\
-#define C_FLT128_DIG FLT128_DIG\n\
-#else\n\
-#define C_FLT128_DIG 0\n\
-#endif\n\
-#else\n\
-#define C_FLT128_DIG 0\n\
-#endif\n\
-#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n\
-#define C_LDBL_DIG DECIMAL_DIG\n\
-#else\n\
-#define C_LDBL_DIG LDBL_DIG\n\
-#endif\n\nint main() {\nFILE *pFile = fopen(\"pac_Cconftest.out\",\"w\")\\\;\nfprintf(pFile, \"\\%d\\\;\\%d\\\;\", C_LDBL_DIG, C_FLT128_DIG)\\\;\n\nreturn 0\\\;\n}\n
-     "
-)
-
-C_RUN ("maximum decimal precision for C" ${PROG_SRC} PROG_RES)
-file (READ "${RUN_OUTPUT_PATH_DEFAULT}/pac_Cconftest.out" PROG_OUTPUT4)
+set (PROG_OUTPUT4 "21;33;")
 message (STATUS "Testing maximum decimal precision for C - ${PROG_OUTPUT4}")
 
 # dnl The output from the above program will be:
diff -Nru hdf5-1.12.1-orig/config/cmake/HDF5UseFortran.cmake hdf5-1.12.1-patched/config/cmake/HDF5UseFortran.cmake
--- hdf5-1.12.1-orig/config/cmake/HDF5UseFortran.cmake	2021-07-01 17:26:38.000000000 -0400
+++ hdf5-1.12.1-patched/config/cmake/HDF5UseFortran.cmake	2024-08-07 05:08:28.786272038 -0400
@@ -31,7 +31,7 @@
   set (RETURN_VAR "${SOURCE_CODE}")
 endmacro ()
 
-set (RUN_OUTPUT_PATH_DEFAULT ${CMAKE_BINARY_DIR})
+set (RUN_OUTPUT_PATH_DEFAULT ${HDF5_SOURCE_DIR})
 if (NOT CMAKE_VERSION VERSION_LESS "3.14.0")
   if (HDF5_REQUIRED_LIBRARIES)
     set (CMAKE_REQUIRED_LIBRARIES "${HDF5_REQUIRED_LIBRARIES}")
diff -Nru hdf5-1.12.1-orig/fortran/src/CMakeLists.txt hdf5-1.12.1-patched/fortran/src/CMakeLists.txt
--- hdf5-1.12.1-orig/fortran/src/CMakeLists.txt	2021-07-01 17:26:38.000000000 -0400
+++ hdf5-1.12.1-patched/fortran/src/CMakeLists.txt	2024-08-07 12:29:43.148460154 -0400
@@ -75,7 +75,11 @@
 
 add_custom_command (TARGET H5match_types POST_BUILD
     BYPRODUCTS ${HDF5_F90_BINARY_DIR}/H5f90i_gen.h ${HDF5_F90_BINARY_DIR}/H5fortran_types.F90
-    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:H5match_types>
+   # COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:H5match_types>
+    COMMAND    ${CMAKE_COMMAND}
+    ARGS       -E copy_if_different ${HDF5_F90_SRC_SOURCE_DIR}/H5f90i_gen.h ${HDF5_F90_BINARY_DIR}/H5f90i_gen.h
+    COMMAND    ${CMAKE_COMMAND}
+    ARGS       -E copy_if_different ${HDF5_F90_SRC_SOURCE_DIR}/H5fortran_types.F90 ${HDF5_F90_BINARY_DIR}/H5fortran_types.F90
     WORKING_DIRECTORY ${HDF5_F90_BINARY_DIR}
     DEPENDS H5match_types
 )
@@ -228,7 +232,9 @@
 )
 add_custom_command (TARGET H5_buildiface POST_BUILD
     BYPRODUCTS ${HDF5_F90_BINARY_DIR}/H5_gen.F90
-    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:H5_buildiface>
+#    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:H5_buildiface>
+    COMMAND    ${CMAKE_COMMAND}
+    ARGS       -E copy_if_different ${HDF5_F90_SRC_SOURCE_DIR}/H5_gen.F90 ${HDF5_F90_BINARY_DIR}/H5_gen.F90
     WORKING_DIRECTORY ${HDF5_F90_BINARY_DIR}
     DEPENDS H5_buildiface ${f90_F_GEN_SOURCES}
     COMMENT "Generating the H5_gen.F90 file"
diff -Nru hdf5-1.12.1-orig/fortran/src/H5f90i_gen.h.mingw64 hdf5-1.12.1-patched/fortran/src/H5f90i_gen.h.mingw64
--- hdf5-1.12.1-orig/fortran/src/H5f90i_gen.h.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/fortran/src/H5f90i_gen.h.mingw64	2024-08-07 05:23:36.000000000 -0400
@@ -0,0 +1,50 @@
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Copyright by The HDF Group.                                               *
+ * Copyright by the Board of Trustees of the University of Illinois.         *
+ * All rights reserved.                                                      *
+ *                                                                           *
+ * This file is part of HDF5.  The full HDF5 copyright notice, including     *
+ * terms governing use, modification, and redistribution, is contained in    *
+ * the COPYING file, which can be found at the root of the source code       *
+ * distribution tree, or in https://www.hdfgroup.org/licenses.               *
+ * If you do not have access to either file, you may request a copy from     *
+ * help@hdfgroup.org.                                                        *
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
+
+
+#ifndef H5f90i_gen_H
+#define H5f90i_gen_H
+
+/* This file is automatically generated by H5match_types.c at build time. */
+
+#include "H5public.h"
+
+#define c_int_1 char
+#define c_int_2 short
+#define c_int_4 long
+#define c_int_8 long long
+#define c_size_t_8 size_t
+#define c_time_t_8 time_t
+#define c_hsize_t_8 hsize_t
+typedef struct {c_int_8 a; c_int_8 b;} c_int_16;
+#define c_float_4 float
+#define c_float_8 double
+#define c_float_10 long double
+#define c_float_16 __float128
+
+typedef c_int_8 haddr_t_f;
+typedef c_hsize_t_8 hsize_t_f;
+typedef c_int_8 hssize_t_f;
+typedef c_int_8 off_t_f;
+typedef c_size_t_8 size_t_f;
+typedef c_time_t_8 time_t_f;
+typedef c_int_4 int_f;
+typedef c_float_4 real_C_FLOAT_f;
+typedef c_float_8 real_C_DOUBLE_f;
+typedef c_float_10 real_C_LONG_DOUBLE_f;
+typedef c_float_16 real_C_FLOAT128_f;
+typedef c_int_8 hid_t_f;
+typedef c_float_4 real_f;
+typedef c_float_8 double_f;
+
+#endif /* _H5f90i_gen_H */
diff -Nru hdf5-1.12.1-orig/fortran/src/H5fortran_types.F90.mingw64 hdf5-1.12.1-patched/fortran/src/H5fortran_types.F90.mingw64
--- hdf5-1.12.1-orig/fortran/src/H5fortran_types.F90.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/fortran/src/H5fortran_types.F90.mingw64	2024-08-07 05:23:36.000000000 -0400
@@ -0,0 +1,43 @@
+! * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
+!   Copyright by The HDF Group.                                               *
+!   Copyright by the Board of Trustees of the University of Illinois.         *
+!   All rights reserved.                                                      *
+!                                                                             *
+!   This file is part of HDF5.  The full HDF5 copyright notice, including     *
+!   terms governing use, modification, and redistribution, is contained in    *
+!   the COPYING file, which can be found at the root of the source code       *
+!   distribution tree, or in https://www.hdfgroup.org/licenses.               *
+!   If you do not have access to either file, you may request a copy from     *
+!   help@hdfgroup.org.                                                        *
+! * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+!
+!
+! This file is automatically generated by H5match_types.c and contains HDF5 Fortran90 type definitions.
+!
+       MODULE H5FORTRAN_TYPES
+         USE ISO_C_BINDING
+         !
+         !  HDF5 integers
+         !
+        INTEGER, PARAMETER :: H5_FORTRAN_NUM_INTEGER_KINDS = 5
+        INTEGER, PARAMETER :: HADDR_T = 8
+        INTEGER, PARAMETER :: HSIZE_T = 8
+        INTEGER, PARAMETER :: HSSIZE_T = 8
+        INTEGER, PARAMETER :: OFF_T = 8
+        INTEGER, PARAMETER :: SIZE_T = 8
+        INTEGER, PARAMETER :: TIME_T = 8
+        INTEGER, PARAMETER :: Fortran_INTEGER = 4
+        INTEGER, DIMENSION(1:5), PARAMETER :: Fortran_INTEGER_AVAIL_KINDS = (/1,2,4,8,16/)
+        INTEGER, PARAMETER :: Fortran_REAL_C_FLOAT = 4
+        INTEGER, PARAMETER :: Fortran_REAL_C_DOUBLE = 8
+        INTEGER, PARAMETER :: Fortran_REAL_C_LONG_DOUBLE = 10
+        INTEGER, PARAMETER :: Fortran_REAL_C_FLOAT128 = 16
+        INTEGER, PARAMETER :: HID_T = 8
+        INTEGER, PARAMETER :: Fortran_REAL = C_FLOAT
+        INTEGER, PARAMETER :: Fortran_DOUBLE = C_DOUBLE
+        INTEGER, PARAMETER :: H5R_DSET_REG_REF_BUF_SIZE_F = 12
+        INTEGER, PARAMETER :: H5O_MAX_TOKEN_SIZE_F = 16
+
+        INTEGER(SIZE_T), PARAMETER :: OBJECT_NAMELEN_DEFAULT_F = -1
+
+        END MODULE H5FORTRAN_TYPES
diff -Nru hdf5-1.12.1-orig/fortran/src/H5_gen.F90.mingw64 hdf5-1.12.1-patched/fortran/src/H5_gen.F90.mingw64
--- hdf5-1.12.1-orig/fortran/src/H5_gen.F90.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/fortran/src/H5_gen.F90.mingw64	2024-08-07 05:23:38.000000000 -0400
@@ -0,0 +1,7725 @@
+!****h* ROBODoc/H5_gen.F90
+!
+! NAME
+!  H5_gen
+! 
+! PURPOSE
+!  This module is generated at build by H5_buildiface.F90 to handle all the
+!  detected KINDs for APIs being passed INTEGERs, REALs and CHARACTERs. Currently 
+!  these are H5A, H5D and H5P APIs
+!
+! COPYRIGHT
+! * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+!   Copyright by The HDF Group.                                               *
+!   All rights reserved.                                                      *
+!                                                                             *
+!   This file is part of HDF5.  The full HDF5 copyright notice, including     *
+!   terms governing use, modification, and redistribution, is contained in    *
+!   the COPYING file, which can be found at the root of the source code       *
+!   distribution tree, or in https://www.hdfgroup.org/licenses.               *
+!   If you do not have access to either file, you may request a copy from     *
+!   help@hdfgroup.org.                                                        *
+! * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+!
+! AUTHOR
+!  H5_buildiface.F90
+!
+!*****
+
+MODULE H5_GEN
+  USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR, C_LOC
+  USE H5GLOBAL
+  USE H5A
+  USE H5D
+  USE H5P
+  IMPLICIT NONE
+  PRIVATE h5awrite_rkind_4_rank_0
+  PRIVATE h5awrite_rkind_4_rank_1
+  PRIVATE h5awrite_rkind_4_rank_2
+  PRIVATE h5awrite_rkind_4_rank_3
+  PRIVATE h5awrite_rkind_4_rank_4
+  PRIVATE h5awrite_rkind_4_rank_5
+  PRIVATE h5awrite_rkind_4_rank_6
+  PRIVATE h5awrite_rkind_4_rank_7
+  PRIVATE h5awrite_rkind_8_rank_0
+  PRIVATE h5awrite_rkind_8_rank_1
+  PRIVATE h5awrite_rkind_8_rank_2
+  PRIVATE h5awrite_rkind_8_rank_3
+  PRIVATE h5awrite_rkind_8_rank_4
+  PRIVATE h5awrite_rkind_8_rank_5
+  PRIVATE h5awrite_rkind_8_rank_6
+  PRIVATE h5awrite_rkind_8_rank_7
+  PRIVATE h5awrite_rkind_10_rank_0
+  PRIVATE h5awrite_rkind_10_rank_1
+  PRIVATE h5awrite_rkind_10_rank_2
+  PRIVATE h5awrite_rkind_10_rank_3
+  PRIVATE h5awrite_rkind_10_rank_4
+  PRIVATE h5awrite_rkind_10_rank_5
+  PRIVATE h5awrite_rkind_10_rank_6
+  PRIVATE h5awrite_rkind_10_rank_7
+  PRIVATE h5awrite_rkind_16_rank_0
+  PRIVATE h5awrite_rkind_16_rank_1
+  PRIVATE h5awrite_rkind_16_rank_2
+  PRIVATE h5awrite_rkind_16_rank_3
+  PRIVATE h5awrite_rkind_16_rank_4
+  PRIVATE h5awrite_rkind_16_rank_5
+  PRIVATE h5awrite_rkind_16_rank_6
+  PRIVATE h5awrite_rkind_16_rank_7
+  PRIVATE h5awrite_ikind_1_rank_0
+  PRIVATE h5awrite_ikind_1_rank_1
+  PRIVATE h5awrite_ikind_1_rank_2
+  PRIVATE h5awrite_ikind_1_rank_3
+  PRIVATE h5awrite_ikind_1_rank_4
+  PRIVATE h5awrite_ikind_1_rank_5
+  PRIVATE h5awrite_ikind_1_rank_6
+  PRIVATE h5awrite_ikind_1_rank_7
+  PRIVATE h5awrite_ikind_2_rank_0
+  PRIVATE h5awrite_ikind_2_rank_1
+  PRIVATE h5awrite_ikind_2_rank_2
+  PRIVATE h5awrite_ikind_2_rank_3
+  PRIVATE h5awrite_ikind_2_rank_4
+  PRIVATE h5awrite_ikind_2_rank_5
+  PRIVATE h5awrite_ikind_2_rank_6
+  PRIVATE h5awrite_ikind_2_rank_7
+  PRIVATE h5awrite_ikind_4_rank_0
+  PRIVATE h5awrite_ikind_4_rank_1
+  PRIVATE h5awrite_ikind_4_rank_2
+  PRIVATE h5awrite_ikind_4_rank_3
+  PRIVATE h5awrite_ikind_4_rank_4
+  PRIVATE h5awrite_ikind_4_rank_5
+  PRIVATE h5awrite_ikind_4_rank_6
+  PRIVATE h5awrite_ikind_4_rank_7
+  PRIVATE h5awrite_ikind_8_rank_0
+  PRIVATE h5awrite_ikind_8_rank_1
+  PRIVATE h5awrite_ikind_8_rank_2
+  PRIVATE h5awrite_ikind_8_rank_3
+  PRIVATE h5awrite_ikind_8_rank_4
+  PRIVATE h5awrite_ikind_8_rank_5
+  PRIVATE h5awrite_ikind_8_rank_6
+  PRIVATE h5awrite_ikind_8_rank_7
+  PRIVATE h5awrite_ikind_16_rank_0
+  PRIVATE h5awrite_ikind_16_rank_1
+  PRIVATE h5awrite_ikind_16_rank_2
+  PRIVATE h5awrite_ikind_16_rank_3
+  PRIVATE h5awrite_ikind_16_rank_4
+  PRIVATE h5awrite_ikind_16_rank_5
+  PRIVATE h5awrite_ikind_16_rank_6
+  PRIVATE h5awrite_ikind_16_rank_7
+  PRIVATE h5awrite_ckind_rank_1
+  PRIVATE h5awrite_ckind_rank_2
+  PRIVATE h5awrite_ckind_rank_3
+  PRIVATE h5awrite_ckind_rank_4
+  PRIVATE h5awrite_ckind_rank_5
+  PRIVATE h5awrite_ckind_rank_6
+  PRIVATE h5awrite_ckind_rank_7
+  PRIVATE h5aread_rkind_4_rank_0
+  PRIVATE h5aread_rkind_4_rank_1
+  PRIVATE h5aread_rkind_4_rank_2
+  PRIVATE h5aread_rkind_4_rank_3
+  PRIVATE h5aread_rkind_4_rank_4
+  PRIVATE h5aread_rkind_4_rank_5
+  PRIVATE h5aread_rkind_4_rank_6
+  PRIVATE h5aread_rkind_4_rank_7
+  PRIVATE h5aread_rkind_8_rank_0
+  PRIVATE h5aread_rkind_8_rank_1
+  PRIVATE h5aread_rkind_8_rank_2
+  PRIVATE h5aread_rkind_8_rank_3
+  PRIVATE h5aread_rkind_8_rank_4
+  PRIVATE h5aread_rkind_8_rank_5
+  PRIVATE h5aread_rkind_8_rank_6
+  PRIVATE h5aread_rkind_8_rank_7
+  PRIVATE h5aread_rkind_10_rank_0
+  PRIVATE h5aread_rkind_10_rank_1
+  PRIVATE h5aread_rkind_10_rank_2
+  PRIVATE h5aread_rkind_10_rank_3
+  PRIVATE h5aread_rkind_10_rank_4
+  PRIVATE h5aread_rkind_10_rank_5
+  PRIVATE h5aread_rkind_10_rank_6
+  PRIVATE h5aread_rkind_10_rank_7
+  PRIVATE h5aread_rkind_16_rank_0
+  PRIVATE h5aread_rkind_16_rank_1
+  PRIVATE h5aread_rkind_16_rank_2
+  PRIVATE h5aread_rkind_16_rank_3
+  PRIVATE h5aread_rkind_16_rank_4
+  PRIVATE h5aread_rkind_16_rank_5
+  PRIVATE h5aread_rkind_16_rank_6
+  PRIVATE h5aread_rkind_16_rank_7
+  PRIVATE h5aread_ikind_1_rank_0
+  PRIVATE h5aread_ikind_1_rank_1
+  PRIVATE h5aread_ikind_1_rank_2
+  PRIVATE h5aread_ikind_1_rank_3
+  PRIVATE h5aread_ikind_1_rank_4
+  PRIVATE h5aread_ikind_1_rank_5
+  PRIVATE h5aread_ikind_1_rank_6
+  PRIVATE h5aread_ikind_1_rank_7
+  PRIVATE h5aread_ikind_2_rank_0
+  PRIVATE h5aread_ikind_2_rank_1
+  PRIVATE h5aread_ikind_2_rank_2
+  PRIVATE h5aread_ikind_2_rank_3
+  PRIVATE h5aread_ikind_2_rank_4
+  PRIVATE h5aread_ikind_2_rank_5
+  PRIVATE h5aread_ikind_2_rank_6
+  PRIVATE h5aread_ikind_2_rank_7
+  PRIVATE h5aread_ikind_4_rank_0
+  PRIVATE h5aread_ikind_4_rank_1
+  PRIVATE h5aread_ikind_4_rank_2
+  PRIVATE h5aread_ikind_4_rank_3
+  PRIVATE h5aread_ikind_4_rank_4
+  PRIVATE h5aread_ikind_4_rank_5
+  PRIVATE h5aread_ikind_4_rank_6
+  PRIVATE h5aread_ikind_4_rank_7
+  PRIVATE h5aread_ikind_8_rank_0
+  PRIVATE h5aread_ikind_8_rank_1
+  PRIVATE h5aread_ikind_8_rank_2
+  PRIVATE h5aread_ikind_8_rank_3
+  PRIVATE h5aread_ikind_8_rank_4
+  PRIVATE h5aread_ikind_8_rank_5
+  PRIVATE h5aread_ikind_8_rank_6
+  PRIVATE h5aread_ikind_8_rank_7
+  PRIVATE h5aread_ikind_16_rank_0
+  PRIVATE h5aread_ikind_16_rank_1
+  PRIVATE h5aread_ikind_16_rank_2
+  PRIVATE h5aread_ikind_16_rank_3
+  PRIVATE h5aread_ikind_16_rank_4
+  PRIVATE h5aread_ikind_16_rank_5
+  PRIVATE h5aread_ikind_16_rank_6
+  PRIVATE h5aread_ikind_16_rank_7
+  PRIVATE h5aread_ckind_rank_1
+  PRIVATE h5aread_ckind_rank_2
+  PRIVATE h5aread_ckind_rank_3
+  PRIVATE h5aread_ckind_rank_4
+  PRIVATE h5aread_ckind_rank_5
+  PRIVATE h5aread_ckind_rank_6
+  PRIVATE h5aread_ckind_rank_7
+  PRIVATE h5dwrite_rkind_4_rank_0
+  PRIVATE h5dwrite_rkind_4_rank_1
+  PRIVATE h5dwrite_rkind_4_rank_2
+  PRIVATE h5dwrite_rkind_4_rank_3
+  PRIVATE h5dwrite_rkind_4_rank_4
+  PRIVATE h5dwrite_rkind_4_rank_5
+  PRIVATE h5dwrite_rkind_4_rank_6
+  PRIVATE h5dwrite_rkind_4_rank_7
+  PRIVATE h5dwrite_rkind_8_rank_0
+  PRIVATE h5dwrite_rkind_8_rank_1
+  PRIVATE h5dwrite_rkind_8_rank_2
+  PRIVATE h5dwrite_rkind_8_rank_3
+  PRIVATE h5dwrite_rkind_8_rank_4
+  PRIVATE h5dwrite_rkind_8_rank_5
+  PRIVATE h5dwrite_rkind_8_rank_6
+  PRIVATE h5dwrite_rkind_8_rank_7
+  PRIVATE h5dwrite_rkind_10_rank_0
+  PRIVATE h5dwrite_rkind_10_rank_1
+  PRIVATE h5dwrite_rkind_10_rank_2
+  PRIVATE h5dwrite_rkind_10_rank_3
+  PRIVATE h5dwrite_rkind_10_rank_4
+  PRIVATE h5dwrite_rkind_10_rank_5
+  PRIVATE h5dwrite_rkind_10_rank_6
+  PRIVATE h5dwrite_rkind_10_rank_7
+  PRIVATE h5dwrite_rkind_16_rank_0
+  PRIVATE h5dwrite_rkind_16_rank_1
+  PRIVATE h5dwrite_rkind_16_rank_2
+  PRIVATE h5dwrite_rkind_16_rank_3
+  PRIVATE h5dwrite_rkind_16_rank_4
+  PRIVATE h5dwrite_rkind_16_rank_5
+  PRIVATE h5dwrite_rkind_16_rank_6
+  PRIVATE h5dwrite_rkind_16_rank_7
+  PRIVATE h5dwrite_ikind_1_rank_0
+  PRIVATE h5dwrite_ikind_1_rank_1
+  PRIVATE h5dwrite_ikind_1_rank_2
+  PRIVATE h5dwrite_ikind_1_rank_3
+  PRIVATE h5dwrite_ikind_1_rank_4
+  PRIVATE h5dwrite_ikind_1_rank_5
+  PRIVATE h5dwrite_ikind_1_rank_6
+  PRIVATE h5dwrite_ikind_1_rank_7
+  PRIVATE h5dwrite_ikind_2_rank_0
+  PRIVATE h5dwrite_ikind_2_rank_1
+  PRIVATE h5dwrite_ikind_2_rank_2
+  PRIVATE h5dwrite_ikind_2_rank_3
+  PRIVATE h5dwrite_ikind_2_rank_4
+  PRIVATE h5dwrite_ikind_2_rank_5
+  PRIVATE h5dwrite_ikind_2_rank_6
+  PRIVATE h5dwrite_ikind_2_rank_7
+  PRIVATE h5dwrite_ikind_4_rank_0
+  PRIVATE h5dwrite_ikind_4_rank_1
+  PRIVATE h5dwrite_ikind_4_rank_2
+  PRIVATE h5dwrite_ikind_4_rank_3
+  PRIVATE h5dwrite_ikind_4_rank_4
+  PRIVATE h5dwrite_ikind_4_rank_5
+  PRIVATE h5dwrite_ikind_4_rank_6
+  PRIVATE h5dwrite_ikind_4_rank_7
+  PRIVATE h5dwrite_ikind_8_rank_0
+  PRIVATE h5dwrite_ikind_8_rank_1
+  PRIVATE h5dwrite_ikind_8_rank_2
+  PRIVATE h5dwrite_ikind_8_rank_3
+  PRIVATE h5dwrite_ikind_8_rank_4
+  PRIVATE h5dwrite_ikind_8_rank_5
+  PRIVATE h5dwrite_ikind_8_rank_6
+  PRIVATE h5dwrite_ikind_8_rank_7
+  PRIVATE h5dwrite_ikind_16_rank_0
+  PRIVATE h5dwrite_ikind_16_rank_1
+  PRIVATE h5dwrite_ikind_16_rank_2
+  PRIVATE h5dwrite_ikind_16_rank_3
+  PRIVATE h5dwrite_ikind_16_rank_4
+  PRIVATE h5dwrite_ikind_16_rank_5
+  PRIVATE h5dwrite_ikind_16_rank_6
+  PRIVATE h5dwrite_ikind_16_rank_7
+  PRIVATE h5dwrite_ckind_rank_1
+  PRIVATE h5dwrite_ckind_rank_2
+  PRIVATE h5dwrite_ckind_rank_3
+  PRIVATE h5dwrite_ckind_rank_4
+  PRIVATE h5dwrite_ckind_rank_5
+  PRIVATE h5dwrite_ckind_rank_6
+  PRIVATE h5dwrite_ckind_rank_7
+  PRIVATE h5dread_rkind_4_rank_0
+  PRIVATE h5dread_rkind_4_rank_1
+  PRIVATE h5dread_rkind_4_rank_2
+  PRIVATE h5dread_rkind_4_rank_3
+  PRIVATE h5dread_rkind_4_rank_4
+  PRIVATE h5dread_rkind_4_rank_5
+  PRIVATE h5dread_rkind_4_rank_6
+  PRIVATE h5dread_rkind_4_rank_7
+  PRIVATE h5dread_rkind_8_rank_0
+  PRIVATE h5dread_rkind_8_rank_1
+  PRIVATE h5dread_rkind_8_rank_2
+  PRIVATE h5dread_rkind_8_rank_3
+  PRIVATE h5dread_rkind_8_rank_4
+  PRIVATE h5dread_rkind_8_rank_5
+  PRIVATE h5dread_rkind_8_rank_6
+  PRIVATE h5dread_rkind_8_rank_7
+  PRIVATE h5dread_rkind_10_rank_0
+  PRIVATE h5dread_rkind_10_rank_1
+  PRIVATE h5dread_rkind_10_rank_2
+  PRIVATE h5dread_rkind_10_rank_3
+  PRIVATE h5dread_rkind_10_rank_4
+  PRIVATE h5dread_rkind_10_rank_5
+  PRIVATE h5dread_rkind_10_rank_6
+  PRIVATE h5dread_rkind_10_rank_7
+  PRIVATE h5dread_rkind_16_rank_0
+  PRIVATE h5dread_rkind_16_rank_1
+  PRIVATE h5dread_rkind_16_rank_2
+  PRIVATE h5dread_rkind_16_rank_3
+  PRIVATE h5dread_rkind_16_rank_4
+  PRIVATE h5dread_rkind_16_rank_5
+  PRIVATE h5dread_rkind_16_rank_6
+  PRIVATE h5dread_rkind_16_rank_7
+  PRIVATE h5dread_ikind_1_rank_0
+  PRIVATE h5dread_ikind_1_rank_1
+  PRIVATE h5dread_ikind_1_rank_2
+  PRIVATE h5dread_ikind_1_rank_3
+  PRIVATE h5dread_ikind_1_rank_4
+  PRIVATE h5dread_ikind_1_rank_5
+  PRIVATE h5dread_ikind_1_rank_6
+  PRIVATE h5dread_ikind_1_rank_7
+  PRIVATE h5dread_ikind_2_rank_0
+  PRIVATE h5dread_ikind_2_rank_1
+  PRIVATE h5dread_ikind_2_rank_2
+  PRIVATE h5dread_ikind_2_rank_3
+  PRIVATE h5dread_ikind_2_rank_4
+  PRIVATE h5dread_ikind_2_rank_5
+  PRIVATE h5dread_ikind_2_rank_6
+  PRIVATE h5dread_ikind_2_rank_7
+  PRIVATE h5dread_ikind_4_rank_0
+  PRIVATE h5dread_ikind_4_rank_1
+  PRIVATE h5dread_ikind_4_rank_2
+  PRIVATE h5dread_ikind_4_rank_3
+  PRIVATE h5dread_ikind_4_rank_4
+  PRIVATE h5dread_ikind_4_rank_5
+  PRIVATE h5dread_ikind_4_rank_6
+  PRIVATE h5dread_ikind_4_rank_7
+  PRIVATE h5dread_ikind_8_rank_0
+  PRIVATE h5dread_ikind_8_rank_1
+  PRIVATE h5dread_ikind_8_rank_2
+  PRIVATE h5dread_ikind_8_rank_3
+  PRIVATE h5dread_ikind_8_rank_4
+  PRIVATE h5dread_ikind_8_rank_5
+  PRIVATE h5dread_ikind_8_rank_6
+  PRIVATE h5dread_ikind_8_rank_7
+  PRIVATE h5dread_ikind_16_rank_0
+  PRIVATE h5dread_ikind_16_rank_1
+  PRIVATE h5dread_ikind_16_rank_2
+  PRIVATE h5dread_ikind_16_rank_3
+  PRIVATE h5dread_ikind_16_rank_4
+  PRIVATE h5dread_ikind_16_rank_5
+  PRIVATE h5dread_ikind_16_rank_6
+  PRIVATE h5dread_ikind_16_rank_7
+  PRIVATE h5dread_ckind_rank_1
+  PRIVATE h5dread_ckind_rank_2
+  PRIVATE h5dread_ckind_rank_3
+  PRIVATE h5dread_ckind_rank_4
+  PRIVATE h5dread_ckind_rank_5
+  PRIVATE h5dread_ckind_rank_6
+  PRIVATE h5dread_ckind_rank_7
+  PRIVATE h5pset_fill_value_kind_4
+  PRIVATE h5pset_fill_value_kind_8
+  PRIVATE h5pset_fill_value_kind_10
+  PRIVATE h5pset_fill_value_kind_16
+  PRIVATE h5pget_fill_value_kind_4
+  PRIVATE h5pget_fill_value_kind_8
+  PRIVATE h5pget_fill_value_kind_10
+  PRIVATE h5pget_fill_value_kind_16
+  PRIVATE h5pset_kind_4
+  PRIVATE h5pset_kind_8
+  PRIVATE h5pset_kind_10
+  PRIVATE h5pset_kind_16
+  PRIVATE h5pget_kind_4
+  PRIVATE h5pget_kind_8
+  PRIVATE h5pget_kind_10
+  PRIVATE h5pget_kind_16
+  PRIVATE h5pregister_kind_4
+  PRIVATE h5pregister_kind_8
+  PRIVATE h5pregister_kind_10
+  PRIVATE h5pregister_kind_16
+  PRIVATE h5pinsert_kind_4
+  PRIVATE h5pinsert_kind_8
+  PRIVATE h5pinsert_kind_10
+  PRIVATE h5pinsert_kind_16
+  INTERFACE h5awrite_f
+     MODULE PROCEDURE h5awrite_rkind_4_rank_0
+     MODULE PROCEDURE h5awrite_rkind_4_rank_1
+     MODULE PROCEDURE h5awrite_rkind_4_rank_2
+     MODULE PROCEDURE h5awrite_rkind_4_rank_3
+     MODULE PROCEDURE h5awrite_rkind_4_rank_4
+     MODULE PROCEDURE h5awrite_rkind_4_rank_5
+     MODULE PROCEDURE h5awrite_rkind_4_rank_6
+     MODULE PROCEDURE h5awrite_rkind_4_rank_7
+     MODULE PROCEDURE h5awrite_rkind_8_rank_0
+     MODULE PROCEDURE h5awrite_rkind_8_rank_1
+     MODULE PROCEDURE h5awrite_rkind_8_rank_2
+     MODULE PROCEDURE h5awrite_rkind_8_rank_3
+     MODULE PROCEDURE h5awrite_rkind_8_rank_4
+     MODULE PROCEDURE h5awrite_rkind_8_rank_5
+     MODULE PROCEDURE h5awrite_rkind_8_rank_6
+     MODULE PROCEDURE h5awrite_rkind_8_rank_7
+     MODULE PROCEDURE h5awrite_rkind_10_rank_0
+     MODULE PROCEDURE h5awrite_rkind_10_rank_1
+     MODULE PROCEDURE h5awrite_rkind_10_rank_2
+     MODULE PROCEDURE h5awrite_rkind_10_rank_3
+     MODULE PROCEDURE h5awrite_rkind_10_rank_4
+     MODULE PROCEDURE h5awrite_rkind_10_rank_5
+     MODULE PROCEDURE h5awrite_rkind_10_rank_6
+     MODULE PROCEDURE h5awrite_rkind_10_rank_7
+     MODULE PROCEDURE h5awrite_rkind_16_rank_0
+     MODULE PROCEDURE h5awrite_rkind_16_rank_1
+     MODULE PROCEDURE h5awrite_rkind_16_rank_2
+     MODULE PROCEDURE h5awrite_rkind_16_rank_3
+     MODULE PROCEDURE h5awrite_rkind_16_rank_4
+     MODULE PROCEDURE h5awrite_rkind_16_rank_5
+     MODULE PROCEDURE h5awrite_rkind_16_rank_6
+     MODULE PROCEDURE h5awrite_rkind_16_rank_7
+     MODULE PROCEDURE h5awrite_ikind_1_rank_0
+     MODULE PROCEDURE h5awrite_ikind_1_rank_1
+     MODULE PROCEDURE h5awrite_ikind_1_rank_2
+     MODULE PROCEDURE h5awrite_ikind_1_rank_3
+     MODULE PROCEDURE h5awrite_ikind_1_rank_4
+     MODULE PROCEDURE h5awrite_ikind_1_rank_5
+     MODULE PROCEDURE h5awrite_ikind_1_rank_6
+     MODULE PROCEDURE h5awrite_ikind_1_rank_7
+     MODULE PROCEDURE h5awrite_ikind_2_rank_0
+     MODULE PROCEDURE h5awrite_ikind_2_rank_1
+     MODULE PROCEDURE h5awrite_ikind_2_rank_2
+     MODULE PROCEDURE h5awrite_ikind_2_rank_3
+     MODULE PROCEDURE h5awrite_ikind_2_rank_4
+     MODULE PROCEDURE h5awrite_ikind_2_rank_5
+     MODULE PROCEDURE h5awrite_ikind_2_rank_6
+     MODULE PROCEDURE h5awrite_ikind_2_rank_7
+     MODULE PROCEDURE h5awrite_ikind_4_rank_0
+     MODULE PROCEDURE h5awrite_ikind_4_rank_1
+     MODULE PROCEDURE h5awrite_ikind_4_rank_2
+     MODULE PROCEDURE h5awrite_ikind_4_rank_3
+     MODULE PROCEDURE h5awrite_ikind_4_rank_4
+     MODULE PROCEDURE h5awrite_ikind_4_rank_5
+     MODULE PROCEDURE h5awrite_ikind_4_rank_6
+     MODULE PROCEDURE h5awrite_ikind_4_rank_7
+     MODULE PROCEDURE h5awrite_ikind_8_rank_0
+     MODULE PROCEDURE h5awrite_ikind_8_rank_1
+     MODULE PROCEDURE h5awrite_ikind_8_rank_2
+     MODULE PROCEDURE h5awrite_ikind_8_rank_3
+     MODULE PROCEDURE h5awrite_ikind_8_rank_4
+     MODULE PROCEDURE h5awrite_ikind_8_rank_5
+     MODULE PROCEDURE h5awrite_ikind_8_rank_6
+     MODULE PROCEDURE h5awrite_ikind_8_rank_7
+     MODULE PROCEDURE h5awrite_ikind_16_rank_0
+     MODULE PROCEDURE h5awrite_ikind_16_rank_1
+     MODULE PROCEDURE h5awrite_ikind_16_rank_2
+     MODULE PROCEDURE h5awrite_ikind_16_rank_3
+     MODULE PROCEDURE h5awrite_ikind_16_rank_4
+     MODULE PROCEDURE h5awrite_ikind_16_rank_5
+     MODULE PROCEDURE h5awrite_ikind_16_rank_6
+     MODULE PROCEDURE h5awrite_ikind_16_rank_7
+     MODULE PROCEDURE h5awrite_ckind_rank_1
+     MODULE PROCEDURE h5awrite_ckind_rank_2
+     MODULE PROCEDURE h5awrite_ckind_rank_3
+     MODULE PROCEDURE h5awrite_ckind_rank_4
+     MODULE PROCEDURE h5awrite_ckind_rank_5
+     MODULE PROCEDURE h5awrite_ckind_rank_6
+     MODULE PROCEDURE h5awrite_ckind_rank_7
+  END INTERFACE
+  INTERFACE h5aread_f
+     MODULE PROCEDURE h5aread_rkind_4_rank_0
+     MODULE PROCEDURE h5aread_rkind_4_rank_1
+     MODULE PROCEDURE h5aread_rkind_4_rank_2
+     MODULE PROCEDURE h5aread_rkind_4_rank_3
+     MODULE PROCEDURE h5aread_rkind_4_rank_4
+     MODULE PROCEDURE h5aread_rkind_4_rank_5
+     MODULE PROCEDURE h5aread_rkind_4_rank_6
+     MODULE PROCEDURE h5aread_rkind_4_rank_7
+     MODULE PROCEDURE h5aread_rkind_8_rank_0
+     MODULE PROCEDURE h5aread_rkind_8_rank_1
+     MODULE PROCEDURE h5aread_rkind_8_rank_2
+     MODULE PROCEDURE h5aread_rkind_8_rank_3
+     MODULE PROCEDURE h5aread_rkind_8_rank_4
+     MODULE PROCEDURE h5aread_rkind_8_rank_5
+     MODULE PROCEDURE h5aread_rkind_8_rank_6
+     MODULE PROCEDURE h5aread_rkind_8_rank_7
+     MODULE PROCEDURE h5aread_rkind_10_rank_0
+     MODULE PROCEDURE h5aread_rkind_10_rank_1
+     MODULE PROCEDURE h5aread_rkind_10_rank_2
+     MODULE PROCEDURE h5aread_rkind_10_rank_3
+     MODULE PROCEDURE h5aread_rkind_10_rank_4
+     MODULE PROCEDURE h5aread_rkind_10_rank_5
+     MODULE PROCEDURE h5aread_rkind_10_rank_6
+     MODULE PROCEDURE h5aread_rkind_10_rank_7
+     MODULE PROCEDURE h5aread_rkind_16_rank_0
+     MODULE PROCEDURE h5aread_rkind_16_rank_1
+     MODULE PROCEDURE h5aread_rkind_16_rank_2
+     MODULE PROCEDURE h5aread_rkind_16_rank_3
+     MODULE PROCEDURE h5aread_rkind_16_rank_4
+     MODULE PROCEDURE h5aread_rkind_16_rank_5
+     MODULE PROCEDURE h5aread_rkind_16_rank_6
+     MODULE PROCEDURE h5aread_rkind_16_rank_7
+     MODULE PROCEDURE h5aread_ikind_1_rank_0
+     MODULE PROCEDURE h5aread_ikind_1_rank_1
+     MODULE PROCEDURE h5aread_ikind_1_rank_2
+     MODULE PROCEDURE h5aread_ikind_1_rank_3
+     MODULE PROCEDURE h5aread_ikind_1_rank_4
+     MODULE PROCEDURE h5aread_ikind_1_rank_5
+     MODULE PROCEDURE h5aread_ikind_1_rank_6
+     MODULE PROCEDURE h5aread_ikind_1_rank_7
+     MODULE PROCEDURE h5aread_ikind_2_rank_0
+     MODULE PROCEDURE h5aread_ikind_2_rank_1
+     MODULE PROCEDURE h5aread_ikind_2_rank_2
+     MODULE PROCEDURE h5aread_ikind_2_rank_3
+     MODULE PROCEDURE h5aread_ikind_2_rank_4
+     MODULE PROCEDURE h5aread_ikind_2_rank_5
+     MODULE PROCEDURE h5aread_ikind_2_rank_6
+     MODULE PROCEDURE h5aread_ikind_2_rank_7
+     MODULE PROCEDURE h5aread_ikind_4_rank_0
+     MODULE PROCEDURE h5aread_ikind_4_rank_1
+     MODULE PROCEDURE h5aread_ikind_4_rank_2
+     MODULE PROCEDURE h5aread_ikind_4_rank_3
+     MODULE PROCEDURE h5aread_ikind_4_rank_4
+     MODULE PROCEDURE h5aread_ikind_4_rank_5
+     MODULE PROCEDURE h5aread_ikind_4_rank_6
+     MODULE PROCEDURE h5aread_ikind_4_rank_7
+     MODULE PROCEDURE h5aread_ikind_8_rank_0
+     MODULE PROCEDURE h5aread_ikind_8_rank_1
+     MODULE PROCEDURE h5aread_ikind_8_rank_2
+     MODULE PROCEDURE h5aread_ikind_8_rank_3
+     MODULE PROCEDURE h5aread_ikind_8_rank_4
+     MODULE PROCEDURE h5aread_ikind_8_rank_5
+     MODULE PROCEDURE h5aread_ikind_8_rank_6
+     MODULE PROCEDURE h5aread_ikind_8_rank_7
+     MODULE PROCEDURE h5aread_ikind_16_rank_0
+     MODULE PROCEDURE h5aread_ikind_16_rank_1
+     MODULE PROCEDURE h5aread_ikind_16_rank_2
+     MODULE PROCEDURE h5aread_ikind_16_rank_3
+     MODULE PROCEDURE h5aread_ikind_16_rank_4
+     MODULE PROCEDURE h5aread_ikind_16_rank_5
+     MODULE PROCEDURE h5aread_ikind_16_rank_6
+     MODULE PROCEDURE h5aread_ikind_16_rank_7
+     MODULE PROCEDURE h5aread_ckind_rank_1
+     MODULE PROCEDURE h5aread_ckind_rank_2
+     MODULE PROCEDURE h5aread_ckind_rank_3
+     MODULE PROCEDURE h5aread_ckind_rank_4
+     MODULE PROCEDURE h5aread_ckind_rank_5
+     MODULE PROCEDURE h5aread_ckind_rank_6
+     MODULE PROCEDURE h5aread_ckind_rank_7
+  END INTERFACE
+  INTERFACE h5dwrite_f
+     MODULE PROCEDURE h5dwrite_rkind_4_rank_0
+     MODULE PROCEDURE h5dwrite_rkind_4_rank_1
+     MODULE PROCEDURE h5dwrite_rkind_4_rank_2
+     MODULE PROCEDURE h5dwrite_rkind_4_rank_3
+     MODULE PROCEDURE h5dwrite_rkind_4_rank_4
+     MODULE PROCEDURE h5dwrite_rkind_4_rank_5
+     MODULE PROCEDURE h5dwrite_rkind_4_rank_6
+     MODULE PROCEDURE h5dwrite_rkind_4_rank_7
+     MODULE PROCEDURE h5dwrite_rkind_8_rank_0
+     MODULE PROCEDURE h5dwrite_rkind_8_rank_1
+     MODULE PROCEDURE h5dwrite_rkind_8_rank_2
+     MODULE PROCEDURE h5dwrite_rkind_8_rank_3
+     MODULE PROCEDURE h5dwrite_rkind_8_rank_4
+     MODULE PROCEDURE h5dwrite_rkind_8_rank_5
+     MODULE PROCEDURE h5dwrite_rkind_8_rank_6
+     MODULE PROCEDURE h5dwrite_rkind_8_rank_7
+     MODULE PROCEDURE h5dwrite_rkind_10_rank_0
+     MODULE PROCEDURE h5dwrite_rkind_10_rank_1
+     MODULE PROCEDURE h5dwrite_rkind_10_rank_2
+     MODULE PROCEDURE h5dwrite_rkind_10_rank_3
+     MODULE PROCEDURE h5dwrite_rkind_10_rank_4
+     MODULE PROCEDURE h5dwrite_rkind_10_rank_5
+     MODULE PROCEDURE h5dwrite_rkind_10_rank_6
+     MODULE PROCEDURE h5dwrite_rkind_10_rank_7
+     MODULE PROCEDURE h5dwrite_rkind_16_rank_0
+     MODULE PROCEDURE h5dwrite_rkind_16_rank_1
+     MODULE PROCEDURE h5dwrite_rkind_16_rank_2
+     MODULE PROCEDURE h5dwrite_rkind_16_rank_3
+     MODULE PROCEDURE h5dwrite_rkind_16_rank_4
+     MODULE PROCEDURE h5dwrite_rkind_16_rank_5
+     MODULE PROCEDURE h5dwrite_rkind_16_rank_6
+     MODULE PROCEDURE h5dwrite_rkind_16_rank_7
+     MODULE PROCEDURE h5dwrite_ikind_1_rank_0
+     MODULE PROCEDURE h5dwrite_ikind_1_rank_1
+     MODULE PROCEDURE h5dwrite_ikind_1_rank_2
+     MODULE PROCEDURE h5dwrite_ikind_1_rank_3
+     MODULE PROCEDURE h5dwrite_ikind_1_rank_4
+     MODULE PROCEDURE h5dwrite_ikind_1_rank_5
+     MODULE PROCEDURE h5dwrite_ikind_1_rank_6
+     MODULE PROCEDURE h5dwrite_ikind_1_rank_7
+     MODULE PROCEDURE h5dwrite_ikind_2_rank_0
+     MODULE PROCEDURE h5dwrite_ikind_2_rank_1
+     MODULE PROCEDURE h5dwrite_ikind_2_rank_2
+     MODULE PROCEDURE h5dwrite_ikind_2_rank_3
+     MODULE PROCEDURE h5dwrite_ikind_2_rank_4
+     MODULE PROCEDURE h5dwrite_ikind_2_rank_5
+     MODULE PROCEDURE h5dwrite_ikind_2_rank_6
+     MODULE PROCEDURE h5dwrite_ikind_2_rank_7
+     MODULE PROCEDURE h5dwrite_ikind_4_rank_0
+     MODULE PROCEDURE h5dwrite_ikind_4_rank_1
+     MODULE PROCEDURE h5dwrite_ikind_4_rank_2
+     MODULE PROCEDURE h5dwrite_ikind_4_rank_3
+     MODULE PROCEDURE h5dwrite_ikind_4_rank_4
+     MODULE PROCEDURE h5dwrite_ikind_4_rank_5
+     MODULE PROCEDURE h5dwrite_ikind_4_rank_6
+     MODULE PROCEDURE h5dwrite_ikind_4_rank_7
+     MODULE PROCEDURE h5dwrite_ikind_8_rank_0
+     MODULE PROCEDURE h5dwrite_ikind_8_rank_1
+     MODULE PROCEDURE h5dwrite_ikind_8_rank_2
+     MODULE PROCEDURE h5dwrite_ikind_8_rank_3
+     MODULE PROCEDURE h5dwrite_ikind_8_rank_4
+     MODULE PROCEDURE h5dwrite_ikind_8_rank_5
+     MODULE PROCEDURE h5dwrite_ikind_8_rank_6
+     MODULE PROCEDURE h5dwrite_ikind_8_rank_7
+     MODULE PROCEDURE h5dwrite_ikind_16_rank_0
+     MODULE PROCEDURE h5dwrite_ikind_16_rank_1
+     MODULE PROCEDURE h5dwrite_ikind_16_rank_2
+     MODULE PROCEDURE h5dwrite_ikind_16_rank_3
+     MODULE PROCEDURE h5dwrite_ikind_16_rank_4
+     MODULE PROCEDURE h5dwrite_ikind_16_rank_5
+     MODULE PROCEDURE h5dwrite_ikind_16_rank_6
+     MODULE PROCEDURE h5dwrite_ikind_16_rank_7
+     MODULE PROCEDURE h5dwrite_ckind_rank_1
+     MODULE PROCEDURE h5dwrite_ckind_rank_2
+     MODULE PROCEDURE h5dwrite_ckind_rank_3
+     MODULE PROCEDURE h5dwrite_ckind_rank_4
+     MODULE PROCEDURE h5dwrite_ckind_rank_5
+     MODULE PROCEDURE h5dwrite_ckind_rank_6
+     MODULE PROCEDURE h5dwrite_ckind_rank_7
+  END INTERFACE
+  INTERFACE h5dread_f
+     MODULE PROCEDURE h5dread_rkind_4_rank_0
+     MODULE PROCEDURE h5dread_rkind_4_rank_1
+     MODULE PROCEDURE h5dread_rkind_4_rank_2
+     MODULE PROCEDURE h5dread_rkind_4_rank_3
+     MODULE PROCEDURE h5dread_rkind_4_rank_4
+     MODULE PROCEDURE h5dread_rkind_4_rank_5
+     MODULE PROCEDURE h5dread_rkind_4_rank_6
+     MODULE PROCEDURE h5dread_rkind_4_rank_7
+     MODULE PROCEDURE h5dread_rkind_8_rank_0
+     MODULE PROCEDURE h5dread_rkind_8_rank_1
+     MODULE PROCEDURE h5dread_rkind_8_rank_2
+     MODULE PROCEDURE h5dread_rkind_8_rank_3
+     MODULE PROCEDURE h5dread_rkind_8_rank_4
+     MODULE PROCEDURE h5dread_rkind_8_rank_5
+     MODULE PROCEDURE h5dread_rkind_8_rank_6
+     MODULE PROCEDURE h5dread_rkind_8_rank_7
+     MODULE PROCEDURE h5dread_rkind_10_rank_0
+     MODULE PROCEDURE h5dread_rkind_10_rank_1
+     MODULE PROCEDURE h5dread_rkind_10_rank_2
+     MODULE PROCEDURE h5dread_rkind_10_rank_3
+     MODULE PROCEDURE h5dread_rkind_10_rank_4
+     MODULE PROCEDURE h5dread_rkind_10_rank_5
+     MODULE PROCEDURE h5dread_rkind_10_rank_6
+     MODULE PROCEDURE h5dread_rkind_10_rank_7
+     MODULE PROCEDURE h5dread_rkind_16_rank_0
+     MODULE PROCEDURE h5dread_rkind_16_rank_1
+     MODULE PROCEDURE h5dread_rkind_16_rank_2
+     MODULE PROCEDURE h5dread_rkind_16_rank_3
+     MODULE PROCEDURE h5dread_rkind_16_rank_4
+     MODULE PROCEDURE h5dread_rkind_16_rank_5
+     MODULE PROCEDURE h5dread_rkind_16_rank_6
+     MODULE PROCEDURE h5dread_rkind_16_rank_7
+     MODULE PROCEDURE h5dread_ikind_1_rank_0
+     MODULE PROCEDURE h5dread_ikind_1_rank_1
+     MODULE PROCEDURE h5dread_ikind_1_rank_2
+     MODULE PROCEDURE h5dread_ikind_1_rank_3
+     MODULE PROCEDURE h5dread_ikind_1_rank_4
+     MODULE PROCEDURE h5dread_ikind_1_rank_5
+     MODULE PROCEDURE h5dread_ikind_1_rank_6
+     MODULE PROCEDURE h5dread_ikind_1_rank_7
+     MODULE PROCEDURE h5dread_ikind_2_rank_0
+     MODULE PROCEDURE h5dread_ikind_2_rank_1
+     MODULE PROCEDURE h5dread_ikind_2_rank_2
+     MODULE PROCEDURE h5dread_ikind_2_rank_3
+     MODULE PROCEDURE h5dread_ikind_2_rank_4
+     MODULE PROCEDURE h5dread_ikind_2_rank_5
+     MODULE PROCEDURE h5dread_ikind_2_rank_6
+     MODULE PROCEDURE h5dread_ikind_2_rank_7
+     MODULE PROCEDURE h5dread_ikind_4_rank_0
+     MODULE PROCEDURE h5dread_ikind_4_rank_1
+     MODULE PROCEDURE h5dread_ikind_4_rank_2
+     MODULE PROCEDURE h5dread_ikind_4_rank_3
+     MODULE PROCEDURE h5dread_ikind_4_rank_4
+     MODULE PROCEDURE h5dread_ikind_4_rank_5
+     MODULE PROCEDURE h5dread_ikind_4_rank_6
+     MODULE PROCEDURE h5dread_ikind_4_rank_7
+     MODULE PROCEDURE h5dread_ikind_8_rank_0
+     MODULE PROCEDURE h5dread_ikind_8_rank_1
+     MODULE PROCEDURE h5dread_ikind_8_rank_2
+     MODULE PROCEDURE h5dread_ikind_8_rank_3
+     MODULE PROCEDURE h5dread_ikind_8_rank_4
+     MODULE PROCEDURE h5dread_ikind_8_rank_5
+     MODULE PROCEDURE h5dread_ikind_8_rank_6
+     MODULE PROCEDURE h5dread_ikind_8_rank_7
+     MODULE PROCEDURE h5dread_ikind_16_rank_0
+     MODULE PROCEDURE h5dread_ikind_16_rank_1
+     MODULE PROCEDURE h5dread_ikind_16_rank_2
+     MODULE PROCEDURE h5dread_ikind_16_rank_3
+     MODULE PROCEDURE h5dread_ikind_16_rank_4
+     MODULE PROCEDURE h5dread_ikind_16_rank_5
+     MODULE PROCEDURE h5dread_ikind_16_rank_6
+     MODULE PROCEDURE h5dread_ikind_16_rank_7
+     MODULE PROCEDURE h5dread_ckind_rank_1
+     MODULE PROCEDURE h5dread_ckind_rank_2
+     MODULE PROCEDURE h5dread_ckind_rank_3
+     MODULE PROCEDURE h5dread_ckind_rank_4
+     MODULE PROCEDURE h5dread_ckind_rank_5
+     MODULE PROCEDURE h5dread_ckind_rank_6
+     MODULE PROCEDURE h5dread_ckind_rank_7
+  END INTERFACE
+  INTERFACE h5pset_fill_value_f
+     MODULE PROCEDURE h5pset_fill_value_kind_4
+     MODULE PROCEDURE h5pset_fill_value_kind_8
+     MODULE PROCEDURE h5pset_fill_value_kind_10
+     MODULE PROCEDURE h5pset_fill_value_kind_16
+  END INTERFACE
+  INTERFACE h5pget_fill_value_f
+     MODULE PROCEDURE h5pget_fill_value_kind_4
+     MODULE PROCEDURE h5pget_fill_value_kind_8
+     MODULE PROCEDURE h5pget_fill_value_kind_10
+     MODULE PROCEDURE h5pget_fill_value_kind_16
+  END INTERFACE
+  INTERFACE h5pset_f
+     MODULE PROCEDURE h5pset_kind_4
+     MODULE PROCEDURE h5pset_kind_8
+     MODULE PROCEDURE h5pset_kind_10
+     MODULE PROCEDURE h5pset_kind_16
+  END INTERFACE
+  INTERFACE h5pget_f
+     MODULE PROCEDURE h5pget_kind_4
+     MODULE PROCEDURE h5pget_kind_8
+     MODULE PROCEDURE h5pget_kind_10
+     MODULE PROCEDURE h5pget_kind_16
+  END INTERFACE
+  INTERFACE h5pregister_f
+     MODULE PROCEDURE h5pregister_kind_4
+     MODULE PROCEDURE h5pregister_kind_8
+     MODULE PROCEDURE h5pregister_kind_10
+     MODULE PROCEDURE h5pregister_kind_16
+  END INTERFACE
+  INTERFACE h5pinsert_f
+     MODULE PROCEDURE h5pinsert_kind_4
+     MODULE PROCEDURE h5pinsert_kind_8
+     MODULE PROCEDURE h5pinsert_kind_10
+     MODULE PROCEDURE h5pinsert_kind_16
+  END INTERFACE
+CONTAINS
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_4_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_4_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_4_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_4_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_4_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_4_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_4_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_4_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_4_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_4_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_4_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_4_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_4_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_4_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_4_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_4_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_8_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_8_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_8_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_8_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_8_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_8_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_8_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_8_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_8_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_8_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_8_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_8_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_8_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_8_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_8_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_8_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_10_rank_0
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_10_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_10_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_10_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_10_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_10_rank_2
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_10_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_10_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_10_rank_3
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_10_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_10_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_10_rank_4
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_10_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_10_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_10_rank_5
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_10_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_10_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_10_rank_6
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_10_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_10_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_10_rank_7
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_10_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_10_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_16_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_16_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_16_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_16_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_16_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_16_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_16_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_16_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_16_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_16_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_16_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_16_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_16_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_16_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_rkind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5awrite_rkind_16_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_rkind_16_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_1_rank_0
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_1_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_1_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_1_rank_1
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_1_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_1_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_1_rank_2
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_1_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_1_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_1_rank_3
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_1_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_1_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_1_rank_4
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_1_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_1_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_1_rank_5
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_1_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_1_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_1_rank_6
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_1_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_1_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_1_rank_7
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_1_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_1_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_2_rank_0
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_2_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_2_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_2_rank_1
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_2_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_2_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_2_rank_2
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_2_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_2_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_2_rank_3
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_2_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_2_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_2_rank_4
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_2_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_2_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_2_rank_5
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_2_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_2_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_2_rank_6
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_2_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_2_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_2_rank_7
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_2_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_2_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_4_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_4_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_4_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_4_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_4_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_4_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_4_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_4_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_4_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_4_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_4_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_4_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_4_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_4_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_4_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_4_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_8_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_8_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_8_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_8_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_8_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_8_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_8_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_8_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_8_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_8_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_8_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_8_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_8_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_8_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_8_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_8_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_16_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_16_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_16_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_16_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_16_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_16_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_16_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_16_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_16_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_16_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_16_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_16_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_16_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_16_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ikind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5awrite_ikind_16_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ikind_16_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ckind_rank_1
+!DEC$endif
+  SUBROUTINE h5awrite_ckind_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*)  , INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)(1:1))            
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ckind_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ckind_rank_2
+!DEC$endif
+  SUBROUTINE h5awrite_ckind_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*)  , INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1)(1:1))          
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ckind_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ckind_rank_3
+!DEC$endif
+  SUBROUTINE h5awrite_ckind_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*)  , INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1)(1:1))        
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ckind_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ckind_rank_4
+!DEC$endif
+  SUBROUTINE h5awrite_ckind_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*)  , INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1)(1:1))      
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ckind_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ckind_rank_5
+!DEC$endif
+  SUBROUTINE h5awrite_ckind_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*)  , INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1)(1:1))    
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ckind_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ckind_rank_6
+!DEC$endif
+  SUBROUTINE h5awrite_ckind_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*)  , INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)(1:1))  
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ckind_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5awrite_ckind_rank_7
+!DEC$endif
+  SUBROUTINE h5awrite_ckind_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*)  , INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1)(1:1))
+    hdferr = H5Awrite_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5awrite_ckind_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5aread_rkind_4_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_4_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5aread_rkind_4_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_4_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5aread_rkind_4_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_4_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5aread_rkind_4_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_4_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5aread_rkind_4_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_4_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5aread_rkind_4_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_4_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5aread_rkind_4_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_4_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5aread_rkind_4_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_4_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5aread_rkind_8_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_8_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5aread_rkind_8_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_8_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5aread_rkind_8_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_8_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5aread_rkind_8_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_8_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5aread_rkind_8_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_8_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5aread_rkind_8_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_8_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5aread_rkind_8_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_8_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5aread_rkind_8_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_8_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_10_rank_0
+!DEC$endif
+  SUBROUTINE h5aread_rkind_10_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_10_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5aread_rkind_10_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_10_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_10_rank_2
+!DEC$endif
+  SUBROUTINE h5aread_rkind_10_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_10_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_10_rank_3
+!DEC$endif
+  SUBROUTINE h5aread_rkind_10_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_10_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_10_rank_4
+!DEC$endif
+  SUBROUTINE h5aread_rkind_10_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_10_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_10_rank_5
+!DEC$endif
+  SUBROUTINE h5aread_rkind_10_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_10_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_10_rank_6
+!DEC$endif
+  SUBROUTINE h5aread_rkind_10_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_10_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_10_rank_7
+!DEC$endif
+  SUBROUTINE h5aread_rkind_10_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_10_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5aread_rkind_16_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_16_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5aread_rkind_16_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_16_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5aread_rkind_16_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_16_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5aread_rkind_16_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_16_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5aread_rkind_16_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_16_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5aread_rkind_16_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_16_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5aread_rkind_16_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_16_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_rkind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5aread_rkind_16_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_rkind_16_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_1_rank_0
+!DEC$endif
+  SUBROUTINE h5aread_ikind_1_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_1_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_1_rank_1
+!DEC$endif
+  SUBROUTINE h5aread_ikind_1_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_1_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_1_rank_2
+!DEC$endif
+  SUBROUTINE h5aread_ikind_1_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_1_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_1_rank_3
+!DEC$endif
+  SUBROUTINE h5aread_ikind_1_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_1_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_1_rank_4
+!DEC$endif
+  SUBROUTINE h5aread_ikind_1_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_1_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_1_rank_5
+!DEC$endif
+  SUBROUTINE h5aread_ikind_1_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_1_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_1_rank_6
+!DEC$endif
+  SUBROUTINE h5aread_ikind_1_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_1_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_1_rank_7
+!DEC$endif
+  SUBROUTINE h5aread_ikind_1_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_1_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_2_rank_0
+!DEC$endif
+  SUBROUTINE h5aread_ikind_2_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_2_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_2_rank_1
+!DEC$endif
+  SUBROUTINE h5aread_ikind_2_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_2_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_2_rank_2
+!DEC$endif
+  SUBROUTINE h5aread_ikind_2_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_2_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_2_rank_3
+!DEC$endif
+  SUBROUTINE h5aread_ikind_2_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_2_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_2_rank_4
+!DEC$endif
+  SUBROUTINE h5aread_ikind_2_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_2_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_2_rank_5
+!DEC$endif
+  SUBROUTINE h5aread_ikind_2_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_2_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_2_rank_6
+!DEC$endif
+  SUBROUTINE h5aread_ikind_2_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_2_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_2_rank_7
+!DEC$endif
+  SUBROUTINE h5aread_ikind_2_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_2_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5aread_ikind_4_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_4_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5aread_ikind_4_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_4_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5aread_ikind_4_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_4_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5aread_ikind_4_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_4_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5aread_ikind_4_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_4_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5aread_ikind_4_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_4_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5aread_ikind_4_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_4_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5aread_ikind_4_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_4_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5aread_ikind_8_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_8_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5aread_ikind_8_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_8_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5aread_ikind_8_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_8_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5aread_ikind_8_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_8_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5aread_ikind_8_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_8_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5aread_ikind_8_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_8_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5aread_ikind_8_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_8_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5aread_ikind_8_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_8_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5aread_ikind_16_rank_0(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf)               
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_16_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5aread_ikind_16_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1))            
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_16_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5aread_ikind_16_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_16_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5aread_ikind_16_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_16_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5aread_ikind_16_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_16_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5aread_ikind_16_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_16_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5aread_ikind_16_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_16_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ikind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5aread_ikind_16_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ikind_16_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ckind_rank_1
+!DEC$endif
+  SUBROUTINE h5aread_ckind_rank_1(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)(1:1))            
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ckind_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ckind_rank_2
+!DEC$endif
+  SUBROUTINE h5aread_ckind_rank_2(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1)(1:1))          
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ckind_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ckind_rank_3
+!DEC$endif
+  SUBROUTINE h5aread_ckind_rank_3(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1)(1:1))        
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ckind_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ckind_rank_4
+!DEC$endif
+  SUBROUTINE h5aread_ckind_rank_4(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1)(1:1))      
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ckind_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ckind_rank_5
+!DEC$endif
+  SUBROUTINE h5aread_ckind_rank_5(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1)(1:1))    
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ckind_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ckind_rank_6
+!DEC$endif
+  SUBROUTINE h5aread_ckind_rank_6(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)(1:1))  
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ckind_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5aread_ckind_rank_7
+!DEC$endif
+  SUBROUTINE h5aread_ckind_rank_7(attr_id, memtype_id, buf, dims, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T)    , INTENT(IN) :: attr_id
+    INTEGER(HID_T)    , INTENT(IN) :: memtype_id
+    INTEGER(HSIZE_T)  , INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER           , INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1)(1:1))
+    hdferr = H5Aread_f_c(attr_id, memtype_id, f_ptr)
+  END SUBROUTINE h5aread_ckind_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5dread_rkind_4_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_4_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5dread_rkind_4_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_4_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5dread_rkind_4_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_4_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5dread_rkind_4_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_4_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5dread_rkind_4_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_4_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5dread_rkind_4_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_4_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5dread_rkind_4_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_4_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5dread_rkind_4_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_4_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5dread_rkind_8_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_8_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5dread_rkind_8_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_8_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5dread_rkind_8_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_8_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5dread_rkind_8_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_8_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5dread_rkind_8_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_8_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5dread_rkind_8_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_8_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5dread_rkind_8_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_8_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5dread_rkind_8_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_8_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_10_rank_0
+!DEC$endif
+  SUBROUTINE h5dread_rkind_10_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_10_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5dread_rkind_10_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_10_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_10_rank_2
+!DEC$endif
+  SUBROUTINE h5dread_rkind_10_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_10_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_10_rank_3
+!DEC$endif
+  SUBROUTINE h5dread_rkind_10_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_10_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_10_rank_4
+!DEC$endif
+  SUBROUTINE h5dread_rkind_10_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_10_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_10_rank_5
+!DEC$endif
+  SUBROUTINE h5dread_rkind_10_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_10_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_10_rank_6
+!DEC$endif
+  SUBROUTINE h5dread_rkind_10_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_10_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_10_rank_7
+!DEC$endif
+  SUBROUTINE h5dread_rkind_10_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_10_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5dread_rkind_16_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_16_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5dread_rkind_16_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_16_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5dread_rkind_16_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_16_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5dread_rkind_16_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_16_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5dread_rkind_16_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_16_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5dread_rkind_16_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_16_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5dread_rkind_16_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_16_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_rkind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5dread_rkind_16_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_rkind_16_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_1_rank_0
+!DEC$endif
+  SUBROUTINE h5dread_ikind_1_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_1_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_1_rank_1
+!DEC$endif
+  SUBROUTINE h5dread_ikind_1_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_1_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_1_rank_2
+!DEC$endif
+  SUBROUTINE h5dread_ikind_1_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_1_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_1_rank_3
+!DEC$endif
+  SUBROUTINE h5dread_ikind_1_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_1_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_1_rank_4
+!DEC$endif
+  SUBROUTINE h5dread_ikind_1_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_1_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_1_rank_5
+!DEC$endif
+  SUBROUTINE h5dread_ikind_1_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_1_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_1_rank_6
+!DEC$endif
+  SUBROUTINE h5dread_ikind_1_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_1_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_1_rank_7
+!DEC$endif
+  SUBROUTINE h5dread_ikind_1_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_1_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_2_rank_0
+!DEC$endif
+  SUBROUTINE h5dread_ikind_2_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_2_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_2_rank_1
+!DEC$endif
+  SUBROUTINE h5dread_ikind_2_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_2_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_2_rank_2
+!DEC$endif
+  SUBROUTINE h5dread_ikind_2_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_2_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_2_rank_3
+!DEC$endif
+  SUBROUTINE h5dread_ikind_2_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_2_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_2_rank_4
+!DEC$endif
+  SUBROUTINE h5dread_ikind_2_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_2_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_2_rank_5
+!DEC$endif
+  SUBROUTINE h5dread_ikind_2_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_2_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_2_rank_6
+!DEC$endif
+  SUBROUTINE h5dread_ikind_2_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_2_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_2_rank_7
+!DEC$endif
+  SUBROUTINE h5dread_ikind_2_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_2_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5dread_ikind_4_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_4_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5dread_ikind_4_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_4_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5dread_ikind_4_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_4_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5dread_ikind_4_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_4_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5dread_ikind_4_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_4_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5dread_ikind_4_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_4_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5dread_ikind_4_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_4_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5dread_ikind_4_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_4_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5dread_ikind_8_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_8_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5dread_ikind_8_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_8_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5dread_ikind_8_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_8_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5dread_ikind_8_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_8_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5dread_ikind_8_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_8_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5dread_ikind_8_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_8_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5dread_ikind_8_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_8_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5dread_ikind_8_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_8_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5dread_ikind_16_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_16_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5dread_ikind_16_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_16_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5dread_ikind_16_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_16_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5dread_ikind_16_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_16_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5dread_ikind_16_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_16_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5dread_ikind_16_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_16_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5dread_ikind_16_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_16_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ikind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5dread_ikind_16_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ikind_16_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ckind_rank_1
+!DEC$endif
+  SUBROUTINE h5dread_ckind_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1)(1:1))            
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ckind_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ckind_rank_2
+!DEC$endif
+  SUBROUTINE h5dread_ckind_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1)(1:1))          
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ckind_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ckind_rank_3
+!DEC$endif
+  SUBROUTINE h5dread_ckind_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1)(1:1))        
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ckind_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ckind_rank_4
+!DEC$endif
+  SUBROUTINE h5dread_ckind_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1)(1:1))      
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ckind_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ckind_rank_5
+!DEC$endif
+  SUBROUTINE h5dread_ckind_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)(1:1))    
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ckind_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ckind_rank_6
+!DEC$endif
+  SUBROUTINE h5dread_ckind_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)(1:1))  
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ckind_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dread_ckind_rank_7
+!DEC$endif
+  SUBROUTINE h5dread_ckind_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*), INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1)(1:1))
+    hdferr = h5dread_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dread_ckind_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_4_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_4_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_4_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_4_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_4_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_4_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_4_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_4_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_4_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_4_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_4_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_4_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_4_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_4_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_4_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_4_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_8_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_8_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_8_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_8_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_8_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_8_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_8_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_8_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_8_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_8_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_8_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_8_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_8_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_8_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_8_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_8_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_10_rank_0
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_10_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_10_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_10_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_10_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_10_rank_2
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_10_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_10_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_10_rank_3
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_10_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_10_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_10_rank_4
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_10_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_10_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_10_rank_5
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_10_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_10_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_10_rank_6
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_10_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_10_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_10_rank_7
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_10_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_10_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_16_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_16_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_16_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_16_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_16_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_16_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_16_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_16_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_16_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_16_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_16_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_16_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_16_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_16_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_rkind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5dwrite_rkind_16_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_rkind_16_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_1_rank_0
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_1_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_1_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_1_rank_1
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_1_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_1_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_1_rank_2
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_1_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_1_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_1_rank_3
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_1_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_1_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_1_rank_4
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_1_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_1_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_1_rank_5
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_1_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_1_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_1_rank_6
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_1_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_1_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_1_rank_7
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_1_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_1_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_2_rank_0
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_2_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_2_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_2_rank_1
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_2_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_2_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_2_rank_2
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_2_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_2_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_2_rank_3
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_2_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_2_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_2_rank_4
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_2_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_2_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_2_rank_5
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_2_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_2_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_2_rank_6
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_2_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_2_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_2_rank_7
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_2_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_2_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_4_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_4_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_4_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_4_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_4_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_4_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_4_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_4_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_4_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_4_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_4_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_4_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_4_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_4_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_4_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_4_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_8_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_8_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_8_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_8_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_8_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_8_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_8_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_8_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_8_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_8_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_8_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_8_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_8_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_8_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_8_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_8_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_16_rank_0(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf)               
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_16_rank_0
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_16_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1))            
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_16_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_16_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1))          
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_16_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_16_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1))        
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_16_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_16_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1))      
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_16_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_16_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1))    
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_16_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_16_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1))  
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_16_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ikind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5dwrite_ikind_16_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ikind_16_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ckind_rank_1
+!DEC$endif
+  SUBROUTINE h5dwrite_ckind_rank_1(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1)(1:1))            
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ckind_rank_1
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ckind_rank_2
+!DEC$endif
+  SUBROUTINE h5dwrite_ckind_rank_2(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1)(1:1))          
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ckind_rank_2
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ckind_rank_3
+!DEC$endif
+  SUBROUTINE h5dwrite_ckind_rank_3(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1)(1:1))        
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ckind_rank_3
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ckind_rank_4
+!DEC$endif
+  SUBROUTINE h5dwrite_ckind_rank_4(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1)(1:1))      
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ckind_rank_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ckind_rank_5
+!DEC$endif
+  SUBROUTINE h5dwrite_ckind_rank_5(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)(1:1))    
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ckind_rank_5
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ckind_rank_6
+!DEC$endif
+  SUBROUTINE h5dwrite_ckind_rank_6(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)(1:1))  
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ckind_rank_6
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5dwrite_ckind_rank_7
+!DEC$endif
+  SUBROUTINE h5dwrite_ckind_rank_7(dset_id, mem_type_id, buf, dims, hdferr, &
+       mem_space_id, file_space_id, xfer_prp)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: dset_id
+    INTEGER(HID_T), INTENT(IN) :: mem_type_id
+    INTEGER(HSIZE_T), INTENT(IN), DIMENSION(*) :: dims
+    CHARACTER(LEN=*),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: mem_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: file_space_id
+    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: xfer_prp
+    INTEGER(HID_T) :: xfer_prp_default
+    INTEGER(HID_T) :: mem_space_id_default
+    INTEGER(HID_T) :: file_space_id_default
+    TYPE(C_PTR) :: f_ptr
+    xfer_prp_default  = H5P_DEFAULT_F
+    mem_space_id_default = H5S_ALL_F
+    file_space_id_default = H5S_ALL_F
+    IF(PRESENT(xfer_prp)) xfer_prp_default = xfer_prp
+    IF(PRESENT(mem_space_id))  mem_space_id_default = mem_space_id
+    IF(PRESENT(file_space_id)) file_space_id_default = file_space_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1)(1:1))
+    hdferr = h5dwrite_f_c(dset_id, mem_type_id, mem_space_id_default, &
+         file_space_id_default, xfer_prp_default, f_ptr)
+  END SUBROUTINE h5dwrite_ckind_rank_7
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pset_fill_value_kind_4
+!DEC$endif
+  SUBROUTINE h5pset_fill_value_kind_4(prp_id, type_id, fillvalue, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    INTEGER(HID_T), INTENT(IN) :: type_id
+    REAL(KIND=4), INTENT(IN), TARGET :: fillvalue
+    INTEGER, INTENT(OUT) :: hdferr 
+    TYPE(C_PTR) :: f_ptr 
+    f_ptr = C_LOC(fillvalue)
+    hdferr = h5pset_fill_value_c(prp_id, type_id, f_ptr)
+  END SUBROUTINE h5pset_fill_value_kind_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pset_fill_value_kind_8
+!DEC$endif
+  SUBROUTINE h5pset_fill_value_kind_8(prp_id, type_id, fillvalue, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    INTEGER(HID_T), INTENT(IN) :: type_id
+    REAL(KIND=8), INTENT(IN), TARGET :: fillvalue
+    INTEGER, INTENT(OUT) :: hdferr 
+    TYPE(C_PTR) :: f_ptr 
+    f_ptr = C_LOC(fillvalue)
+    hdferr = h5pset_fill_value_c(prp_id, type_id, f_ptr)
+  END SUBROUTINE h5pset_fill_value_kind_8
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pset_fill_value_kind_10
+!DEC$endif
+  SUBROUTINE h5pset_fill_value_kind_10(prp_id, type_id, fillvalue, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    INTEGER(HID_T), INTENT(IN) :: type_id
+    REAL(KIND=10), INTENT(IN), TARGET :: fillvalue
+    INTEGER, INTENT(OUT) :: hdferr 
+    TYPE(C_PTR) :: f_ptr 
+    f_ptr = C_LOC(fillvalue)
+    hdferr = h5pset_fill_value_c(prp_id, type_id, f_ptr)
+  END SUBROUTINE h5pset_fill_value_kind_10
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pset_fill_value_kind_16
+!DEC$endif
+  SUBROUTINE h5pset_fill_value_kind_16(prp_id, type_id, fillvalue, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    INTEGER(HID_T), INTENT(IN) :: type_id
+    REAL(KIND=16), INTENT(IN), TARGET :: fillvalue
+    INTEGER, INTENT(OUT) :: hdferr 
+    TYPE(C_PTR) :: f_ptr 
+    f_ptr = C_LOC(fillvalue)
+    hdferr = h5pset_fill_value_c(prp_id, type_id, f_ptr)
+  END SUBROUTINE h5pset_fill_value_kind_16
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pget_fill_value_kind_4
+!DEC$endif
+  SUBROUTINE h5pget_fill_value_kind_4(prp_id, type_id, fillvalue, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    INTEGER(HID_T), INTENT(IN) :: type_id
+    REAL(KIND=4), INTENT(OUT), TARGET :: fillvalue
+    INTEGER, INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(fillvalue)
+    hdferr = h5pget_fill_value_c(prp_id, type_id, f_ptr)
+  END SUBROUTINE h5pget_fill_value_kind_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pget_fill_value_kind_8
+!DEC$endif
+  SUBROUTINE h5pget_fill_value_kind_8(prp_id, type_id, fillvalue, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    INTEGER(HID_T), INTENT(IN) :: type_id
+    REAL(KIND=8), INTENT(OUT), TARGET :: fillvalue
+    INTEGER, INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(fillvalue)
+    hdferr = h5pget_fill_value_c(prp_id, type_id, f_ptr)
+  END SUBROUTINE h5pget_fill_value_kind_8
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pget_fill_value_kind_10
+!DEC$endif
+  SUBROUTINE h5pget_fill_value_kind_10(prp_id, type_id, fillvalue, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    INTEGER(HID_T), INTENT(IN) :: type_id
+    REAL(KIND=10), INTENT(OUT), TARGET :: fillvalue
+    INTEGER, INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(fillvalue)
+    hdferr = h5pget_fill_value_c(prp_id, type_id, f_ptr)
+  END SUBROUTINE h5pget_fill_value_kind_10
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pget_fill_value_kind_16
+!DEC$endif
+  SUBROUTINE h5pget_fill_value_kind_16(prp_id, type_id, fillvalue, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    INTEGER(HID_T), INTENT(IN) :: type_id
+    REAL(KIND=16), INTENT(OUT), TARGET :: fillvalue
+    INTEGER, INTENT(OUT) :: hdferr
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(fillvalue)
+    hdferr = h5pget_fill_value_c(prp_id, type_id, f_ptr)
+  END SUBROUTINE h5pget_fill_value_kind_16
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pset_kind_4
+!DEC$endif
+  SUBROUTINE h5pset_kind_4(prp_id, name, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    CHARACTER(KIND=C_CHAR), DIMENSION(*), INTENT(IN) :: name
+    REAL(KIND=4), INTENT(IN), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(value)
+    name_len = LEN(name)
+    hdferr = h5pget_c(prp_id, name, name_len, f_ptr)
+  END SUBROUTINE h5pset_kind_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pset_kind_8
+!DEC$endif
+  SUBROUTINE h5pset_kind_8(prp_id, name, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    CHARACTER(KIND=C_CHAR), DIMENSION(*), INTENT(IN) :: name
+    REAL(KIND=8), INTENT(IN), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(value)
+    name_len = LEN(name)
+    hdferr = h5pget_c(prp_id, name, name_len, f_ptr)
+  END SUBROUTINE h5pset_kind_8
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pset_kind_10
+!DEC$endif
+  SUBROUTINE h5pset_kind_10(prp_id, name, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    CHARACTER(KIND=C_CHAR), DIMENSION(*), INTENT(IN) :: name
+    REAL(KIND=10), INTENT(IN), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(value)
+    name_len = LEN(name)
+    hdferr = h5pget_c(prp_id, name, name_len, f_ptr)
+  END SUBROUTINE h5pset_kind_10
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pset_kind_16
+!DEC$endif
+  SUBROUTINE h5pset_kind_16(prp_id, name, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    CHARACTER(KIND=C_CHAR), DIMENSION(*), INTENT(IN) :: name
+    REAL(KIND=16), INTENT(IN), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(value)
+    name_len = LEN(name)
+    hdferr = h5pget_c(prp_id, name, name_len, f_ptr)
+  END SUBROUTINE h5pset_kind_16
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pget_kind_4
+!DEC$endif
+  SUBROUTINE h5pget_kind_4(prp_id, name, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    CHARACTER(LEN=*), INTENT(IN) :: name
+    REAL(KIND=4),   INTENT(OUT), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(value)
+    name_len = LEN(name)
+    hdferr = h5pget_c(prp_id, name, name_len, f_ptr)
+  END SUBROUTINE h5pget_kind_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pget_kind_8
+!DEC$endif
+  SUBROUTINE h5pget_kind_8(prp_id, name, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    CHARACTER(LEN=*), INTENT(IN) :: name
+    REAL(KIND=8),   INTENT(OUT), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(value)
+    name_len = LEN(name)
+    hdferr = h5pget_c(prp_id, name, name_len, f_ptr)
+  END SUBROUTINE h5pget_kind_8
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pget_kind_10
+!DEC$endif
+  SUBROUTINE h5pget_kind_10(prp_id, name, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    CHARACTER(LEN=*), INTENT(IN) :: name
+    REAL(KIND=10),   INTENT(OUT), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(value)
+    name_len = LEN(name)
+    hdferr = h5pget_c(prp_id, name, name_len, f_ptr)
+  END SUBROUTINE h5pget_kind_10
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pget_kind_16
+!DEC$endif
+  SUBROUTINE h5pget_kind_16(prp_id, name, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: prp_id
+    CHARACTER(LEN=*), INTENT(IN) :: name
+    REAL(KIND=16),   INTENT(OUT), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(value)
+    name_len = LEN(name)
+    hdferr = h5pget_c(prp_id, name, name_len, f_ptr)
+  END SUBROUTINE h5pget_kind_16
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pregister_kind_4
+!DEC$endif
+SUBROUTINE h5pregister_kind_4(class, name, size, value, hdferr)
+  IMPLICIT NONE
+  INTEGER(HID_T), INTENT(IN) :: class
+  CHARACTER(LEN=*), INTENT(IN) :: name
+  INTEGER(SIZE_T), INTENT(IN) :: size
+  REAL(KIND=4), INTENT(IN), TARGET :: value
+  INTEGER, INTENT(OUT) :: hdferr
+  INTEGER :: name_len
+  TYPE(C_PTR) :: f_ptr
+  f_ptr = C_LOC(value)
+  name_len = LEN(name)
+  hdferr = h5pregister_c(class, name, name_len, size, f_ptr)
+END SUBROUTINE h5pregister_kind_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pregister_kind_8
+!DEC$endif
+SUBROUTINE h5pregister_kind_8(class, name, size, value, hdferr)
+  IMPLICIT NONE
+  INTEGER(HID_T), INTENT(IN) :: class
+  CHARACTER(LEN=*), INTENT(IN) :: name
+  INTEGER(SIZE_T), INTENT(IN) :: size
+  REAL(KIND=8), INTENT(IN), TARGET :: value
+  INTEGER, INTENT(OUT) :: hdferr
+  INTEGER :: name_len
+  TYPE(C_PTR) :: f_ptr
+  f_ptr = C_LOC(value)
+  name_len = LEN(name)
+  hdferr = h5pregister_c(class, name, name_len, size, f_ptr)
+END SUBROUTINE h5pregister_kind_8
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pregister_kind_10
+!DEC$endif
+SUBROUTINE h5pregister_kind_10(class, name, size, value, hdferr)
+  IMPLICIT NONE
+  INTEGER(HID_T), INTENT(IN) :: class
+  CHARACTER(LEN=*), INTENT(IN) :: name
+  INTEGER(SIZE_T), INTENT(IN) :: size
+  REAL(KIND=10), INTENT(IN), TARGET :: value
+  INTEGER, INTENT(OUT) :: hdferr
+  INTEGER :: name_len
+  TYPE(C_PTR) :: f_ptr
+  f_ptr = C_LOC(value)
+  name_len = LEN(name)
+  hdferr = h5pregister_c(class, name, name_len, size, f_ptr)
+END SUBROUTINE h5pregister_kind_10
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pregister_kind_16
+!DEC$endif
+SUBROUTINE h5pregister_kind_16(class, name, size, value, hdferr)
+  IMPLICIT NONE
+  INTEGER(HID_T), INTENT(IN) :: class
+  CHARACTER(LEN=*), INTENT(IN) :: name
+  INTEGER(SIZE_T), INTENT(IN) :: size
+  REAL(KIND=16), INTENT(IN), TARGET :: value
+  INTEGER, INTENT(OUT) :: hdferr
+  INTEGER :: name_len
+  TYPE(C_PTR) :: f_ptr
+  f_ptr = C_LOC(value)
+  name_len = LEN(name)
+  hdferr = h5pregister_c(class, name, name_len, size, f_ptr)
+END SUBROUTINE h5pregister_kind_16
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pinsert_kind_4
+!DEC$endif
+  SUBROUTINE h5pinsert_kind_4(plist, name, size, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: plist
+    CHARACTER(LEN=*), INTENT(IN) :: name
+    INTEGER(SIZE_T), INTENT(IN) :: size
+    REAL(KIND=4),   INTENT(IN), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(c_ptr) :: f_ptr
+    f_ptr = c_loc(value)
+    name_len = LEN(name)
+    hdferr = h5pinsert_c(plist, name , name_len, size, f_ptr)
+  END SUBROUTINE h5pinsert_kind_4
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pinsert_kind_8
+!DEC$endif
+  SUBROUTINE h5pinsert_kind_8(plist, name, size, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: plist
+    CHARACTER(LEN=*), INTENT(IN) :: name
+    INTEGER(SIZE_T), INTENT(IN) :: size
+    REAL(KIND=8),   INTENT(IN), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(c_ptr) :: f_ptr
+    f_ptr = c_loc(value)
+    name_len = LEN(name)
+    hdferr = h5pinsert_c(plist, name , name_len, size, f_ptr)
+  END SUBROUTINE h5pinsert_kind_8
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pinsert_kind_10
+!DEC$endif
+  SUBROUTINE h5pinsert_kind_10(plist, name, size, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: plist
+    CHARACTER(LEN=*), INTENT(IN) :: name
+    INTEGER(SIZE_T), INTENT(IN) :: size
+    REAL(KIND=10),   INTENT(IN), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(c_ptr) :: f_ptr
+    f_ptr = c_loc(value)
+    name_len = LEN(name)
+    hdferr = h5pinsert_c(plist, name , name_len, size, f_ptr)
+  END SUBROUTINE h5pinsert_kind_10
+!DEC$if defined(BUILD_HDF5_DLL)
+!DEC$attributes dllexport :: h5pinsert_kind_16
+!DEC$endif
+  SUBROUTINE h5pinsert_kind_16(plist, name, size, value, hdferr)
+    IMPLICIT NONE
+    INTEGER(HID_T), INTENT(IN) :: plist
+    CHARACTER(LEN=*), INTENT(IN) :: name
+    INTEGER(SIZE_T), INTENT(IN) :: size
+    REAL(KIND=16),   INTENT(IN), TARGET :: value
+    INTEGER, INTENT(OUT) :: hdferr
+    INTEGER :: name_len
+    TYPE(c_ptr) :: f_ptr
+    f_ptr = c_loc(value)
+    name_len = LEN(name)
+    hdferr = h5pinsert_c(plist, name , name_len, size, f_ptr)
+  END SUBROUTINE h5pinsert_kind_16
+END MODULE H5_gen
diff -Nru hdf5-1.12.1-orig/hdf5-1.12.1-orig/bin/make_lib_settings hdf5-1.12.1-patched/hdf5-1.12.1-orig/bin/make_lib_settings
--- hdf5-1.12.1-orig/hdf5-1.12.1-orig/bin/make_lib_settings	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/hdf5-1.12.1-orig/bin/make_lib_settings	2024-08-07 03:59:48.314331984 -0400
@@ -0,0 +1,45 @@
+#!/usr/bin/perl -w
+require 5.003;
+
+print "/* Generated automatically by H5make_libsettings -- do not edit */
+
+
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Copyright by The HDF Group.                                               *
+ * Copyright by the Board of Trustees of the University of Illinois.         *
+ * All rights reserved.                                                      *
+ *                                                                           *
+ * This file is part of HDF5.  The full HDF5 copyright notice, including     *
+ * terms governing use, modification, and redistribution, is contained in    *
+ * the files COPYING and Copyright.html.  COPYING can be found at the root   *
+ * of the source code distribution tree; Copyright.html can be found at the  *
+ * root level of an installed copy of the electronic HDF5 document set and   *
+ * is linked from the top-level documents page.  It can also be found at     *
+ * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
+ * access to either file, you may request a copy from help\@hdfgroup.org.     *
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ * Created:		Dec 26, 2012
+ *			
+ *
+ * Purpose:		This machine-generated source code contains
+ *			information about the library build configuration
+ *
+ * Modifications:
+ *
+ *	DO NOT MAKE MODIFICATIONS TO THIS FILE!
+ *	It was generated by code in `H5make_libsettings.c'.
+ *
+ *-------------------------------------------------------------------------
+ */
+
+char H5libhdf5_settings[]=
+";
+
+while (<>) {
+  chop;
+  print "\t\"$_\\n\"\n";
+}
+
+print ";\n"
diff -Nru hdf5-1.12.1-orig/hl/fortran/src/CMakeLists.txt hdf5-1.12.1-patched/hl/fortran/src/CMakeLists.txt
--- hdf5-1.12.1-orig/hl/fortran/src/CMakeLists.txt	2021-07-01 17:26:39.000000000 -0400
+++ hdf5-1.12.1-patched/hl/fortran/src/CMakeLists.txt	2024-08-07 13:09:32.076999417 -0400
@@ -116,7 +116,11 @@
 if (NOT ONLY_SHARED_LIBS)
   add_custom_command (TARGET H5HL_buildiface POST_BUILD
       BYPRODUCTS ${HDF5_HL_F90_BINARY_DIR}/static/H5LTff_gen.F90 ${HDF5_HL_F90_BINARY_DIR}/static/H5TBff_gen.F90
-      COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:H5HL_buildiface>
+#      COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:H5HL_buildiface>
+      COMMAND    ${CMAKE_COMMAND}
+      ARGS       -E copy_if_different ${HDF5_HL_F90_SRC_SOURCE_DIR}/H5LTff_gen.F90 ${HDF5_HL_F90_BINARY_DIR}/static/H5LTff_gen.F90
+      COMMAND    ${CMAKE_COMMAND}
+      ARGS       -E copy_if_different ${HDF5_HL_F90_SRC_SOURCE_DIR}/H5TBff_gen.F90 ${HDF5_HL_F90_BINARY_DIR}/static/H5TBff_gen.F90
       WORKING_DIRECTORY ${HDF5_HL_F90_BINARY_DIR}/static
       DEPENDS ${HDF5_HL_F90_F_BASE_SOURCES}
       COMMENT "Generating the H5LTff_gen.F90, H5TBff_gen.F90 files"
@@ -133,7 +137,11 @@
 if (BUILD_SHARED_LIBS)
   add_custom_command (TARGET H5HL_buildiface POST_BUILD
       BYPRODUCTS ${HDF5_HL_F90_BINARY_DIR}/shared/H5LTff_gen.F90 ${HDF5_HL_F90_BINARY_DIR}/shared/H5TBff_gen.F90
-      COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:H5HL_buildiface>
+ #     COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:H5HL_buildiface>
+      COMMAND    ${CMAKE_COMMAND}
+      ARGS       -E copy_if_different ${HDF5_HL_F90_SRC_SOURCE_DIR}/H5LTff_gen.F90 ${HDF5_HL_F90_BINARY_DIR}/shared/H5LTff_gen.F90
+      COMMAND    ${CMAKE_COMMAND}
+      ARGS       -E copy_if_different ${HDF5_HL_F90_SRC_SOURCE_DIR}/H5TBff_gen.F90 ${HDF5_HL_F90_BINARY_DIR}/shared/H5TBff_gen.F90
       WORKING_DIRECTORY ${HDF5_HL_F90_BINARY_DIR}/shared
       DEPENDS ${HDF5_HL_F90_F_BASE_SOURCES}
       COMMENT "Generating the H5LTff_gen.F90, H5TBff_gen.F90 shared files"
diff -Nru hdf5-1.12.1-orig/hl/fortran/src/H5LTff_gen.F90.mingw64 hdf5-1.12.1-patched/hl/fortran/src/H5LTff_gen.F90.mingw64
--- hdf5-1.12.1-orig/hl/fortran/src/H5LTff_gen.F90.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/hl/fortran/src/H5LTff_gen.F90.mingw64	2024-08-07 05:23:38.000000000 -0400
@@ -0,0 +1,6515 @@
+!****h* ROBODoc/H5LTff_gen.F90
+!
+! NAME
+!  H5LTff_gen
+! 
+! PURPOSE
+!  This module is generated at build by H5HL_buildiface.F90 to handle all the
+!  detected REAL/INTEGER KINDs for APIs being passed those KINDs. Currently these 
+!  are H5LT and H5TB APIs
+!
+! COPYRIGHT
+! * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+!   Copyright by The HDF Group.                                               *
+!   All rights reserved.                                                      *
+!                                                                             *
+!   This file is part of HDF5.  The full HDF5 copyright notice, including     *
+!   terms governing use, modification, and redistribution, is contained in    *
+!   the COPYING file, which can be found at the root of the source code       *
+!   distribution tree, or in https://www.hdfgroup.org/licenses.               *
+!   If you do not have access to either file, you may request a copy from     *
+!   help@hdfgroup.org.                                                        *
+! * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+!
+! AUTHOR
+!   H5HL_buildiface.F90
+!
+!*****
+
+MODULE H5LT
+  USE, INTRINSIC :: ISO_C_BINDING
+  USE h5fortran_types
+  USE H5LT_CONST
+  IMPLICIT NONE
+  INTERFACE h5ltmake_dataset_f
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_4_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_4_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_4_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_4_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_4_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_4_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_4_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_4_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_8_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_8_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_8_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_8_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_8_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_8_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_8_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_8_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_10_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_10_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_10_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_10_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_10_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_10_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_10_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_10_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_16_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_16_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_16_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_16_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_16_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_16_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_16_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_real_kind_16_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_1_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_1_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_1_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_1_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_1_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_1_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_1_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_1_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_2_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_2_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_2_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_2_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_2_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_2_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_2_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_2_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_4_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_4_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_4_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_4_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_4_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_4_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_4_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_4_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_8_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_8_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_8_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_8_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_8_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_8_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_8_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_8_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_16_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_16_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_16_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_16_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_16_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_16_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_16_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_integer_kind_16_rank_7
+  END INTERFACE
+  INTERFACE h5ltread_dataset_f
+     MODULE PROCEDURE h5ltread_dataset_real_kind_4_rank_0
+     MODULE PROCEDURE h5ltread_dataset_real_kind_4_rank_1
+     MODULE PROCEDURE h5ltread_dataset_real_kind_4_rank_2
+     MODULE PROCEDURE h5ltread_dataset_real_kind_4_rank_3
+     MODULE PROCEDURE h5ltread_dataset_real_kind_4_rank_4
+     MODULE PROCEDURE h5ltread_dataset_real_kind_4_rank_5
+     MODULE PROCEDURE h5ltread_dataset_real_kind_4_rank_6
+     MODULE PROCEDURE h5ltread_dataset_real_kind_4_rank_7
+     MODULE PROCEDURE h5ltread_dataset_real_kind_8_rank_0
+     MODULE PROCEDURE h5ltread_dataset_real_kind_8_rank_1
+     MODULE PROCEDURE h5ltread_dataset_real_kind_8_rank_2
+     MODULE PROCEDURE h5ltread_dataset_real_kind_8_rank_3
+     MODULE PROCEDURE h5ltread_dataset_real_kind_8_rank_4
+     MODULE PROCEDURE h5ltread_dataset_real_kind_8_rank_5
+     MODULE PROCEDURE h5ltread_dataset_real_kind_8_rank_6
+     MODULE PROCEDURE h5ltread_dataset_real_kind_8_rank_7
+     MODULE PROCEDURE h5ltread_dataset_real_kind_10_rank_0
+     MODULE PROCEDURE h5ltread_dataset_real_kind_10_rank_1
+     MODULE PROCEDURE h5ltread_dataset_real_kind_10_rank_2
+     MODULE PROCEDURE h5ltread_dataset_real_kind_10_rank_3
+     MODULE PROCEDURE h5ltread_dataset_real_kind_10_rank_4
+     MODULE PROCEDURE h5ltread_dataset_real_kind_10_rank_5
+     MODULE PROCEDURE h5ltread_dataset_real_kind_10_rank_6
+     MODULE PROCEDURE h5ltread_dataset_real_kind_10_rank_7
+     MODULE PROCEDURE h5ltread_dataset_real_kind_16_rank_0
+     MODULE PROCEDURE h5ltread_dataset_real_kind_16_rank_1
+     MODULE PROCEDURE h5ltread_dataset_real_kind_16_rank_2
+     MODULE PROCEDURE h5ltread_dataset_real_kind_16_rank_3
+     MODULE PROCEDURE h5ltread_dataset_real_kind_16_rank_4
+     MODULE PROCEDURE h5ltread_dataset_real_kind_16_rank_5
+     MODULE PROCEDURE h5ltread_dataset_real_kind_16_rank_6
+     MODULE PROCEDURE h5ltread_dataset_real_kind_16_rank_7
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_1_rank_0
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_1_rank_1
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_1_rank_2
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_1_rank_3
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_1_rank_4
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_1_rank_5
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_1_rank_6
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_1_rank_7
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_2_rank_0
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_2_rank_1
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_2_rank_2
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_2_rank_3
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_2_rank_4
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_2_rank_5
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_2_rank_6
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_2_rank_7
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_4_rank_0
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_4_rank_1
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_4_rank_2
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_4_rank_3
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_4_rank_4
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_4_rank_5
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_4_rank_6
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_4_rank_7
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_8_rank_0
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_8_rank_1
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_8_rank_2
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_8_rank_3
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_8_rank_4
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_8_rank_5
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_8_rank_6
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_8_rank_7
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_16_rank_0
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_16_rank_1
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_16_rank_2
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_16_rank_3
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_16_rank_4
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_16_rank_5
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_16_rank_6
+     MODULE PROCEDURE h5ltread_dataset_integer_kind_16_rank_7
+  END INTERFACE
+  INTERFACE h5ltread_dataset_int_f
+     MODULE PROCEDURE h5ltread_dataset_int_kind_1_rank_0
+     MODULE PROCEDURE h5ltread_dataset_int_kind_1_rank_1
+     MODULE PROCEDURE h5ltread_dataset_int_kind_1_rank_2
+     MODULE PROCEDURE h5ltread_dataset_int_kind_1_rank_3
+     MODULE PROCEDURE h5ltread_dataset_int_kind_1_rank_4
+     MODULE PROCEDURE h5ltread_dataset_int_kind_1_rank_5
+     MODULE PROCEDURE h5ltread_dataset_int_kind_1_rank_6
+     MODULE PROCEDURE h5ltread_dataset_int_kind_1_rank_7
+     MODULE PROCEDURE h5ltread_dataset_int_kind_2_rank_0
+     MODULE PROCEDURE h5ltread_dataset_int_kind_2_rank_1
+     MODULE PROCEDURE h5ltread_dataset_int_kind_2_rank_2
+     MODULE PROCEDURE h5ltread_dataset_int_kind_2_rank_3
+     MODULE PROCEDURE h5ltread_dataset_int_kind_2_rank_4
+     MODULE PROCEDURE h5ltread_dataset_int_kind_2_rank_5
+     MODULE PROCEDURE h5ltread_dataset_int_kind_2_rank_6
+     MODULE PROCEDURE h5ltread_dataset_int_kind_2_rank_7
+     MODULE PROCEDURE h5ltread_dataset_int_kind_4_rank_0
+     MODULE PROCEDURE h5ltread_dataset_int_kind_4_rank_1
+     MODULE PROCEDURE h5ltread_dataset_int_kind_4_rank_2
+     MODULE PROCEDURE h5ltread_dataset_int_kind_4_rank_3
+     MODULE PROCEDURE h5ltread_dataset_int_kind_4_rank_4
+     MODULE PROCEDURE h5ltread_dataset_int_kind_4_rank_5
+     MODULE PROCEDURE h5ltread_dataset_int_kind_4_rank_6
+     MODULE PROCEDURE h5ltread_dataset_int_kind_4_rank_7
+     MODULE PROCEDURE h5ltread_dataset_int_kind_8_rank_0
+     MODULE PROCEDURE h5ltread_dataset_int_kind_8_rank_1
+     MODULE PROCEDURE h5ltread_dataset_int_kind_8_rank_2
+     MODULE PROCEDURE h5ltread_dataset_int_kind_8_rank_3
+     MODULE PROCEDURE h5ltread_dataset_int_kind_8_rank_4
+     MODULE PROCEDURE h5ltread_dataset_int_kind_8_rank_5
+     MODULE PROCEDURE h5ltread_dataset_int_kind_8_rank_6
+     MODULE PROCEDURE h5ltread_dataset_int_kind_8_rank_7
+     MODULE PROCEDURE h5ltread_dataset_int_kind_16_rank_0
+     MODULE PROCEDURE h5ltread_dataset_int_kind_16_rank_1
+     MODULE PROCEDURE h5ltread_dataset_int_kind_16_rank_2
+     MODULE PROCEDURE h5ltread_dataset_int_kind_16_rank_3
+     MODULE PROCEDURE h5ltread_dataset_int_kind_16_rank_4
+     MODULE PROCEDURE h5ltread_dataset_int_kind_16_rank_5
+     MODULE PROCEDURE h5ltread_dataset_int_kind_16_rank_6
+     MODULE PROCEDURE h5ltread_dataset_int_kind_16_rank_7
+  END INTERFACE
+  INTERFACE h5ltmake_dataset_int_f
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_1_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_1_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_1_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_1_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_1_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_1_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_1_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_1_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_2_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_2_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_2_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_2_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_2_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_2_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_2_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_2_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_4_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_4_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_4_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_4_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_4_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_4_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_4_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_4_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_8_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_8_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_8_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_8_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_8_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_8_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_8_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_8_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_16_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_16_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_16_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_16_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_16_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_16_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_16_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_int_kind_16_rank_7
+  END INTERFACE
+  INTERFACE h5ltmake_dataset_float_f
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_4_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_4_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_4_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_4_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_4_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_4_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_4_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_4_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_8_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_8_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_8_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_8_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_8_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_8_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_8_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_8_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_10_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_10_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_10_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_10_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_10_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_10_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_10_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_10_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_16_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_16_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_16_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_16_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_16_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_16_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_16_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_float_kind_16_rank_7
+  END INTERFACE
+  INTERFACE h5ltmake_dataset_double_f
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_4_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_4_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_4_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_4_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_4_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_4_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_4_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_4_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_8_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_8_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_8_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_8_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_8_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_8_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_8_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_8_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_10_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_10_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_10_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_10_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_10_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_10_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_10_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_10_rank_7
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_16_rank_0
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_16_rank_1
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_16_rank_2
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_16_rank_3
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_16_rank_4
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_16_rank_5
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_16_rank_6
+     MODULE PROCEDURE h5ltmake_dataset_double_kind_16_rank_7
+  END INTERFACE
+  INTERFACE h5ltread_dataset_float_f
+     MODULE PROCEDURE h5ltread_dataset_float_kind_4_rank_0
+     MODULE PROCEDURE h5ltread_dataset_float_kind_4_rank_1
+     MODULE PROCEDURE h5ltread_dataset_float_kind_4_rank_2
+     MODULE PROCEDURE h5ltread_dataset_float_kind_4_rank_3
+     MODULE PROCEDURE h5ltread_dataset_float_kind_4_rank_4
+     MODULE PROCEDURE h5ltread_dataset_float_kind_4_rank_5
+     MODULE PROCEDURE h5ltread_dataset_float_kind_4_rank_6
+     MODULE PROCEDURE h5ltread_dataset_float_kind_4_rank_7
+     MODULE PROCEDURE h5ltread_dataset_float_kind_8_rank_0
+     MODULE PROCEDURE h5ltread_dataset_float_kind_8_rank_1
+     MODULE PROCEDURE h5ltread_dataset_float_kind_8_rank_2
+     MODULE PROCEDURE h5ltread_dataset_float_kind_8_rank_3
+     MODULE PROCEDURE h5ltread_dataset_float_kind_8_rank_4
+     MODULE PROCEDURE h5ltread_dataset_float_kind_8_rank_5
+     MODULE PROCEDURE h5ltread_dataset_float_kind_8_rank_6
+     MODULE PROCEDURE h5ltread_dataset_float_kind_8_rank_7
+     MODULE PROCEDURE h5ltread_dataset_float_kind_10_rank_0
+     MODULE PROCEDURE h5ltread_dataset_float_kind_10_rank_1
+     MODULE PROCEDURE h5ltread_dataset_float_kind_10_rank_2
+     MODULE PROCEDURE h5ltread_dataset_float_kind_10_rank_3
+     MODULE PROCEDURE h5ltread_dataset_float_kind_10_rank_4
+     MODULE PROCEDURE h5ltread_dataset_float_kind_10_rank_5
+     MODULE PROCEDURE h5ltread_dataset_float_kind_10_rank_6
+     MODULE PROCEDURE h5ltread_dataset_float_kind_10_rank_7
+     MODULE PROCEDURE h5ltread_dataset_float_kind_16_rank_0
+     MODULE PROCEDURE h5ltread_dataset_float_kind_16_rank_1
+     MODULE PROCEDURE h5ltread_dataset_float_kind_16_rank_2
+     MODULE PROCEDURE h5ltread_dataset_float_kind_16_rank_3
+     MODULE PROCEDURE h5ltread_dataset_float_kind_16_rank_4
+     MODULE PROCEDURE h5ltread_dataset_float_kind_16_rank_5
+     MODULE PROCEDURE h5ltread_dataset_float_kind_16_rank_6
+     MODULE PROCEDURE h5ltread_dataset_float_kind_16_rank_7
+  END INTERFACE
+  INTERFACE h5ltread_dataset_double_f
+     MODULE PROCEDURE h5ltread_dataset_double_kind_4_rank_0
+     MODULE PROCEDURE h5ltread_dataset_double_kind_4_rank_1
+     MODULE PROCEDURE h5ltread_dataset_double_kind_4_rank_2
+     MODULE PROCEDURE h5ltread_dataset_double_kind_4_rank_3
+     MODULE PROCEDURE h5ltread_dataset_double_kind_4_rank_4
+     MODULE PROCEDURE h5ltread_dataset_double_kind_4_rank_5
+     MODULE PROCEDURE h5ltread_dataset_double_kind_4_rank_6
+     MODULE PROCEDURE h5ltread_dataset_double_kind_4_rank_7
+     MODULE PROCEDURE h5ltread_dataset_double_kind_8_rank_0
+     MODULE PROCEDURE h5ltread_dataset_double_kind_8_rank_1
+     MODULE PROCEDURE h5ltread_dataset_double_kind_8_rank_2
+     MODULE PROCEDURE h5ltread_dataset_double_kind_8_rank_3
+     MODULE PROCEDURE h5ltread_dataset_double_kind_8_rank_4
+     MODULE PROCEDURE h5ltread_dataset_double_kind_8_rank_5
+     MODULE PROCEDURE h5ltread_dataset_double_kind_8_rank_6
+     MODULE PROCEDURE h5ltread_dataset_double_kind_8_rank_7
+     MODULE PROCEDURE h5ltread_dataset_double_kind_10_rank_0
+     MODULE PROCEDURE h5ltread_dataset_double_kind_10_rank_1
+     MODULE PROCEDURE h5ltread_dataset_double_kind_10_rank_2
+     MODULE PROCEDURE h5ltread_dataset_double_kind_10_rank_3
+     MODULE PROCEDURE h5ltread_dataset_double_kind_10_rank_4
+     MODULE PROCEDURE h5ltread_dataset_double_kind_10_rank_5
+     MODULE PROCEDURE h5ltread_dataset_double_kind_10_rank_6
+     MODULE PROCEDURE h5ltread_dataset_double_kind_10_rank_7
+     MODULE PROCEDURE h5ltread_dataset_double_kind_16_rank_0
+     MODULE PROCEDURE h5ltread_dataset_double_kind_16_rank_1
+     MODULE PROCEDURE h5ltread_dataset_double_kind_16_rank_2
+     MODULE PROCEDURE h5ltread_dataset_double_kind_16_rank_3
+     MODULE PROCEDURE h5ltread_dataset_double_kind_16_rank_4
+     MODULE PROCEDURE h5ltread_dataset_double_kind_16_rank_5
+     MODULE PROCEDURE h5ltread_dataset_double_kind_16_rank_6
+     MODULE PROCEDURE h5ltread_dataset_double_kind_16_rank_7
+  END INTERFACE
+CONTAINS
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_4_rank_0(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=4),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_4_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_4_rank_1(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_4_rank_2(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_4_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_4_rank_3(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_4_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_4_rank_4(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_4_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_4_rank_5(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_4_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_4_rank_6(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_4_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_4_rank_7(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_4_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_8_rank_0(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=8),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_8_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_8_rank_1(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_8_rank_2(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_8_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_8_rank_3(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_8_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_8_rank_4(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_8_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_8_rank_5(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_8_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_8_rank_6(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_8_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_8_rank_7(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_8_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_10_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_10_rank_0(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=10),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_10_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_10_rank_1(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_10_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_10_rank_2(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_10_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_10_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_10_rank_3(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_10_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_10_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_10_rank_4(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_10_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_10_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_10_rank_5(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_10_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_10_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_10_rank_6(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_10_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_10_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_10_rank_7(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_10_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_16_rank_0(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=16),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_16_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_16_rank_1(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_16_rank_2(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_16_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_16_rank_3(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_16_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_16_rank_4(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_16_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_16_rank_5(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_16_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_16_rank_6(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_16_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_real_kind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_real_kind_16_rank_7(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,type_id,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_real_kind_16_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_4_rank_0(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_4_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_4_rank_1(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_4_rank_2(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_4_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_4_rank_3(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_4_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_4_rank_4(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_4_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_4_rank_5(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_4_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_4_rank_6(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_4_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_4_rank_7(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_4_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_8_rank_0(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_8_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_8_rank_1(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_8_rank_2(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_8_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_8_rank_3(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_8_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_8_rank_4(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_8_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_8_rank_5(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_8_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_8_rank_6(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_8_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_8_rank_7(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_8_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_10_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_10_rank_0(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_10_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_10_rank_1(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_10_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_10_rank_2(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_10_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_10_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_10_rank_3(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_10_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_10_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_10_rank_4(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_10_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_10_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_10_rank_5(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_10_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_10_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_10_rank_6(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_10_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_10_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_10_rank_7(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_10_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_16_rank_0(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_16_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_16_rank_1(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_16_rank_2(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_16_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_16_rank_3(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_16_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_16_rank_4(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_16_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_16_rank_5(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_16_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_16_rank_6(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_16_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_real_kind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_real_kind_16_rank_7(loc_id,dset_name,type_id,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,type_id,f_ptr)
+  END SUBROUTINE h5ltread_dataset_real_kind_16_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_4_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_4_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_4_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_4_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_4_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_4_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_4_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_4_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_4_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_4_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_4_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_4_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_4_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_4_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_4_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_8_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_8_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_8_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_8_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_8_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_8_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_8_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_8_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_8_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_8_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_8_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_8_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_8_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_8_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_8_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_10_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_10_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_10_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_10_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_10_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_10_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_10_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_10_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_10_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_10_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_10_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_10_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_10_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_10_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_10_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_10_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_10_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_10_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_10_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_10_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_10_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_10_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_16_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_16_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_16_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_16_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_16_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_16_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_16_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_16_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_16_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_16_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_16_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_16_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_16_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_float_kind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_float_kind_16_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_float_kind_16_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_4_rank_0(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_4_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_4_rank_1(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_4_rank_2(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_4_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_4_rank_3(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_4_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_4_rank_4(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_4_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_4_rank_5(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_4_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_4_rank_6(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_4_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_4_rank_7(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_4_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_8_rank_0(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_8_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_8_rank_1(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_8_rank_2(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_8_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_8_rank_3(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_8_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_8_rank_4(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_8_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_8_rank_5(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_8_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_8_rank_6(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_8_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_8_rank_7(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_8_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_10_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_10_rank_0(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_10_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_10_rank_1(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_10_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_10_rank_2(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_10_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_10_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_10_rank_3(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_10_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_10_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_10_rank_4(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_10_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_10_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_10_rank_5(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_10_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_10_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_10_rank_6(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_10_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_10_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_10_rank_7(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_10_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_16_rank_0(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_16_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_16_rank_1(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_16_rank_2(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_16_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_16_rank_3(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_16_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_16_rank_4(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_16_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_16_rank_5(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_16_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_16_rank_6(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_16_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_float_kind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_float_kind_16_rank_7(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_REAL,f_ptr)
+  END SUBROUTINE h5ltread_dataset_float_kind_16_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_4_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_4_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_4_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_4_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_4_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_4_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_4_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_4_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_4_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_4_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_4_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_4_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_4_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_4_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_4_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_8_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_8_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_8_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_8_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_8_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_8_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_8_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_8_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_8_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_8_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_8_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_8_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_8_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_8_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_8_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_10_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_10_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_10_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_10_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_10_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_10_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_10_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_10_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_10_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_10_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_10_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_10_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_10_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_10_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_10_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_10_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_10_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_10_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_10_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_10_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_10_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_10_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_16_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_16_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_16_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_16_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_16_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_16_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_16_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_16_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_16_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_16_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_16_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_16_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_16_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_double_kind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_double_kind_16_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id,namelen,dset_name,rank,dims,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltmake_dataset_double_kind_16_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_4_rank_0(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_4_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_4_rank_1(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_4_rank_2(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_4_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_4_rank_3(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_4_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_4_rank_4(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_4_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_4_rank_5(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_4_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_4_rank_6(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_4_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_4_rank_7(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_4_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_8_rank_0(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_8_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_8_rank_1(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_8_rank_2(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_8_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_8_rank_3(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_8_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_8_rank_4(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_8_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_8_rank_5(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_8_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_8_rank_6(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_8_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_8_rank_7(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_8_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_10_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_10_rank_0(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_10_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_10_rank_1(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_10_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_10_rank_2(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_10_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_10_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_10_rank_3(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_10_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_10_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_10_rank_4(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_10_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_10_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_10_rank_5(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_10_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_10_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_10_rank_6(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_10_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_10_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_10_rank_7(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_10_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_16_rank_0(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_16_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_16_rank_1(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_16_rank_2(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_16_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_16_rank_3(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_16_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_16_rank_4(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_16_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_16_rank_5(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_16_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_16_rank_6(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_16_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_double_kind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_double_kind_16_rank_7(loc_id,dset_name,buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id,namelen,dset_name,H5T_NATIVE_DOUBLE,f_ptr)
+  END SUBROUTINE h5ltread_dataset_double_kind_16_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_1_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_0(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_1_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_1(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_1_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_2(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_1_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_3(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_1_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_4(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_1_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_5(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_1_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_6(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_1_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_7(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_1_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_2_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_0(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_2_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_1(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_2_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_2(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_2_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_3(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_2_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_4(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_2_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_5(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_2_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_6(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_2_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_7(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_2_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_0(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_1(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_2(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_3(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_4(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_5(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_6(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_7(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_4_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_0(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_1(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_2(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_3(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_4(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_5(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_6(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_7(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_8_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_0(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_1(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_2(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_3(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_4(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_5(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_6(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_integer_kind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_7(loc_id,dset_name,rank,dims,type_id,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_integer_kind_16_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_1_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_1_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf               ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_1_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_1_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_1_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1)            ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_1_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_1_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_1_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1)          ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_1_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_1_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_1_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1)        ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_1_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_1_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_1_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1)      ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_1_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_1_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_1_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1)    ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_1_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_1_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_1_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1)  ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_1_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_1_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_1_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1,1)), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_1_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_2_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_2_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf               ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_2_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_2_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_2_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1)            ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_2_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_2_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_2_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1)          ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_2_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_2_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_2_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1)        ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_2_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_2_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_2_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1)      ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_2_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_2_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_2_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1)    ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_2_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_2_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_2_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1)  ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_2_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_2_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_2_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1,1)), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_2_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_4_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf               ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_4_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_4_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1)            ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_4_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1)          ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_4_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_4_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1)        ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_4_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_4_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1)      ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_4_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_4_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1)    ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_4_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_4_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1)  ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_4_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_4_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1,1)), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_4_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_8_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf               ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_8_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_8_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1)            ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_8_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1)          ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_8_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_8_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1)        ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_8_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_8_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1)      ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_8_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_8_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1)    ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_8_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_8_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1)  ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_8_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_8_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1,1)), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_8_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_16_rank_0(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(IN), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf               ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_16_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_16_rank_1(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1)            ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_16_rank_2(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1)          ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_16_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_16_rank_3(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1)        ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_16_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_16_rank_4(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1)      ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_16_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_16_rank_5(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1)    ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_16_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_16_rank_6(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1)  ), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_16_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltmake_dataset_int_kind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5ltmake_dataset_int_kind_16_rank_7(loc_id,dset_name,rank,dims,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER,          INTENT(IN) :: rank
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(IN), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1,1)), H5_INTEGER_KIND)
+    errcode = h5ltmake_dataset_c(loc_id, namelen, dset_name, rank, dims, type_id, f_ptr)
+  END SUBROUTINE h5ltmake_dataset_int_kind_16_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_1_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_1_rank_0(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_1_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_1_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_1_rank_1(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_1_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_1_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_1_rank_2(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_1_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_1_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_1_rank_3(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_1_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_1_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_1_rank_4(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_1_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_1_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_1_rank_5(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_1_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_1_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_1_rank_6(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_1_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_1_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_1_rank_7(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_1_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_2_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_2_rank_0(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_2_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_2_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_2_rank_1(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_2_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_2_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_2_rank_2(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_2_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_2_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_2_rank_3(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_2_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_2_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_2_rank_4(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_2_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_2_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_2_rank_5(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_2_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_2_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_2_rank_6(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_2_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_2_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_2_rank_7(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_2_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_4_rank_0(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_4_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_4_rank_1(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_4_rank_2(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_4_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_4_rank_3(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_4_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_4_rank_4(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_4_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_4_rank_5(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_4_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_4_rank_6(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_4_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_4_rank_7(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_4_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_8_rank_0(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_8_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_8_rank_1(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_8_rank_2(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_8_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_8_rank_3(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_8_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_8_rank_4(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_8_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_8_rank_5(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_8_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_8_rank_6(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_8_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_8_rank_7(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_8_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_16_rank_0(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_16_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_16_rank_1(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_16_rank_2(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_16_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_16_rank_3(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_16_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_16_rank_4(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_16_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_16_rank_5(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_16_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_16_rank_6(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_16_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_integer_kind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_integer_kind_16_rank_7(loc_id,dset_name, type_id, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(hid_t),   INTENT(in) :: type_id
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_integer_kind_16_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_1_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_1_rank_0(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf               ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_1_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_1_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_1_rank_1(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1)            ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_1_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_1_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_1_rank_2(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1)          ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_1_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_1_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_1_rank_3(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1)        ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_1_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_1_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_1_rank_4(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1)      ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_1_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_1_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_1_rank_5(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1)    ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_1_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_1_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_1_rank_6(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1)  ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_1_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_1_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_1_rank_7(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=1),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1,1)), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_1_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_2_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_2_rank_0(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf               ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_2_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_2_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_2_rank_1(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1)            ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_2_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_2_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_2_rank_2(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1)          ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_2_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_2_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_2_rank_3(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1)        ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_2_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_2_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_2_rank_4(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1)      ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_2_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_2_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_2_rank_5(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1)    ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_2_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_2_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_2_rank_6(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1)  ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_2_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_2_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_2_rank_7(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=2),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1,1)), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_2_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_4_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_4_rank_0(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf               ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_4_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_4_rank_1(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1)            ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_4_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_4_rank_2(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1)          ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_4_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_4_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_4_rank_3(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1)        ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_4_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_4_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_4_rank_4(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1)      ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_4_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_4_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_4_rank_5(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1)    ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_4_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_4_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_4_rank_6(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1)  ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_4_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_4_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_4_rank_7(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=4),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1,1)), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_4_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_8_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_8_rank_0(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf               ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_8_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_8_rank_1(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1)            ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_8_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_8_rank_2(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1)          ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_8_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_8_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_8_rank_3(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1)        ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_8_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_8_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_8_rank_4(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1)      ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_8_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_8_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_8_rank_5(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1)    ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_8_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_8_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_8_rank_6(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1)  ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_8_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_8_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_8_rank_7(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=8),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1,1)), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_8_rank_7
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_16_rank_0
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_16_rank_0(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf               )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf               ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_16_rank_0
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_16_rank_1(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1)            ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_16_rank_2
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_16_rank_2(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1)          )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1)          ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_16_rank_2
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_16_rank_3
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_16_rank_3(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1)        )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1)        ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_16_rank_3
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_16_rank_4
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_16_rank_4(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1)      )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1)      ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_16_rank_4
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_16_rank_5
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_16_rank_5(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1)    )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1)    ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_16_rank_5
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_16_rank_6
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_16_rank_6(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1)  )
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1)  ), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_16_rank_6
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5ltread_dataset_int_kind_16_rank_7
+!DEC$endif
+  SUBROUTINE h5ltread_dataset_int_kind_16_rank_7(loc_id,dset_name, buf,dims,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER(hsize_t), DIMENSION(*), INTENT(in) :: dims
+    INTEGER(KIND=16),INTENT(INOUT), DIMENSION(dims(1),dims(2),dims(3),dims(4),dims(5),dims(6),dims(7)), TARGET :: buf
+    INTEGER :: errcode 
+    TYPE(C_PTR) :: f_ptr
+    INTEGER(size_t) :: namelen
+    INTEGER(hid_t) :: type_id
+    f_ptr = C_LOC(buf(1,1,1,1,1,1,1))
+    namelen = LEN(dset_name)
+    type_id = h5kind_to_type(KIND(buf(1,1,1,1,1,1,1)), H5_INTEGER_KIND)
+    errcode = h5ltread_dataset_c(loc_id, namelen, dset_name, type_id, f_ptr)
+  END SUBROUTINE h5ltread_dataset_int_kind_16_rank_7
+END MODULE H5LT
diff -Nru hdf5-1.12.1-orig/hl/fortran/src/H5TBff_gen.F90.mingw64 hdf5-1.12.1-patched/hl/fortran/src/H5TBff_gen.F90.mingw64
--- hdf5-1.12.1-orig/hl/fortran/src/H5TBff_gen.F90.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/hl/fortran/src/H5TBff_gen.F90.mingw64	2024-08-07 05:23:38.000000000 -0400
@@ -0,0 +1,465 @@
+!****h* ROBODoc/H5TBff_gen.F90
+!
+! NAME
+!  H5TBff_gen
+! 
+! PURPOSE
+!  This module is generated at build by H5HL_buildiface.F90 to handle all the
+!  detected REAL/INTEGER KINDs for APIs being passed those KINDs. Currently these 
+!  are H5LT and H5TB APIs
+!
+! COPYRIGHT
+! * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+!   Copyright by The HDF Group.                                               *
+!   All rights reserved.                                                      *
+!                                                                             *
+!   This file is part of HDF5.  The full HDF5 copyright notice, including     *
+!   terms governing use, modification, and redistribution, is contained in    *
+!   the COPYING file, which can be found at the root of the source code       *
+!   distribution tree, or in https://www.hdfgroup.org/licenses.               *
+!   If you do not have access to either file, you may request a copy from     *
+!   help@hdfgroup.org.                                                        *
+! * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+!
+! AUTHOR
+!   H5HL_buildiface.F90
+!
+!*****
+
+MODULE H5TB
+  USE, INTRINSIC :: ISO_C_BINDING
+  USE h5fortran_types
+  USE H5TB_CONST
+  IMPLICIT NONE
+  INTERFACE h5tbwrite_field_name_f
+     MODULE PROCEDURE h5tbwrite_field_name_kind_4_rank_1
+     MODULE PROCEDURE h5tbwrite_field_name_kind_8_rank_1
+     MODULE PROCEDURE h5tbwrite_field_name_kind_10_rank_1
+     MODULE PROCEDURE h5tbwrite_field_name_kind_16_rank_1
+  END INTERFACE
+  INTERFACE h5tbread_field_name_f
+     MODULE PROCEDURE h5tbread_field_name_kind_4_rank_1
+     MODULE PROCEDURE h5tbread_field_name_kind_8_rank_1
+     MODULE PROCEDURE h5tbread_field_name_kind_10_rank_1
+     MODULE PROCEDURE h5tbread_field_name_kind_16_rank_1
+  END INTERFACE
+  INTERFACE h5tbwrite_field_index_f
+     MODULE PROCEDURE h5tbwrite_field_index_kind_4_rank_1
+     MODULE PROCEDURE h5tbwrite_field_index_kind_8_rank_1
+     MODULE PROCEDURE h5tbwrite_field_index_kind_10_rank_1
+     MODULE PROCEDURE h5tbwrite_field_index_kind_16_rank_1
+  END INTERFACE
+  INTERFACE h5tbread_field_index_f
+     MODULE PROCEDURE h5tbread_field_index_kind_4_rank_1
+     MODULE PROCEDURE h5tbread_field_index_kind_8_rank_1
+     MODULE PROCEDURE h5tbread_field_index_kind_10_rank_1
+     MODULE PROCEDURE h5tbread_field_index_kind_16_rank_1
+  END INTERFACE
+  INTERFACE h5tbinsert_field_f
+     MODULE PROCEDURE h5tbinsert_field_kind_4_rank_1
+     MODULE PROCEDURE h5tbinsert_field_kind_8_rank_1
+     MODULE PROCEDURE h5tbinsert_field_kind_10_rank_1
+     MODULE PROCEDURE h5tbinsert_field_kind_16_rank_1
+  END INTERFACE
+CONTAINS
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbwrite_field_name_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5tbwrite_field_name_kind_4_rank_1(loc_id,dset_name,field_name,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    CHARACTER(LEN=*), INTENT(in) :: field_name
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=4),INTENT(IN), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    INTEGER(size_t) :: namelen1
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbwrite_field_name_c(loc_id,namelen,dset_name,namelen1,field_name,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbwrite_field_name_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbwrite_field_name_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5tbwrite_field_name_kind_8_rank_1(loc_id,dset_name,field_name,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    CHARACTER(LEN=*), INTENT(in) :: field_name
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=8),INTENT(IN), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    INTEGER(size_t) :: namelen1
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbwrite_field_name_c(loc_id,namelen,dset_name,namelen1,field_name,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbwrite_field_name_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbwrite_field_name_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5tbwrite_field_name_kind_10_rank_1(loc_id,dset_name,field_name,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    CHARACTER(LEN=*), INTENT(in) :: field_name
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=10),INTENT(IN), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    INTEGER(size_t) :: namelen1
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbwrite_field_name_c(loc_id,namelen,dset_name,namelen1,field_name,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbwrite_field_name_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbwrite_field_name_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5tbwrite_field_name_kind_16_rank_1(loc_id,dset_name,field_name,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    CHARACTER(LEN=*), INTENT(in) :: field_name
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=16),INTENT(IN), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    INTEGER(size_t) :: namelen1
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbwrite_field_name_c(loc_id,namelen,dset_name,namelen1,field_name,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbwrite_field_name_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbread_field_name_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5tbread_field_name_kind_4_rank_1(loc_id,dset_name,field_name,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    CHARACTER(LEN=*), INTENT(in) :: field_name
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    INTEGER(size_t) :: namelen1
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbread_field_name_c(loc_id,namelen,dset_name,namelen1,field_name,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbread_field_name_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbread_field_name_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5tbread_field_name_kind_8_rank_1(loc_id,dset_name,field_name,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    CHARACTER(LEN=*), INTENT(in) :: field_name
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    INTEGER(size_t) :: namelen1
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbread_field_name_c(loc_id,namelen,dset_name,namelen1,field_name,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbread_field_name_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbread_field_name_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5tbread_field_name_kind_10_rank_1(loc_id,dset_name,field_name,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    CHARACTER(LEN=*), INTENT(in) :: field_name
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    INTEGER(size_t) :: namelen1
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbread_field_name_c(loc_id,namelen,dset_name,namelen1,field_name,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbread_field_name_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbread_field_name_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5tbread_field_name_kind_16_rank_1(loc_id,dset_name,field_name,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    CHARACTER(LEN=*), INTENT(in) :: field_name
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    INTEGER(size_t) :: namelen1
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbread_field_name_c(loc_id,namelen,dset_name,namelen1,field_name,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbread_field_name_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbwrite_field_index_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5tbwrite_field_index_kind_4_rank_1(loc_id,dset_name,field_index,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER, INTENT(in) :: field_index
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=4),INTENT(IN), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5tbwrite_field_index_c(loc_id,namelen,dset_name,field_index,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbwrite_field_index_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbwrite_field_index_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5tbwrite_field_index_kind_8_rank_1(loc_id,dset_name,field_index,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER, INTENT(in) :: field_index
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=8),INTENT(IN), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5tbwrite_field_index_c(loc_id,namelen,dset_name,field_index,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbwrite_field_index_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbwrite_field_index_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5tbwrite_field_index_kind_10_rank_1(loc_id,dset_name,field_index,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER, INTENT(in) :: field_index
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=10),INTENT(IN), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5tbwrite_field_index_c(loc_id,namelen,dset_name,field_index,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbwrite_field_index_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbwrite_field_index_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5tbwrite_field_index_kind_16_rank_1(loc_id,dset_name,field_index,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER, INTENT(in) :: field_index
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=16),INTENT(IN), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5tbwrite_field_index_c(loc_id,namelen,dset_name,field_index,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbwrite_field_index_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbread_field_index_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5tbread_field_index_kind_4_rank_1(loc_id,dset_name,field_index,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER, INTENT(in) :: field_index
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=4),INTENT(INOUT), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5tbread_field_index_c(loc_id,namelen,dset_name,field_index,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbread_field_index_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbread_field_index_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5tbread_field_index_kind_8_rank_1(loc_id,dset_name,field_index,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER, INTENT(in) :: field_index
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=8),INTENT(INOUT), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5tbread_field_index_c(loc_id,namelen,dset_name,field_index,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbread_field_index_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbread_field_index_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5tbread_field_index_kind_10_rank_1(loc_id,dset_name,field_index,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER, INTENT(in) :: field_index
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=10),INTENT(INOUT), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5tbread_field_index_c(loc_id,namelen,dset_name,field_index,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbread_field_index_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbread_field_index_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5tbread_field_index_kind_16_rank_1(loc_id,dset_name,field_index,start, nrecords,type_size,buf,errcode)
+    IMPLICIT NONE
+    INTEGER(hid_t)  , INTENT(IN) :: loc_id
+    CHARACTER(LEN=*), INTENT(IN) :: dset_name
+    INTEGER, INTENT(in) :: field_index
+    INTEGER(hsize_t), INTENT(in) :: start
+    INTEGER(hsize_t), INTENT(in) :: nrecords
+    INTEGER(size_t),  INTENT(in) :: type_size
+    REAL(KIND=16),INTENT(INOUT), DIMENSION(*), TARGET :: buf
+    INTEGER :: errcode 
+    INTEGER(size_t) :: namelen
+    TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    errcode = h5tbread_field_index_c(loc_id,namelen,dset_name,field_index,start,nrecords,type_size,f_ptr)
+  END SUBROUTINE h5tbread_field_index_kind_16_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbinsert_field_kind_4_rank_1
+!DEC$endif
+  SUBROUTINE h5tbinsert_field_kind_4_rank_1(loc_id,dset_name,field_name,field_type,field_index,buf,errcode)
+    IMPLICIT NONE
+        INTEGER(hid_t),   INTENT(in) :: loc_id
+        CHARACTER(LEN=*), INTENT(in) :: dset_name
+        CHARACTER(LEN=*), INTENT(in) :: field_name
+        INTEGER(hid_t), INTENT(in)   :: field_type
+        INTEGER, INTENT(in) :: field_index
+        REAL(KIND=4), INTENT(IN), DIMENSION(*), TARGET :: buf
+        INTEGER(size_t) :: namelen
+        INTEGER(size_t) :: namelen1
+        INTEGER :: errcode
+        TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbinsert_field_c(loc_id,namelen,dset_name,namelen1,field_name,field_type,field_index,f_ptr)
+  END SUBROUTINE h5tbinsert_field_kind_4_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbinsert_field_kind_8_rank_1
+!DEC$endif
+  SUBROUTINE h5tbinsert_field_kind_8_rank_1(loc_id,dset_name,field_name,field_type,field_index,buf,errcode)
+    IMPLICIT NONE
+        INTEGER(hid_t),   INTENT(in) :: loc_id
+        CHARACTER(LEN=*), INTENT(in) :: dset_name
+        CHARACTER(LEN=*), INTENT(in) :: field_name
+        INTEGER(hid_t), INTENT(in)   :: field_type
+        INTEGER, INTENT(in) :: field_index
+        REAL(KIND=8), INTENT(IN), DIMENSION(*), TARGET :: buf
+        INTEGER(size_t) :: namelen
+        INTEGER(size_t) :: namelen1
+        INTEGER :: errcode
+        TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbinsert_field_c(loc_id,namelen,dset_name,namelen1,field_name,field_type,field_index,f_ptr)
+  END SUBROUTINE h5tbinsert_field_kind_8_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbinsert_field_kind_10_rank_1
+!DEC$endif
+  SUBROUTINE h5tbinsert_field_kind_10_rank_1(loc_id,dset_name,field_name,field_type,field_index,buf,errcode)
+    IMPLICIT NONE
+        INTEGER(hid_t),   INTENT(in) :: loc_id
+        CHARACTER(LEN=*), INTENT(in) :: dset_name
+        CHARACTER(LEN=*), INTENT(in) :: field_name
+        INTEGER(hid_t), INTENT(in)   :: field_type
+        INTEGER, INTENT(in) :: field_index
+        REAL(KIND=10), INTENT(IN), DIMENSION(*), TARGET :: buf
+        INTEGER(size_t) :: namelen
+        INTEGER(size_t) :: namelen1
+        INTEGER :: errcode
+        TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbinsert_field_c(loc_id,namelen,dset_name,namelen1,field_name,field_type,field_index,f_ptr)
+  END SUBROUTINE h5tbinsert_field_kind_10_rank_1
+!DEC$if defined(BUILD_HDF5_HL_DLL)
+!DEC$attributes dllexport :: h5tbinsert_field_kind_16_rank_1
+!DEC$endif
+  SUBROUTINE h5tbinsert_field_kind_16_rank_1(loc_id,dset_name,field_name,field_type,field_index,buf,errcode)
+    IMPLICIT NONE
+        INTEGER(hid_t),   INTENT(in) :: loc_id
+        CHARACTER(LEN=*), INTENT(in) :: dset_name
+        CHARACTER(LEN=*), INTENT(in) :: field_name
+        INTEGER(hid_t), INTENT(in)   :: field_type
+        INTEGER, INTENT(in) :: field_index
+        REAL(KIND=16), INTENT(IN), DIMENSION(*), TARGET :: buf
+        INTEGER(size_t) :: namelen
+        INTEGER(size_t) :: namelen1
+        INTEGER :: errcode
+        TYPE(C_PTR) :: f_ptr
+    f_ptr = C_LOC(buf(1)            )
+    namelen = LEN(dset_name)
+    namelen1 = LEN(field_name)
+    errcode = h5tbinsert_field_c(loc_id,namelen,dset_name,namelen1,field_name,field_type,field_index,f_ptr)
+  END SUBROUTINE h5tbinsert_field_kind_16_rank_1
+END MODULE H5TB
diff -Nru hdf5-1.12.1-orig/pac_Cconftest.out.mingw64 hdf5-1.12.1-patched/pac_Cconftest.out.mingw64
--- hdf5-1.12.1-orig/pac_Cconftest.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_Cconftest.out.mingw64	2024-08-07 05:22:40.000000000 -0400
@@ -0,0 +1 @@
+21;33;
\ No newline at end of file
diff -Nru hdf5-1.12.1-orig/pac_fconftest.out.mingw64 hdf5-1.12.1-patched/pac_fconftest.out.mingw64
--- hdf5-1.12.1-orig/pac_fconftest.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_fconftest.out.mingw64	2024-08-07 05:22:55.000000000 -0400
@@ -0,0 +1,5 @@
+1,2,4,8,16
+4,8,10,16
+33
+5
+4
diff -Nru hdf5-1.12.1-orig/pac_sizeof_native_kinds.out.mingw64 hdf5-1.12.1-patched/pac_sizeof_native_kinds.out.mingw64
--- hdf5-1.12.1-orig/pac_sizeof_native_kinds.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_sizeof_native_kinds.out.mingw64	2024-08-07 05:23:00.000000000 -0400
@@ -0,0 +1,6 @@
+                    4
+           4
+                    4
+           4
+                    8
+           8
diff -Nru hdf5-1.12.1-orig/pac_validIntKinds.16.out.mingw64 hdf5-1.12.1-patched/pac_validIntKinds.16.out.mingw64
--- hdf5-1.12.1-orig/pac_validIntKinds.16.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_validIntKinds.16.out.mingw64	2024-08-07 05:22:57.000000000 -0400
@@ -0,0 +1 @@
+16
diff -Nru hdf5-1.12.1-orig/pac_validIntKinds.1.out.mingw64 hdf5-1.12.1-patched/pac_validIntKinds.1.out.mingw64
--- hdf5-1.12.1-orig/pac_validIntKinds.1.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_validIntKinds.1.out.mingw64	2024-08-07 05:22:55.000000000 -0400
@@ -0,0 +1 @@
+1
diff -Nru hdf5-1.12.1-orig/pac_validIntKinds.2.out.mingw64 hdf5-1.12.1-patched/pac_validIntKinds.2.out.mingw64
--- hdf5-1.12.1-orig/pac_validIntKinds.2.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_validIntKinds.2.out.mingw64	2024-08-07 05:22:56.000000000 -0400
@@ -0,0 +1 @@
+2
diff -Nru hdf5-1.12.1-orig/pac_validIntKinds.4.out.mingw64 hdf5-1.12.1-patched/pac_validIntKinds.4.out.mingw64
--- hdf5-1.12.1-orig/pac_validIntKinds.4.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_validIntKinds.4.out.mingw64	2024-08-07 05:22:56.000000000 -0400
@@ -0,0 +1 @@
+4
diff -Nru hdf5-1.12.1-orig/pac_validIntKinds.8.out.mingw64 hdf5-1.12.1-patched/pac_validIntKinds.8.out.mingw64
--- hdf5-1.12.1-orig/pac_validIntKinds.8.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_validIntKinds.8.out.mingw64	2024-08-07 05:22:57.000000000 -0400
@@ -0,0 +1 @@
+8
diff -Nru hdf5-1.12.1-orig/pac_validRealKinds.10.out.mingw64 hdf5-1.12.1-patched/pac_validRealKinds.10.out.mingw64
--- hdf5-1.12.1-orig/pac_validRealKinds.10.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_validRealKinds.10.out.mingw64	2024-08-07 05:22:59.000000000 -0400
@@ -0,0 +1 @@
+16
diff -Nru hdf5-1.12.1-orig/pac_validRealKinds.16.out.mingw64 hdf5-1.12.1-patched/pac_validRealKinds.16.out.mingw64
--- hdf5-1.12.1-orig/pac_validRealKinds.16.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_validRealKinds.16.out.mingw64	2024-08-07 05:22:59.000000000 -0400
@@ -0,0 +1 @@
+16
diff -Nru hdf5-1.12.1-orig/pac_validRealKinds.4.out.mingw64 hdf5-1.12.1-patched/pac_validRealKinds.4.out.mingw64
--- hdf5-1.12.1-orig/pac_validRealKinds.4.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_validRealKinds.4.out.mingw64	2024-08-07 05:22:58.000000000 -0400
@@ -0,0 +1 @@
+4
diff -Nru hdf5-1.12.1-orig/pac_validRealKinds.8.out.mingw64 hdf5-1.12.1-patched/pac_validRealKinds.8.out.mingw64
--- hdf5-1.12.1-orig/pac_validRealKinds.8.out.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/pac_validRealKinds.8.out.mingw64	2024-08-07 05:22:58.000000000 -0400
@@ -0,0 +1 @@
+8
diff -Nru hdf5-1.12.1-orig/src/CMakeLists.txt hdf5-1.12.1-patched/src/CMakeLists.txt
--- hdf5-1.12.1-orig/src/CMakeLists.txt	2021-07-01 17:26:40.000000000 -0400
+++ hdf5-1.12.1-patched/src/CMakeLists.txt	2024-08-07 03:59:53.546297107 -0400
@@ -1069,6 +1069,19 @@
         COMMAND ${CMAKE_COMMAND} -P ${HDF5_SOURCE_DIR}/config/cmake/wait_H5Tinit.cmake
     )
     set_source_files_properties (${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c PROPERTIES GENERATED TRUE)
+    if (BUILD_SHARED_LIBS)
+      add_custom_command (TARGET H5detect POST_BUILD
+          COMMAND    ${CMAKE_COMMAND}
+          ARGS       -E copy_if_different H5Tinit.c shared/H5Tinit.c
+          BYPRODUCTS shared/H5Tinit.c shared/shared_gen_SRCS.stamp1
+          COMMAND    ${CMAKE_COMMAND}
+          ARGS       -E touch shared/shared_gen_SRCS.stamp1
+          DEPENDS ${HDF5_GENERATED_SOURCE_DIR}/H5Tinit_created
+          WORKING_DIRECTORY ${HDF5_GENERATED_SOURCE_DIR}
+          COMMENT    "Copy H5Tinit.c to shared folder"
+      )
+      set_source_files_properties (${HDF5_GENERATED_SOURCE_DIR}/shared/H5Tinit.c PROPERTIES GENERATED TRUE)
+    endif ()
   else ()
     add_custom_command (TARGET H5detect POST_BUILD
         COMMAND    ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:H5detect>
@@ -1097,23 +1110,23 @@
   endif ()
 else ()
   add_custom_command (
-      OUTPUT     gen_SRCS.stamp1
+      OUTPUT     ${HDF5_GENERATED_SOURCE_DIR}/gen_SRCS.stamp1
       COMMAND    ${CMAKE_COMMAND}
       ARGS       -E touch gen_SRCS.stamp1
-      DEPENDS H5Tinit.c
+      DEPENDS    ${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c
       WORKING_DIRECTORY ${HDF5_GENERATED_SOURCE_DIR}
       COMMENT    "Touch existing H5Tinit.c"
   )
   set_source_files_properties (${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c PROPERTIES GENERATED TRUE)
   if (BUILD_SHARED_LIBS)
     add_custom_command (
-        OUTPUT     shared/shared_gen_SRCS.stamp1
+        OUTPUT     ${HDF5_GENERATED_SOURCE_DIR}/shared/shared_gen_SRCS.stamp1
         COMMAND    ${CMAKE_COMMAND}
-        ARGS       -E copy_if_different H5Tinit.c shared/H5Tinit.c
+        ARGS       -E copy_if_different "${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c" "${HDF5_GENERATED_SOURCE_DIR}/shared/H5Tinit.c"
         BYPRODUCTS shared/H5Tinit.c shared/shared_gen_SRCS.stamp1
         COMMAND    ${CMAKE_COMMAND}
         ARGS       -E touch shared/shared_gen_SRCS.stamp1
-        DEPENDS H5Tinit.c
+        DEPENDS    ${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c
         WORKING_DIRECTORY ${HDF5_GENERATED_SOURCE_DIR}
         COMMENT    "Copy existing H5Tinit.c to shared folder"
     )
@@ -1128,6 +1141,7 @@
   clang_format (HDF5_SRC_DETECT_FORMAT ${HDF5_SRC_DIR}/H5detect.c)
 endif ()
 
+if (NOT EXISTS "${HDF5_GENERATED_SOURCE_DIR}/H5lib_settings.c")
 add_executable (H5make_libsettings ${HDF5_SRC_DIR}/H5make_libsettings.c)
 target_include_directories (H5make_libsettings PRIVATE "${HDF5_SRC_DIR};${HDF5_SRC_BINARY_DIR};$<$<BOOL:${HDF5_ENABLE_PARALLEL}>:${MPI_C_INCLUDE_DIRS}>")
 target_compile_definitions(H5make_libsettings PUBLIC ${HDF_EXTRA_C_FLAGS} ${HDF_EXTRA_FLAGS})
@@ -1157,7 +1171,7 @@
     WORKING_DIRECTORY ${HDF5_SRC_BINARY_DIR}
     COMMENT    "Create H5lib_settings.c"
 )
-set_source_files_properties (${HDF5_SRC_BINARY_DIR}/H5lib_settings.c PROPERTIES GENERATED TRUE)
+set_source_files_properties (${HDF5_GENERATED_SOURCE_DIR}/H5lib_settings.c PROPERTIES GENERATED TRUE)
 if (BUILD_SHARED_LIBS)
   add_custom_command (TARGET H5make_libsettings POST_BUILD
       COMMAND    ${CMAKE_COMMAND}
@@ -1166,11 +1180,32 @@
       COMMAND    ${CMAKE_COMMAND}
       ARGS       -E touch shared/shared_gen_SRCS.stamp2
       DEPENDS H5make_libsettings H5lib_settings.c
-      WORKING_DIRECTORY ${HDF5_SRC_BINARY_DIR}
+      WORKING_DIRECTORY ${HDF5_GENERATED_SOURCE_DIR}
       COMMENT    "Copy H5lib_settings.c to shared folder"
   )
-  set_source_files_properties (${HDF5_SRC_BINARY_DIR}/shared/H5lib_settings.c PROPERTIES GENERATED TRUE)
+  set_source_files_properties (${HDF5_GENERATED_SOURCE_DIR}/shared/H5lib_settings.c PROPERTIES GENERATED TRUE)
 endif ()
+else ()
+  add_custom_command (
+      OUTPUT gen_SRCS.stamp2
+      COMMAND    ${CMAKE_COMMAND}
+      ARGS       -E touch gen_SRCS.stamp2
+      DEPENDS    ${HDF5_GENERATED_SOURCE_DIR}/H5lib_settings.c
+      WORKING_DIRECTORY ${HDF5_GENERATED_SOURCE_DIR}
+   )
+  if (BUILD_SHARED_LIBS)
+    add_custom_command (
+        OUTPUT     ${HDF5_GENERATED_SOURCE_DIR}/shared/shared_gen_SRCS.stamp2
+        COMMAND    ${CMAKE_COMMAND}
+        ARGS       -E copy_if_different "${HDF5_GENERATED_SOURCE_DIR}/H5lib_settings.c" "${HDF5_GENERATED_SOURCE_DIR}/shared/H5lib_settings.c"
+        COMMAND    ${CMAKE_COMMAND}
+        ARGS       -E touch shared/shared_gen_SRCS.stamp2
+        DEPENDS    ${HDF5_GENERATED_SOURCE_DIR}/H5lib_settings.c
+        WORKING_DIRECTORY ${HDF5_GENERATED_SOURCE_DIR}
+    )
+    set_source_files_properties (${HDF5_GENERATED_SOURCE_DIR}/shared/H5lib_settings.c PROPERTIES GENERATED TRUE)
+  endif ()
+ endif ()
 
 ## all_packages="AC,B,B2,D,F,FA,FL,FS,HL,I,O,S,ST,T,Z"
 #all_packages="AC,B2,CX,D,F,HL,I,O,S,ST,T,Z"
@@ -1180,7 +1215,7 @@
 # Add H5Tinit source to build - generated by H5detect/CMake at configure time
 #-----------------------------------------------------------------------------
 if (NOT ONLY_SHARED_LIBS)
-  set (gen_SRCS ${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c ${HDF5_SRC_BINARY_DIR}/H5lib_settings.c)
+  set (gen_SRCS ${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c ${HDF5_GENERATED_SOURCE_DIR}/H5lib_settings.c)
   add_custom_target (gen_${HDF5_LIB_TARGET} ALL
     DEPENDS ${lib_prog_deps} ${gen_SRCS} ${HDF5_GENERATED_SOURCE_DIR}/gen_SRCS.stamp1 ${HDF5_SRC_BINARY_DIR}/gen_SRCS.stamp2
     COMMENT "Generation target files"
@@ -1219,9 +1254,9 @@
 endif ()
 
 if (BUILD_SHARED_LIBS)
-  set (shared_gen_SRCS ${HDF5_GENERATED_SOURCE_DIR}/shared/H5Tinit.c ${HDF5_SRC_BINARY_DIR}/shared/H5lib_settings.c)
+  set (shared_gen_SRCS ${HDF5_GENERATED_SOURCE_DIR}/shared/H5Tinit.c ${HDF5_GENERATED_SOURCE_DIR}/shared/H5lib_settings.c)
   add_custom_target (gen_${HDF5_LIBSH_TARGET} ALL
-    DEPENDS ${lib_prog_deps} ${shared_gen_SRCS} ${HDF5_GENERATED_SOURCE_DIR}/shared/shared_gen_SRCS.stamp1 ${HDF5_SRC_BINARY_DIR}/shared/shared_gen_SRCS.stamp2
+    DEPENDS ${lib_prog_deps} ${shared_gen_SRCS} ${HDF5_GENERATED_SOURCE_DIR}/shared/shared_gen_SRCS.stamp1 ${HDF5_GENERATED_SOURCE_DIR}/shared/shared_gen_SRCS.stamp2
     COMMENT "Shared generation target files"
   )
 
@@ -1404,7 +1439,7 @@
   configure_file (${HDF5_DOXYGEN_DIR}/Doxyfile.in ${HDF5_BINARY_DIR}/Doxyfile @ONLY)
   add_custom_target (hdf5lib_doc ALL
         COMMAND ${DOXYGEN_EXECUTABLE} ${HDF5_BINARY_DIR}/Doxyfile
-        DEPENDS ${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c ${HDF5_SRC_BINARY_DIR}/H5lib_settings.c
+        DEPENDS ${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c ${HDF5_GENERATED_SOURCE_DIR}/H5lib_settings.c
         WORKING_DIRECTORY ${HDF5_SRC_DIR}
         COMMENT "Generating HDF5 library Source API documentation with Doxygen"
         VERBATIM )
diff -Nru hdf5-1.12.1-orig/src/H5lib_settings.c.aarch64 hdf5-1.12.1-patched/src/H5lib_settings.c.aarch64
--- hdf5-1.12.1-orig/src/H5lib_settings.c.aarch64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/src/H5lib_settings.c.aarch64	2024-08-07 03:59:53.550297080 -0400
@@ -0,0 +1,123 @@
+/* Generated automatically by H5make_libsettings -- do not edit */
+
+
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Copyright by The HDF Group.                                               *
+ * Copyright by the Board of Trustees of the University of Illinois.         *
+ * All rights reserved.                                                      *
+ *                                                                           *
+ * This file is part of HDF5.  The full HDF5 copyright notice, including     *
+ * terms governing use, modification, and redistribution, is contained in    *
+ * the COPYING file, which can be found at the root of the source code       *
+ * distribution tree, or in https://www.hdfgroup.org/licenses.               *
+ * If you do not have access to either file, you may request a copy from     *
+ * help@hdfgroup.org.                                                        *
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Created:		Oct  4, 2023
+ *			
+ *
+ * Purpose:		This machine-generated source code contains
+ *			information about the library build configuration
+ *
+ * Modifications:
+ *
+ *	DO NOT MAKE MODIFICATIONS TO THIS FILE!
+ *	It was generated by code in `H5make_libsettings.c'.
+ *
+ *-------------------------------------------------------------------------
+ */
+
+char H5libhdf5_settings[]=
+	"        SUMMARY OF THE HDF5 CONFIGURATION\n"
+	"        =================================\n"
+	"\n"
+	"General Information:\n"
+	"-------------------\n"
+	"                   HDF5 Version: 1.12.1\n"
+	"                  Configured on: 2023-10-04\n"
+	"                  Configured by: Unix Makefiles\n"
+	"                    Host system: Windows-6.2.9200\n"
+	"              Uname information: Windows\n"
+	"                       Byte sex: little-endian\n"
+	"             Installation point: C:/Program Files/HDF_Group/HDF5/1.12.1\n"
+	"\n"
+	"Compiling Options:\n"
+	"------------------\n"
+	"                     Build Mode: RelWithDebInfo\n"
+	"              Debugging Symbols: OFF\n"
+	"                        Asserts: OFF\n"
+	"                      Profiling: OFF\n"
+	"             Optimization Level: OFF\n"
+	"\n"
+	"Linking Options:\n"
+	"----------------\n"
+	"                      Libraries: \n"
+	"  Statically Linked Executables: OFF\n"
+	"                        LDFLAGS: \n"
+	"                     H5_LDFLAGS: \n"
+	"                     AM_LDFLAGS: \n"
+	"                Extra libraries: m;dl;ws2_32;wsock32\n"
+	"                       Archiver: C:/msys64/home/tomas/aarch64-w64-mingw32.static.posix/bin/llvm-ar.exe\n"
+	"                         Ranlib: C:/msys64/home/tomas/aarch64-w64-mingw32.static.posix/bin/llvm-ranlib.exe\n"
+	"\n"
+	"Languages:\n"
+	"----------\n"
+	"                              C: YES\n"
+	"                     C Compiler: C:/msys64/home/tomas/aarch64-w64-mingw32.static.posix/bin/gcc.exe 17.0.1\n"
+	"                       CPPFLAGS: \n"
+	"                    H5_CPPFLAGS: \n"
+	"                    AM_CPPFLAGS: \n"
+	"                         CFLAGS:  -std=c99 \n"
+	"                      H5_CFLAGS: \n"
+	"                      AM_CFLAGS: \n"
+	"               Shared C Library: YES\n"
+	"               Static C Library: YES\n"
+	"\n"
+	"                        Fortran: OFF\n"
+	"               Fortran Compiler:  \n"
+	"                  Fortran Flags: \n"
+	"               H5 Fortran Flags: \n"
+	"               AM Fortran Flags: \n"
+	"         Shared Fortran Library: YES\n"
+	"         Static Fortran Library: YES\n"
+	"\n"
+	"                            C++: ON\n"
+	"                   C++ Compiler: C:/msys64/home/tomas/aarch64-w64-mingw32.static.posix/bin/c++.exe 17.0.1\n"
+	"                      C++ Flags:   \n"
+	"                   H5 C++ Flags: \n"
+	"                   AM C++ Flags: \n"
+	"             Shared C++ Library: YES\n"
+	"             Static C++ Library: YES\n"
+	"\n"
+	"                            JAVA: OFF\n"
+	"                 JAVA Compiler:  \n"
+	"\n"
+	"Features:\n"
+	"---------\n"
+	"                   Parallel HDF5: OFF\n"
+	"Parallel Filtered Dataset Writes: \n"
+	"              Large Parallel I/O: \n"
+	"              High-level library: ON\n"
+	"                Build HDF5 Tests: OFF\n"
+	"                Build HDF5 Tools: OFF\n"
+	"                    Threadsafety: OFF (recursive RW locks: ) \n"
+	"             Default API mapping: v112\n"
+	"  With deprecated public symbols: ON\n"
+	"          I/O filters (external):  DEFLATE DECODE\n"
+	"                             MPE: \n"
+	"                      Direct VFD: \n"
+	"                      Mirror VFD: \n"
+	"              (Read-Only) S3 VFD: \n"
+	"            (Read-Only) HDFS VFD: \n"
+	"                         dmalloc: \n"
+	"  Packages w/ extra debug output: \n"
+	"                     API Tracing: OFF\n"
+	"            Using memory checker: OFF\n"
+	" Memory allocation sanity checks: OFF\n"
+	"          Function Stack Tracing: OFF\n"
+	"                Use file locking: best-effort\n"
+	"       Strict File Format Checks: OFF\n"
+	"    Optimization Instrumentation: \n"
+;
+
diff -Nru hdf5-1.12.1-orig/src/H5lib_settings.c.mingw32 hdf5-1.12.1-patched/src/H5lib_settings.c.mingw32
--- hdf5-1.12.1-orig/src/H5lib_settings.c.mingw32	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/src/H5lib_settings.c.mingw32	2024-08-07 03:59:53.550297080 -0400
@@ -0,0 +1,121 @@
+/* Generated automatically by H5make_libsettings -- do not edit */
+
+
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Copyright by The HDF Group.                                               *
+ * Copyright by the Board of Trustees of the University of Illinois.         *
+ * All rights reserved.                                                      *
+ *                                                                           *
+ * This file is part of HDF5.  The full HDF5 copyright notice, including     *
+ * terms governing use, modification, and redistribution, is contained in    *
+ * the COPYING file, which can be found at the root of the source code       *
+ * distribution tree, or in https://support.hdfgroup.org/ftp/HDF5/releases.  *
+ * If you do not have access to either file, you may request a copy from     *
+ * help@hdfgroup.org.                                                        *
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Created:		May 26, 2020
+ *			
+ *
+ * Purpose:		This machine-generated source code contains
+ *			information about the library build configuration
+ *
+ * Modifications:
+ *
+ *	DO NOT MAKE MODIFICATIONS TO THIS FILE!
+ *	It was generated by code in `H5make_libsettings.c'.
+ *
+ *-------------------------------------------------------------------------
+ */
+
+char H5libhdf5_settings[]=
+	"        SUMMARY OF THE HDF5 CONFIGURATION\n"
+	"        =================================\n"
+	"\n"
+	"General Information:\n"
+	"-------------------\n"
+	"                   HDF5 Version: 1.12.0\n"
+	"                  Configured on: 2020-05-26\n"
+	"                  Configured by: Unix Makefiles\n"
+	"                    Host system: Linux-5.4.0-31-generic\n"
+	"              Uname information: Windows\n"
+	"                       Byte sex: little-endian\n"
+	"             Installation point: \n"
+	"\n"
+	"Compiling Options:\n"
+	"------------------\n"
+	"                     Build Mode: Release\n"
+	"              Debugging Symbols: OFF\n"
+	"                        Asserts: OFF\n"
+	"                      Profiling: OFF\n"
+	"             Optimization Level: OFF\n"
+	"\n"
+	"Linking Options:\n"
+	"----------------\n"
+	"                      Libraries: \n"
+	"  Statically Linked Executables: OFF\n"
+	"                        LDFLAGS: \n"
+	"                     H5_LDFLAGS: \n"
+	"                     AM_LDFLAGS: \n"
+	"                Extra libraries: m;ws2_32;wsock32\n"
+	"                       Archiver: /home/osboxes/Documents/Repositories/Octave/mxe-octave-w32/usr/bin/i686-w64-mingw32-ar\n"
+	"                         Ranlib: /home/osboxes/Documents/Repositories/Octave/mxe-octave-w32/usr/bin/i686-w64-mingw32-ranlib\n"
+	"\n"
+	"Languages:\n"
+	"----------\n"
+	"                              C: YES\n"
+	"                     C Compiler: /home/osboxes/Documents/Repositories/Octave/mxe-octave-w32/usr/bin/i686-w64-mingw32-gcc 9.3.0\n"
+	"                       CPPFLAGS: \n"
+	"                    H5_CPPFLAGS: \n"
+	"                    AM_CPPFLAGS: \n"
+	"                         CFLAGS:   -std=c99  -fstdarg-opt  -Wall -Wcast-qual -Wconversion -Wextra -Wfloat-equal -Wformat=2 -Winit-self -Winvalid-pch -Wmissing-include-dirs -Wno-c++-compat -Wno-format-nonliteral -Wshadow -Wundef -Wwrite-strings -pedantic -fmessage-length=0\n"
+	"                      H5_CFLAGS: \n"
+	"                      AM_CFLAGS: \n"
+	"               Shared C Library: YES\n"
+	"               Static C Library: NO\n"
+	"\n"
+	"                        Fortran: OFF\n"
+	"               Fortran Compiler: /home/osboxes/Documents/Repositories/Octave/mxe-octave-w32/usr/bin/i686-w64-mingw32-gfortran \n"
+	"                  Fortran Flags: \n"
+	"               H5 Fortran Flags: \n"
+	"               AM Fortran Flags: \n"
+	"         Shared Fortran Library: YES\n"
+	"         Static Fortran Library: NO\n"
+	"\n"
+	"                            C++: OFF\n"
+	"                   C++ Compiler: /home/osboxes/Documents/Repositories/Octave/mxe-octave-w32/usr/bin/i686-w64-mingw32-g++ \n"
+	"                      C++ Flags:  \n"
+	"                   H5 C++ Flags: \n"
+	"                   AM C++ Flags: \n"
+	"             Shared C++ Library: YES\n"
+	"             Static C++ Library: NO\n"
+	"\n"
+	"                            JAVA: OFF\n"
+	"                 JAVA Compiler:  \n"
+	"\n"
+	"Features:\n"
+	"---------\n"
+	"                   Parallel HDF5: OFF\n"
+	"Parallel Filtered Dataset Writes: \n"
+	"              Large Parallel I/O: \n"
+	"              High-level library: ON\n"
+	"                Build HDF5 Tests: OFF\n"
+	"                Build HDF5 Tools: ON\n"
+	"                    Threadsafety: OFF\n"
+	"             Default API mapping: v112\n"
+	"  With deprecated public symbols: ON\n"
+	"          I/O filters (external):  DEFLATE\n"
+	"                             MPE: \n"
+	"                      Direct VFD: \n"
+	"              (Read-Only) S3 VFD: \n"
+	"            (Read-Only) HDFS VFD: \n"
+	"                         dmalloc: \n"
+	"  Packages w/ extra debug output: \n"
+	"                     API Tracing: OFF\n"
+	"            Using memory checker: OFF\n"
+	" Memory allocation sanity checks: OFF\n"
+	"          Function Stack Tracing: OFF\n"
+	"       Strict File Format Checks: OFF\n"
+	"    Optimization Instrumentation: \n"
+;
+
diff -Nru hdf5-1.12.1-orig/src/H5lib_settings.c.mingw64 hdf5-1.12.1-patched/src/H5lib_settings.c.mingw64
--- hdf5-1.12.1-orig/src/H5lib_settings.c.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/src/H5lib_settings.c.mingw64	2024-08-07 05:23:37.000000000 -0400
@@ -0,0 +1,123 @@
+/* Generated automatically by H5make_libsettings -- do not edit */
+
+
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Copyright by The HDF Group.                                               *
+ * Copyright by the Board of Trustees of the University of Illinois.         *
+ * All rights reserved.                                                      *
+ *                                                                           *
+ * This file is part of HDF5.  The full HDF5 copyright notice, including     *
+ * terms governing use, modification, and redistribution, is contained in    *
+ * the COPYING file, which can be found at the root of the source code       *
+ * distribution tree, or in https://www.hdfgroup.org/licenses.               *
+ * If you do not have access to either file, you may request a copy from     *
+ * help@hdfgroup.org.                                                        *
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Created:		Aug  7, 2024
+ *			
+ *
+ * Purpose:		This machine-generated source code contains
+ *			information about the library build configuration
+ *
+ * Modifications:
+ *
+ *	DO NOT MAKE MODIFICATIONS TO THIS FILE!
+ *	It was generated by code in `H5make_libsettings.c'.
+ *
+ *-------------------------------------------------------------------------
+ */
+
+char H5libhdf5_settings[]=
+	"        SUMMARY OF THE HDF5 CONFIGURATION\n"
+	"        =================================\n"
+	"\n"
+	"General Information:\n"
+	"-------------------\n"
+	"                   HDF5 Version: 1.12.1\n"
+	"                  Configured on: 2024-08-07\n"
+	"                  Configured by: Unix Makefiles\n"
+	"                    Host system: Windows-6.2.9200\n"
+	"              Uname information: Windows\n"
+	"                       Byte sex: little-endian\n"
+	"             Installation point: C:/Program Files/HDF_Group/HDF5/1.12.1\n"
+	"\n"
+	"Compiling Options:\n"
+	"------------------\n"
+	"                     Build Mode: RelWithDebInfo\n"
+	"              Debugging Symbols: OFF\n"
+	"                        Asserts: OFF\n"
+	"                      Profiling: OFF\n"
+	"             Optimization Level: OFF\n"
+	"\n"
+	"Linking Options:\n"
+	"----------------\n"
+	"                      Libraries: \n"
+	"  Statically Linked Executables: OFF\n"
+	"                        LDFLAGS: \n"
+	"                     H5_LDFLAGS: \n"
+	"                     AM_LDFLAGS: \n"
+	"                Extra libraries: m;dl;ws2_32;wsock32\n"
+	"                       Archiver: C:/msys64/home/tomas/ucrt3/r/x86_64-w64-mingw32.static.posix/bin/ar.exe\n"
+	"                         Ranlib: C:/msys64/home/tomas/ucrt3/r/x86_64-w64-mingw32.static.posix/bin/ranlib.exe\n"
+	"\n"
+	"Languages:\n"
+	"----------\n"
+	"                              C: YES\n"
+	"                     C Compiler: C:/msys64/home/tomas/ucrt3/r/x86_64-w64-mingw32.static.posix/bin/gcc.exe 13.2.0\n"
+	"                       CPPFLAGS: \n"
+	"                    H5_CPPFLAGS: \n"
+	"                    AM_CPPFLAGS: \n"
+	"                         CFLAGS:   -std=c99  -fstdarg-opt -fdiagnostics-urls=never -fno-diagnostics-color -fmessage-length=0\n"
+	"                      H5_CFLAGS: \n"
+	"                      AM_CFLAGS: \n"
+	"               Shared C Library: YES\n"
+	"               Static C Library: YES\n"
+	"\n"
+	"                        Fortran: ON\n"
+	"               Fortran Compiler: C:/msys64/home/tomas/ucrt3/r/x86_64-w64-mingw32.static.posix/bin/gfortran.exe 13.2.0\n"
+	"                  Fortran Flags:  -fdiagnostics-urls=never -fno-diagnostics-color\n"
+	"               H5 Fortran Flags: \n"
+	"               AM Fortran Flags: \n"
+	"         Shared Fortran Library: YES\n"
+	"         Static Fortran Library: YES\n"
+	"\n"
+	"                            C++: ON\n"
+	"                   C++ Compiler: C:/msys64/home/tomas/ucrt3/r/x86_64-w64-mingw32.static.posix/bin/c++.exe 13.2.0\n"
+	"                      C++ Flags:     -fstdarg-opt -fdiagnostics-urls=never -fno-diagnostics-color -fmessage-length=0\n"
+	"                   H5 C++ Flags: \n"
+	"                   AM C++ Flags: \n"
+	"             Shared C++ Library: YES\n"
+	"             Static C++ Library: YES\n"
+	"\n"
+	"                            JAVA: OFF\n"
+	"                 JAVA Compiler:  \n"
+	"\n"
+	"Features:\n"
+	"---------\n"
+	"                   Parallel HDF5: OFF\n"
+	"Parallel Filtered Dataset Writes: \n"
+	"              Large Parallel I/O: \n"
+	"              High-level library: ON\n"
+	"                Build HDF5 Tests: OFF\n"
+	"                Build HDF5 Tools: OFF\n"
+	"                    Threadsafety: OFF (recursive RW locks: ) \n"
+	"             Default API mapping: v112\n"
+	"  With deprecated public symbols: ON\n"
+	"          I/O filters (external):  DEFLATE DECODE\n"
+	"                             MPE: \n"
+	"                      Direct VFD: \n"
+	"                      Mirror VFD: \n"
+	"              (Read-Only) S3 VFD: \n"
+	"            (Read-Only) HDFS VFD: \n"
+	"                         dmalloc: \n"
+	"  Packages w/ extra debug output: \n"
+	"                     API Tracing: OFF\n"
+	"            Using memory checker: OFF\n"
+	" Memory allocation sanity checks: OFF\n"
+	"          Function Stack Tracing: OFF\n"
+	"                Use file locking: best-effort\n"
+	"       Strict File Format Checks: OFF\n"
+	"    Optimization Instrumentation: \n"
+;
+
diff -Nru hdf5-1.12.1-orig/src/H5Tinit.c.aarch64 hdf5-1.12.1-patched/src/H5Tinit.c.aarch64
--- hdf5-1.12.1-orig/src/H5Tinit.c.aarch64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/src/H5Tinit.c.aarch64	2024-08-07 03:59:53.550297080 -0400
@@ -0,0 +1,975 @@
+/* Generated automatically by H5detect -- do not edit */
+
+
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Copyright by The HDF Group.                                               *
+ * Copyright by the Board of Trustees of the University of Illinois.         *
+ * All rights reserved.                                                      *
+ *                                                                           *
+ * This file is part of HDF5.  The full HDF5 copyright notice, including     *
+ * terms governing use, modification, and redistribution, is contained in    *
+ * the COPYING file, which can be found at the root of the source code       *
+ * distribution tree, or in https://www.hdfgroup.org/licenses.               *
+ * If you do not have access to either file, you may request a copy from     *
+ * help@hdfgroup.org.                                                        *
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Created:		Oct  4, 2023
+ *			
+ *
+ * Purpose:		This machine-generated source code contains
+ *			information about the various integer and
+ *			floating point numeric formats found on this
+ *			architecture.  The parameters below should be
+ *			checked carefully and errors reported to the
+ *			HDF5 maintainer.
+ *			
+ *			Each of the numeric formats listed below are
+ *			printed from most significant bit to least
+ *			significant bit even though the actual bytes
+ *			might be stored in a different order in
+ *			memory.     The integers above each binary byte
+ *			indicate the relative order of the bytes in
+ *			memory; little-endian machines have
+ *			decreasing numbers while big-endian machines
+ *			have increasing numbers.
+ *			
+ *			The fields of the numbers are printed as
+ *			letters with `S' for the mantissa sign bit,
+ *			`M' for the mantissa magnitude, and `E' for
+ *			the exponent.  The exponent has an associated
+ *			bias which can be subtracted to find the
+ *			true exponent.    The radix point is assumed
+ *			to be before the first `M' bit.     Any bit
+ *			of a floating-point value not falling into one
+ *			of these categories is printed as a question
+ *			mark.  Bits of integer types are printed as
+ *			`I' for 2's complement and `U' for magnitude.
+ *			
+ *			If the most significant bit of the normalized
+ *			mantissa (always a `1' except for `0.0') is
+ *			not stored then an `implicit=yes' appears
+ *			under the field description.  In this case,
+ *			the radix point is still assumed to be
+ *			before the first `M' but after the implicit
+ *			bit.
+ *
+ * Modifications:
+ *
+ *	DO NOT MAKE MODIFICATIONS TO THIS FILE!
+ *	It was generated by code in `H5detect.c'.
+ *
+ *-------------------------------------------------------------------------
+ */
+
+/****************/
+/* Module Setup */
+/****************/
+
+#include "H5Tmodule.h"          /* This source code file is part of the H5T module */
+
+
+/***********/
+/* Headers */
+/***********/
+#include "H5private.h"        /* Generic Functions            */
+#include "H5Eprivate.h"        /* Error handling              */
+#include "H5FLprivate.h"    /* Free Lists                */
+#include "H5Iprivate.h"        /* IDs                      */
+#include "H5Tpkg.h"        /* Datatypes                 */
+
+
+/****************/
+/* Local Macros */
+/****************/
+
+
+/******************/
+/* Local Typedefs */
+/******************/
+
+
+/********************/
+/* Package Typedefs */
+/********************/
+
+
+/********************/
+/* Local Prototypes */
+/********************/
+
+
+/********************/
+/* Public Variables */
+/********************/
+
+
+/*****************************/
+/* Library Private Variables */
+/*****************************/
+
+
+/*********************/
+/* Package Variables */
+/*********************/
+
+
+
+/*******************/
+/* Local Variables */
+/*******************/
+
+
+
+/*-------------------------------------------------------------------------
+ * Function:    H5T__init_native
+ *
+ * Purpose:    Initialize pre-defined native datatypes from code generated
+ *              during the library configuration by H5detect.
+ *
+ * Return:    Success:    non-negative
+ *        Failure:    negative
+ *
+ * Programmer:    Robb Matzke
+ *              Wednesday, December 16, 1998
+ *
+ *-------------------------------------------------------------------------
+ */
+herr_t
+H5T__init_native(void)
+{
+    H5T_t    *dt = NULL;
+    herr_t    ret_value = SUCCEED;
+
+    FUNC_ENTER_PACKAGE
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_SCHAR_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_SCHAR_ALIGN_g = 1;
+    H5T_NATIVE_SCHAR_COMP_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UCHAR_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UCHAR_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_SHORT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_SHORT_ALIGN_g = 1;
+    H5T_NATIVE_SHORT_COMP_ALIGN_g = 2;
+
+   /*
+    *    1   0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_USHORT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_USHORT_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_ALIGN_g = 1;
+    H5T_NATIVE_INT_COMP_ALIGN_g = 4;
+
+   /*
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_LONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_LONG_ALIGN_g = 1;
+    H5T_NATIVE_LONG_COMP_ALIGN_g = 4;
+
+   /*
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_ULONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_ULONG_ALIGN_g = 1;
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST8_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT16_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT16_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST16_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST16_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST16_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST16_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT32_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT32_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST32_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST32_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST32_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST32_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_LLONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_LLONG_ALIGN_g = 1;
+    H5T_NATIVE_LLONG_COMP_ALIGN_g = 8;
+
+   /*
+    *    7   6   5   4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_ULLONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_ULLONG_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * SEEEEEEE EMMMMMMM MMMMMMMM MMMMMMMM
+    * Implicit bit? yes
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_FLOAT;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.f.sign = 31;
+    dt->shared->u.atomic.u.f.epos = 23;
+    dt->shared->u.atomic.u.f.esize = 8;
+    dt->shared->u.atomic.u.f.ebias = 0x0000007f;
+    dt->shared->u.atomic.u.f.mpos = 0;
+    dt->shared->u.atomic.u.f.msize = 23;
+    dt->shared->u.atomic.u.f.norm = H5T_NORM_IMPLIED;
+    dt->shared->u.atomic.u.f.pad = H5T_PAD_ZERO;
+    if((H5T_NATIVE_FLOAT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_FLOAT_ALIGN_g = 1;
+    H5T_NATIVE_FLOAT_COMP_ALIGN_g = 4;
+
+   /*
+    *    7   6   5   4
+    * SEEEEEEE EEEEMMMM MMMMMMMM MMMMMMMM
+    *    3   2   1   0
+    * MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM
+    * Implicit bit? yes
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_FLOAT;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.f.sign = 63;
+    dt->shared->u.atomic.u.f.epos = 52;
+    dt->shared->u.atomic.u.f.esize = 11;
+    dt->shared->u.atomic.u.f.ebias = 0x000003ff;
+    dt->shared->u.atomic.u.f.mpos = 0;
+    dt->shared->u.atomic.u.f.msize = 52;
+    dt->shared->u.atomic.u.f.norm = H5T_NORM_IMPLIED;
+    dt->shared->u.atomic.u.f.pad = H5T_PAD_ZERO;
+    if((H5T_NATIVE_DOUBLE_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_DOUBLE_ALIGN_g = 1;
+    H5T_NATIVE_DOUBLE_COMP_ALIGN_g = 8;
+
+   /*
+    *    7   6   5   4
+    * SEEEEEEE EEEEMMMM MMMMMMMM MMMMMMMM
+    *    3   2   1   0
+    * MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM
+    * Implicit bit? yes
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_FLOAT;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.f.sign = 63;
+    dt->shared->u.atomic.u.f.epos = 52;
+    dt->shared->u.atomic.u.f.esize = 11;
+    dt->shared->u.atomic.u.f.ebias = 0x000003ff;
+    dt->shared->u.atomic.u.f.mpos = 0;
+    dt->shared->u.atomic.u.f.msize = 52;
+    dt->shared->u.atomic.u.f.norm = H5T_NORM_IMPLIED;
+    dt->shared->u.atomic.u.f.pad = H5T_PAD_ZERO;
+    if((H5T_NATIVE_LDOUBLE_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_LDOUBLE_ALIGN_g = 1;
+    H5T_NATIVE_LDOUBLE_COMP_ALIGN_g = 8;
+
+    /* Set the native order for this machine */
+    H5T_native_order_g = H5T_ORDER_LE;
+
+    /* Structure alignment for pointers, vlen and reference types */
+    H5T_POINTER_COMP_ALIGN_g = 8;
+    H5T_HVL_COMP_ALIGN_g = 8;
+    H5T_HOBJREF_COMP_ALIGN_g = 8;
+    H5T_HDSETREGREF_COMP_ALIGN_g = 1;
+    H5T_REF_COMP_ALIGN_g = 8;
+
+done:
+    if(ret_value < 0) {
+        if(dt != NULL) {
+            dt->shared = H5FL_FREE(H5T_shared_t, dt->shared);
+            dt = H5FL_FREE(H5T_t, dt);
+        } /* end if */
+    } /* end if */
+
+    FUNC_LEAVE_NOAPI(ret_value);
+} /* end H5T__init_native() */
+
+/****************************************/
+/* ALIGNMENT and signal-handling status */
+/****************************************/
+/* Signal() support: yes */
+/* setjmp() support: no */
+/* longjmp() support: yes */
+/* sigsetjmp() support: no */
+/* siglongjmp() support: no */
+/* sigprocmask() support: no */
+
+/******************************/
+/* signal handlers statistics */
+/******************************/
+/* signal_handlers tested: 15 times */
+/* sigbus_handler called: 5 times */
+/* sigsegv_handler called: 5 times */
+/* sigill_handler called: 5 times */
diff -Nru hdf5-1.12.1-orig/src/H5Tinit.c.mingw32 hdf5-1.12.1-patched/src/H5Tinit.c.mingw32
--- hdf5-1.12.1-orig/src/H5Tinit.c.mingw32	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/src/H5Tinit.c.mingw32	2024-08-07 03:59:53.550297080 -0400
@@ -0,0 +1,977 @@
+/* Generated automatically by H5detect -- do not edit */
+
+
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Copyright by The HDF Group.                                               *
+ * Copyright by the Board of Trustees of the University of Illinois.         *
+ * All rights reserved.                                                      *
+ *                                                                           *
+ * This file is part of HDF5.  The full HDF5 copyright notice, including     *
+ * terms governing use, modification, and redistribution, is contained in    *
+ * the COPYING file, which can be found at the root of the source code       *
+ * distribution tree, or in https://support.hdfgroup.org/ftp/HDF5/releases.  *
+ * If you do not have access to either file, you may request a copy from     *
+ * help@hdfgroup.org.                                                        *
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Created:		May 26, 2020
+ *			
+ *
+ * Purpose:		This machine-generated source code contains
+ *			information about the various integer and
+ *			floating point numeric formats found on this
+ *			architecture.  The parameters below should be
+ *			checked carefully and errors reported to the
+ *			HDF5 maintainer.
+ *			
+ *			Each of the numeric formats listed below are
+ *			printed from most significant bit to least
+ *			significant bit even though the actual bytes
+ *			might be stored in a different order in
+ *			memory.     The integers above each binary byte
+ *			indicate the relative order of the bytes in
+ *			memory; little-endian machines have
+ *			decreasing numbers while big-endian machines
+ *			have increasing numbers.
+ *			
+ *			The fields of the numbers are printed as
+ *			letters with `S' for the mantissa sign bit,
+ *			`M' for the mantissa magnitude, and `E' for
+ *			the exponent.  The exponent has an associated
+ *			bias which can be subtracted to find the
+ *			true exponent.    The radix point is assumed
+ *			to be before the first `M' bit.     Any bit
+ *			of a floating-point value not falling into one
+ *			of these categories is printed as a question
+ *			mark.  Bits of integer types are printed as
+ *			`I' for 2's complement and `U' for magnitude.
+ *			
+ *			If the most significant bit of the normalized
+ *			mantissa (always a `1' except for `0.0') is
+ *			not stored then an `implicit=yes' appears
+ *			under the field description.  In this case,
+ *			the radix point is still assumed to be
+ *			before the first `M' but after the implicit
+ *			bit.
+ *
+ * Modifications:
+ *
+ *	DO NOT MAKE MODIFICATIONS TO THIS FILE!
+ *	It was generated by code in `H5detect.c'.
+ *
+ *-------------------------------------------------------------------------
+ */
+
+/****************/
+/* Module Setup */
+/****************/
+
+#include "H5Tmodule.h"          /* This source code file is part of the H5T module */
+
+
+/***********/
+/* Headers */
+/***********/
+#include "H5private.h"        /* Generic Functions            */
+#include "H5Eprivate.h"        /* Error handling              */
+#include "H5FLprivate.h"    /* Free Lists                */
+#include "H5Iprivate.h"        /* IDs                      */
+#include "H5Tpkg.h"        /* Datatypes                 */
+
+
+/****************/
+/* Local Macros */
+/****************/
+
+
+/******************/
+/* Local Typedefs */
+/******************/
+
+
+/********************/
+/* Package Typedefs */
+/********************/
+
+
+/********************/
+/* Local Prototypes */
+/********************/
+
+
+/********************/
+/* Public Variables */
+/********************/
+
+
+/*****************************/
+/* Library Private Variables */
+/*****************************/
+
+
+/*********************/
+/* Package Variables */
+/*********************/
+
+
+
+/*******************/
+/* Local Variables */
+/*******************/
+
+
+
+/*-------------------------------------------------------------------------
+ * Function:    H5T__init_native
+ *
+ * Purpose:    Initialize pre-defined native datatypes from code generated
+ *              during the library configuration by H5detect.
+ *
+ * Return:    Success:    non-negative
+ *        Failure:    negative
+ *
+ * Programmer:    Robb Matzke
+ *              Wednesday, December 16, 1998
+ *
+ *-------------------------------------------------------------------------
+ */
+herr_t
+H5T__init_native(void)
+{
+    H5T_t    *dt = NULL;
+    herr_t    ret_value = SUCCEED;
+
+    FUNC_ENTER_PACKAGE
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_SCHAR_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_SCHAR_ALIGN_g = 1;
+    H5T_NATIVE_SCHAR_COMP_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UCHAR_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UCHAR_ALIGN_g = 1;
+
+   /*
+    *    1        0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_SHORT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_SHORT_ALIGN_g = 1;
+    H5T_NATIVE_SHORT_COMP_ALIGN_g = 2;
+
+   /*
+    *    1        0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_USHORT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_USHORT_ALIGN_g = 1;
+
+   /*
+    *    3        2        1        0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_ALIGN_g = 1;
+    H5T_NATIVE_INT_COMP_ALIGN_g = 4;
+
+   /*
+    *    3        2        1        0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_ALIGN_g = 1;
+
+   /*
+    *    3        2        1        0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_LONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_LONG_ALIGN_g = 1;
+    H5T_NATIVE_LONG_COMP_ALIGN_g = 4;
+
+   /*
+    *    3        2        1        0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_ULONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_ULONG_ALIGN_g = 1;
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST8_ALIGN_g = 1;
+
+   /*
+    *    1        0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT16_ALIGN_g = 1;
+
+   /*
+    *    1        0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT16_ALIGN_g = 1;
+
+   /*
+    *    1        0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST16_ALIGN_g = 1;
+
+   /*
+    *    1        0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST16_ALIGN_g = 1;
+
+   /*
+    *    1        0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST16_ALIGN_g = 1;
+
+   /*
+    *    1        0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST16_ALIGN_g = 1;
+
+   /*
+    *    3        2        1        0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT32_ALIGN_g = 1;
+
+   /*
+    *    3        2        1        0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT32_ALIGN_g = 1;
+
+   /*
+    *    3        2        1        0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST32_ALIGN_g = 1;
+
+   /*
+    *    3        2        1        0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST32_ALIGN_g = 1;
+
+   /*
+    *    3        2        1        0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST32_ALIGN_g = 1;
+
+   /*
+    *    3        2        1        0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST32_ALIGN_g = 1;
+
+   /*
+    *    7        6        5        4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3        2        1        0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT64_ALIGN_g = 1;
+
+   /*
+    *    7        6        5        4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3        2        1        0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT64_ALIGN_g = 1;
+
+   /*
+    *    7        6        5        4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3        2        1        0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST64_ALIGN_g = 1;
+
+   /*
+    *    7        6        5        4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3        2        1        0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST64_ALIGN_g = 1;
+
+   /*
+    *    7        6        5        4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3        2        1        0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST64_ALIGN_g = 1;
+
+   /*
+    *    7        6        5        4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3        2        1        0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST64_ALIGN_g = 1;
+
+   /*
+    *    7        6        5        4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3        2        1        0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_LLONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_LLONG_ALIGN_g = 1;
+    H5T_NATIVE_LLONG_COMP_ALIGN_g = 8;
+
+   /*
+    *    7        6        5        4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3        2        1        0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_ULLONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_ULLONG_ALIGN_g = 1;
+
+   /*
+    *    3        2        1        0
+    * SEEEEEEE EMMMMMMM MMMMMMMM MMMMMMMM
+    * Implicit bit? yes
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_FLOAT;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.f.sign = 31;
+    dt->shared->u.atomic.u.f.epos = 23;
+    dt->shared->u.atomic.u.f.esize = 8;
+    dt->shared->u.atomic.u.f.ebias = 0x0000007f;
+    dt->shared->u.atomic.u.f.mpos = 0;
+    dt->shared->u.atomic.u.f.msize = 23;
+    dt->shared->u.atomic.u.f.norm = H5T_NORM_IMPLIED;
+    dt->shared->u.atomic.u.f.pad = H5T_PAD_ZERO;
+    if((H5T_NATIVE_FLOAT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_FLOAT_ALIGN_g = 1;
+    H5T_NATIVE_FLOAT_COMP_ALIGN_g = 4;
+
+   /*
+    *    7        6        5        4
+    * SEEEEEEE EEEEMMMM MMMMMMMM MMMMMMMM
+    *    3        2        1        0
+    * MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM
+    * Implicit bit? yes
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_FLOAT;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.f.sign = 63;
+    dt->shared->u.atomic.u.f.epos = 52;
+    dt->shared->u.atomic.u.f.esize = 11;
+    dt->shared->u.atomic.u.f.ebias = 0x000003ff;
+    dt->shared->u.atomic.u.f.mpos = 0;
+    dt->shared->u.atomic.u.f.msize = 52;
+    dt->shared->u.atomic.u.f.norm = H5T_NORM_IMPLIED;
+    dt->shared->u.atomic.u.f.pad = H5T_PAD_ZERO;
+    if((H5T_NATIVE_DOUBLE_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_DOUBLE_ALIGN_g = 1;
+    H5T_NATIVE_DOUBLE_COMP_ALIGN_g = 8;
+
+   /*
+    *   11       10        9        8
+    * ???????? ???????? SEEEEEEE EEEEEEEE
+    *    7        6        5        4
+    * MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM
+    *    3        2        1        0
+    * MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM
+    * Implicit bit? no
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_FLOAT;
+    dt->shared->size = 12;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 80;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.f.sign = 79;
+    dt->shared->u.atomic.u.f.epos = 64;
+    dt->shared->u.atomic.u.f.esize = 15;
+    dt->shared->u.atomic.u.f.ebias = 0x00003fff;
+    dt->shared->u.atomic.u.f.mpos = 0;
+    dt->shared->u.atomic.u.f.msize = 64;
+    dt->shared->u.atomic.u.f.norm = H5T_NORM_NONE;
+    dt->shared->u.atomic.u.f.pad = H5T_PAD_ZERO;
+    if((H5T_NATIVE_LDOUBLE_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_LDOUBLE_ALIGN_g = 1;
+    H5T_NATIVE_LDOUBLE_COMP_ALIGN_g = 4;
+
+    /* Set the native order for this machine */
+    H5T_native_order_g = H5T_ORDER_LE;
+
+    /* Structure alignment for pointers, vlen and reference types */
+    H5T_POINTER_COMP_ALIGN_g = 4;
+    H5T_HVL_COMP_ALIGN_g = 4;
+    H5T_HOBJREF_COMP_ALIGN_g = 8;
+    H5T_HDSETREGREF_COMP_ALIGN_g = 1;
+    H5T_REF_COMP_ALIGN_g = 8;
+
+done:
+    if(ret_value < 0) {
+        if(dt != NULL) {
+            dt->shared = H5FL_FREE(H5T_shared_t, dt->shared);
+            dt = H5FL_FREE(H5T_t, dt);
+        } /* end if */
+    } /* end if */
+
+    FUNC_LEAVE_NOAPI(ret_value);
+} /* end H5T__init_native() */
+
+/****************************************/
+/* ALIGNMENT and signal-handling status */
+/****************************************/
+/* Signal() support: yes */
+/* setjmp() support: no */
+/* longjmp() support: yes */
+/* sigsetjmp() support: no */
+/* siglongjmp() support: no */
+/* sigprocmask() support: no */
+
+/******************************/
+/* signal handlers statistics */
+/******************************/
+/* signal_handlers tested: 15 times */
+/* sigbus_handler called: 5 times */
+/* sigsegv_handler called: 5 times */
+/* sigill_handler called: 5 times */
diff -Nru hdf5-1.12.1-orig/src/H5Tinit.c.mingw64 hdf5-1.12.1-patched/src/H5Tinit.c.mingw64
--- hdf5-1.12.1-orig/src/H5Tinit.c.mingw64	1969-12-31 19:00:00.000000000 -0500
+++ hdf5-1.12.1-patched/src/H5Tinit.c.mingw64	2024-08-07 05:23:38.000000000 -0400
@@ -0,0 +1,979 @@
+/* Generated automatically by H5detect -- do not edit */
+
+
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Copyright by The HDF Group.                                               *
+ * Copyright by the Board of Trustees of the University of Illinois.         *
+ * All rights reserved.                                                      *
+ *                                                                           *
+ * This file is part of HDF5.  The full HDF5 copyright notice, including     *
+ * terms governing use, modification, and redistribution, is contained in    *
+ * the COPYING file, which can be found at the root of the source code       *
+ * distribution tree, or in https://www.hdfgroup.org/licenses.               *
+ * If you do not have access to either file, you may request a copy from     *
+ * help@hdfgroup.org.                                                        *
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ * Created:		Aug  7, 2024
+ *			
+ *
+ * Purpose:		This machine-generated source code contains
+ *			information about the various integer and
+ *			floating point numeric formats found on this
+ *			architecture.  The parameters below should be
+ *			checked carefully and errors reported to the
+ *			HDF5 maintainer.
+ *			
+ *			Each of the numeric formats listed below are
+ *			printed from most significant bit to least
+ *			significant bit even though the actual bytes
+ *			might be stored in a different order in
+ *			memory.     The integers above each binary byte
+ *			indicate the relative order of the bytes in
+ *			memory; little-endian machines have
+ *			decreasing numbers while big-endian machines
+ *			have increasing numbers.
+ *			
+ *			The fields of the numbers are printed as
+ *			letters with `S' for the mantissa sign bit,
+ *			`M' for the mantissa magnitude, and `E' for
+ *			the exponent.  The exponent has an associated
+ *			bias which can be subtracted to find the
+ *			true exponent.    The radix point is assumed
+ *			to be before the first `M' bit.     Any bit
+ *			of a floating-point value not falling into one
+ *			of these categories is printed as a question
+ *			mark.  Bits of integer types are printed as
+ *			`I' for 2's complement and `U' for magnitude.
+ *			
+ *			If the most significant bit of the normalized
+ *			mantissa (always a `1' except for `0.0') is
+ *			not stored then an `implicit=yes' appears
+ *			under the field description.  In this case,
+ *			the radix point is still assumed to be
+ *			before the first `M' but after the implicit
+ *			bit.
+ *
+ * Modifications:
+ *
+ *	DO NOT MAKE MODIFICATIONS TO THIS FILE!
+ *	It was generated by code in `H5detect.c'.
+ *
+ *-------------------------------------------------------------------------
+ */
+
+/****************/
+/* Module Setup */
+/****************/
+
+#include "H5Tmodule.h"          /* This source code file is part of the H5T module */
+
+
+/***********/
+/* Headers */
+/***********/
+#include "H5private.h"        /* Generic Functions            */
+#include "H5Eprivate.h"        /* Error handling              */
+#include "H5FLprivate.h"    /* Free Lists                */
+#include "H5Iprivate.h"        /* IDs                      */
+#include "H5Tpkg.h"        /* Datatypes                 */
+
+
+/****************/
+/* Local Macros */
+/****************/
+
+
+/******************/
+/* Local Typedefs */
+/******************/
+
+
+/********************/
+/* Package Typedefs */
+/********************/
+
+
+/********************/
+/* Local Prototypes */
+/********************/
+
+
+/********************/
+/* Public Variables */
+/********************/
+
+
+/*****************************/
+/* Library Private Variables */
+/*****************************/
+
+
+/*********************/
+/* Package Variables */
+/*********************/
+
+
+
+/*******************/
+/* Local Variables */
+/*******************/
+
+
+
+/*-------------------------------------------------------------------------
+ * Function:    H5T__init_native
+ *
+ * Purpose:    Initialize pre-defined native datatypes from code generated
+ *              during the library configuration by H5detect.
+ *
+ * Return:    Success:    non-negative
+ *        Failure:    negative
+ *
+ * Programmer:    Robb Matzke
+ *              Wednesday, December 16, 1998
+ *
+ *-------------------------------------------------------------------------
+ */
+herr_t
+H5T__init_native(void)
+{
+    H5T_t    *dt = NULL;
+    herr_t    ret_value = SUCCEED;
+
+    FUNC_ENTER_PACKAGE
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_SCHAR_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_SCHAR_ALIGN_g = 1;
+    H5T_NATIVE_SCHAR_COMP_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UCHAR_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UCHAR_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_SHORT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_SHORT_ALIGN_g = 1;
+    H5T_NATIVE_SHORT_COMP_ALIGN_g = 2;
+
+   /*
+    *    1   0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_USHORT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_USHORT_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_ALIGN_g = 1;
+    H5T_NATIVE_INT_COMP_ALIGN_g = 4;
+
+   /*
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_LONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_LONG_ALIGN_g = 1;
+    H5T_NATIVE_LONG_COMP_ALIGN_g = 4;
+
+   /*
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_ULONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_ULONG_ALIGN_g = 1;
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST8_ALIGN_g = 1;
+
+   /*
+    *    0
+    * UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 1;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 8;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST8_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST8_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT16_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT16_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST16_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST16_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST16_ALIGN_g = 1;
+
+   /*
+    *    1   0
+    * UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 2;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 16;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST16_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST16_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT32_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT32_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST32_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST32_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST32_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST32_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST32_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_LEAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_LEAST64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_LEAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_LEAST64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_INT_FAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_INT_FAST64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_UINT_FAST64_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_UINT_FAST64_ALIGN_g = 1;
+
+   /*
+    *    7   6   5   4
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    *    3   2   1   0
+    * IIIIIIII IIIIIIII IIIIIIII IIIIIIII
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_2;
+    if((H5T_NATIVE_LLONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_LLONG_ALIGN_g = 1;
+    H5T_NATIVE_LLONG_COMP_ALIGN_g = 8;
+
+   /*
+    *    7   6   5   4
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    *    3   2   1   0
+    * UUUUUUUU UUUUUUUU UUUUUUUU UUUUUUUU
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_INTEGER;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.i.sign = H5T_SGN_NONE;
+    if((H5T_NATIVE_ULLONG_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_ULLONG_ALIGN_g = 1;
+
+   /*
+    *    3   2   1   0
+    * SEEEEEEE EMMMMMMM MMMMMMMM MMMMMMMM
+    * Implicit bit? yes
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_FLOAT;
+    dt->shared->size = 4;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 32;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.f.sign = 31;
+    dt->shared->u.atomic.u.f.epos = 23;
+    dt->shared->u.atomic.u.f.esize = 8;
+    dt->shared->u.atomic.u.f.ebias = 0x0000007f;
+    dt->shared->u.atomic.u.f.mpos = 0;
+    dt->shared->u.atomic.u.f.msize = 23;
+    dt->shared->u.atomic.u.f.norm = H5T_NORM_IMPLIED;
+    dt->shared->u.atomic.u.f.pad = H5T_PAD_ZERO;
+    if((H5T_NATIVE_FLOAT_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_FLOAT_ALIGN_g = 1;
+    H5T_NATIVE_FLOAT_COMP_ALIGN_g = 4;
+
+   /*
+    *    7   6   5   4
+    * SEEEEEEE EEEEMMMM MMMMMMMM MMMMMMMM
+    *    3   2   1   0
+    * MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM
+    * Implicit bit? yes
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_FLOAT;
+    dt->shared->size = 8;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 64;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.f.sign = 63;
+    dt->shared->u.atomic.u.f.epos = 52;
+    dt->shared->u.atomic.u.f.esize = 11;
+    dt->shared->u.atomic.u.f.ebias = 0x000003ff;
+    dt->shared->u.atomic.u.f.mpos = 0;
+    dt->shared->u.atomic.u.f.msize = 52;
+    dt->shared->u.atomic.u.f.norm = H5T_NORM_IMPLIED;
+    dt->shared->u.atomic.u.f.pad = H5T_PAD_ZERO;
+    if((H5T_NATIVE_DOUBLE_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_DOUBLE_ALIGN_g = 1;
+    H5T_NATIVE_DOUBLE_COMP_ALIGN_g = 8;
+
+   /*
+    *   15  14  13  12
+    * ???????? ???????? ???????? ????????
+    *   11  10   9   8
+    * ???????? ???????? SEEEEEEE EEEEEEEE
+    *    7   6   5   4
+    * MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM
+    *    3   2   1   0
+    * MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM
+    * Implicit bit? no
+    * Alignment: none
+    */
+    if(NULL == (dt = H5T__alloc()))
+        HGOTO_ERROR(H5E_DATATYPE, H5E_NOSPACE, FAIL, "datatype allocation failed")
+    dt->shared->state = H5T_STATE_IMMUTABLE;
+    dt->shared->type = H5T_FLOAT;
+    dt->shared->size = 16;
+    dt->shared->u.atomic.order = H5T_ORDER_LE;
+    dt->shared->u.atomic.offset = 0;
+    dt->shared->u.atomic.prec = 80;
+    dt->shared->u.atomic.lsb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.msb_pad = H5T_PAD_ZERO;
+    dt->shared->u.atomic.u.f.sign = 79;
+    dt->shared->u.atomic.u.f.epos = 64;
+    dt->shared->u.atomic.u.f.esize = 15;
+    dt->shared->u.atomic.u.f.ebias = 0x00003fff;
+    dt->shared->u.atomic.u.f.mpos = 0;
+    dt->shared->u.atomic.u.f.msize = 64;
+    dt->shared->u.atomic.u.f.norm = H5T_NORM_NONE;
+    dt->shared->u.atomic.u.f.pad = H5T_PAD_ZERO;
+    if((H5T_NATIVE_LDOUBLE_g = H5I_register(H5I_DATATYPE, dt, FALSE)) < 0)
+        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "can't register ID for built-in datatype")
+    H5T_NATIVE_LDOUBLE_ALIGN_g = 1;
+    H5T_NATIVE_LDOUBLE_COMP_ALIGN_g = 16;
+
+    /* Set the native order for this machine */
+    H5T_native_order_g = H5T_ORDER_LE;
+
+    /* Structure alignment for pointers, vlen and reference types */
+    H5T_POINTER_COMP_ALIGN_g = 8;
+    H5T_HVL_COMP_ALIGN_g = 8;
+    H5T_HOBJREF_COMP_ALIGN_g = 8;
+    H5T_HDSETREGREF_COMP_ALIGN_g = 1;
+    H5T_REF_COMP_ALIGN_g = 8;
+
+done:
+    if(ret_value < 0) {
+        if(dt != NULL) {
+            dt->shared = H5FL_FREE(H5T_shared_t, dt->shared);
+            dt = H5FL_FREE(H5T_t, dt);
+        } /* end if */
+    } /* end if */
+
+    FUNC_LEAVE_NOAPI(ret_value);
+} /* end H5T__init_native() */
+
+/****************************************/
+/* ALIGNMENT and signal-handling status */
+/****************************************/
+/* Signal() support: yes */
+/* setjmp() support: yes */
+/* longjmp() support: yes */
+/* sigsetjmp() support: no */
+/* siglongjmp() support: no */
+/* sigprocmask() support: no */
+
+/******************************/
+/* signal handlers statistics */
+/******************************/
+/* signal_handlers tested: 15 times */
+/* sigbus_handler called: 5 times */
+/* sigsegv_handler called: 5 times */
+/* sigill_handler called: 5 times */
