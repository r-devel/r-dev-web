\input texinfo
@c %**start of header
@setfilename static_libc.info
@settitle Including Static Libraries in CRAN packages
@documentlanguage en

@include macros.texi

@set CRAN_POLICY_REVISION $Revision: xxxx $

@titlepage
@title Including Static Libraries in CRAN packages
@author CRAN Repository Maintainers
@end titlepage

[@value{CRAN_POLICY_REVISION}]

@unnumbered Preamble

Using static libraries when linking packages is pretty much essential on
Windows and macOS, mainly because loading dynamic libraries from
non-systme location is intentionally difficult on macOS and not simple
on Windows (and how to do so has changed over the years). Further,
binary packages are built by different people at different times and
there would need to be careful version control of dynamic libraries.
With static linking, each package is ensured to use the library
routines available when it was linked, prior to distibution.

Many of the static libraries provided by MXE (as part of
@code{rtools}) or @emph{via} Simon Urbanek's `recipes' at
@uref{https://mac.r-project.org/bin/} are projects which are commonly
regarded as system libraries on Linux and FreeBSD systems and
dynamically linked from system locations.

@unnumbered Issues
One drawback of using static libraries is code duplication and hence
size of an installed library tree.  But end users tend not to have
thousands of packages installed, and few of the static libraries are
large (and those which are large are used by few packages --
e.g. ICU is ca 35MB but used only by two packages, one of which uses
only a tiny part of it, and @code{libQuantLib} by one).

The main issues relate to licensing.  External libraries will almost
always (but not always) have licences, and care is needed to ensure that
these are compatible with the package's declared licence.  CRAN requires
a single licence, but some library projects seem to believe it is
possible to licence each source file so multiple licences will apply to
a single library and all need to be complied wth unless it is known
precisely which parts will be linked into a package's DSO/DLL.  What
forms of linking are allowed by certain licences and if there is a
distinction made for 'system' libraries can be unclear or controversial.
Some GPL-ed libraries have `linking exceptions'.

The more pervasive licensing issue are those licences which require
copyright information or their whole licence to be included in any
redistribution, often explicitly singling out binary distribution.  R
itself meets these requirements through its @file{doc/COPYRIGHTS} and
@file{src/gnuwin32/COPURIGHTS.win} files.  But keeping those up-to-date
is tedious, as external software does change its licence(s).

@unnumbered Recursive dependencies

Static linking means that recursive dependencies need to be handled
explicitly, often @emph{via} @command{pkg-config --static --libs}.  And
(L)GPL-ed libraries can depend on others with a BSD, Apache or other
licence with redistribution requirements.  For example, quite a lot of
libraries depend directly or indirectly on @code{libtiff} which requires
redistribution of its (non-BSD) licence and @code{libtiff} has a large
set of optional dependencies, some such as @code{webp} have BSD-style
licences.  Such chains of depeendence can result in a requirement to
redistribute a dozen or more licences (for example for users of
@code{libgdal} which optionally links to many other packages, some of
which like @code{libcurl} and @code{libtiff} may themselves link to
several other packages).

How can a package maintainer tell what libraries a package DSO/DLL is
statically linked to?  This is in general unaswerable as the dependency
chains depend on the OS and what options were used when the static
libraries were built.  But some hints:

@itemize @bullet
@item For a package already on CRAN, look at the installation logs for
macOS and Windows linked as `install log' from the CRAN check logs on
those platforms.

@item Run @command{pkg-config --static --libs}, preferably on macOS and/or
Windows (with @code{rtools} installed).

@item Submit an under-preparation package to @code{mac-builder} and
@code{win-builder} and look in the installation logs to see which
libraries are included at the linking step(s).
@end itemize

@noindent
It can be tricky to know what @strong{is} a system library on macOS --
ICU (@code{libicucore} provided by macOS) @code{expat}, @code{libbz2},
@code{libcurl}, @code{libxml-2.0} and @code{zlib} are usually (but not
always) linked dynamically from the OS.

@unnumbered Projects requiring licence redistribution

A partial list:
@example
gdal
hdf4
hdf5
icu
ImageMagick
lapack
libgcrypt
libtiff
libwebp
netcdf
openjpeg2
pcre
pcre2
protobuf
szip
@end example
@noindent
@code{gdal} says it is under an MIT-style licence but the full licence
includes several components under a BSD-style licence.

@noindent
@code{jpeg} requires copyright statements to be reproduced.

@bye
