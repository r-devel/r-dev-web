\input texinfo
@c %**start of header
@setfilename external_libs.info
@settitle Using Rust in CRAN packages
@documentlanguage en

@set CRAN_POLICY_REVISION $Revision: 5711 $

@titlepage
@title Using Rust in CRAN packages
@author CRAN Repository Maintainers
@end titlepage

[Simplified 2023-07-13,  @value{CRAN_POLICY_REVISION}]

Packages wishing to use Rust code should either
@itemize @bullet
@item
include the code in the package, or
@item
download a specific version from a secure and reliable site and check
that the download is the expected code by some sort of checksum. The
expected checksum needs to be embedded in the source package.
@end itemize

In either case, the authorship and copyright information for the Rust
code must be included in the @code{DESCRIPTION} file.  That includes any
Rust sources included as dependencies (see the CRAN policy).

The package should declare
@example
SystemRequirements: Cargo (Rust's package manager), rustc
@end example

as they can be packaged separately, and can have different versions.  So
state carefully any version requirement.  (For example, in July 2023 the
current Debian distributions included cargo 0.66.0 whereas some had
rustc 1.63.0 and some 1.66.0.)

The @file{configure}/@file{configure.win} script should check for the
presence of commands @command{cargo} and @command{rustc}, and check
their versions if required.  This includes checking for system versions
on the path and personal versions in @file{~/.cargo/bin} (which are
often not on the path).  The Linux servers on the CRAN check farm use
system versions, and Linux distributions are often slow to update these
so version requirements need to be conservative.

If suitable @command{cargo}/@command{rustc} are not found, ask the user
to install them, either on their Linux system by something like
@example
dnf install cargo
apt-get install cargo rustc
@end example
@noindent
or by using @command{rustup} from @uref{https://rustup.rs/} .  The
package should not attempt to install these for itself.

@command{cargo build -j N} defaults to the number of `logical @abbr{CPU}s'.  This
usually exceeds the maximum allowed in the CRAN policy, so needs to be
set explicitly to N=1 or 2.

Please report the version of @command{rustc} used (as R does for C, C++
and Fortran compilers) in the installation log.

@strong{Caveats:}

Downloading should be avoided if at all possible.  The package would
become uninstallable if the Internet resources are temporarily or
permanently unavailable, and CRAN packages are kept available for many
years.  CRAN does not regard @code{github.com} (which used to host the
index of @code{crates.io} and still hosts most of the crates it indexes)
as sufficiently reliable.

In most cases all the Rust software can be bundled into the package
@emph{via} @command{cargo vendor}. (Thanks to Hiroaki Yutani for
providing an example of doing that in his @code{string2path} package,
version 0.1.5 at the time of writing.)  Please @command{tar} the
included Rust sources using @command{xz} compression.  If the bundle is too
large to be included in the package sources, it could be hosted at a
long-term secure site under the maintainer's control.

@bye
